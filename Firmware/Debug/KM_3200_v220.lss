
KM_3200_v220.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00001bca  00001c7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bca  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a3  00800100  00800100  00001c7e  2**0
                  ALLOC
  3 .eeprom       00000026  00810000  00810000  00001c7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001804  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000313  00000000  00000000  000036d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c15  00000000  00000000  000039eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d4  00000000  00000000  00004600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063c  00000000  00000000  00004bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001593  00000000  00000000  00005210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  000067a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
       8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
       c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_4>
      14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      34:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <__vector_13>
      38:	0c 94 a3 04 	jmp	0x946	; 0x946 <__vector_14>
      3c:	0c 94 df 04 	jmp	0x9be	; 0x9be <__vector_15>
      40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      48:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__vector_18>
      4c:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <__vector_19>
      50:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__vector_20>
      54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      68:	94 05       	cpc	r25, r4
      6a:	5a 06       	cpc	r5, r26
      6c:	63 06       	cpc	r6, r19
      6e:	61 05       	cpc	r22, r1
      70:	6a 05       	cpc	r22, r10
      72:	72 05       	cpc	r23, r2
      74:	7a 05       	cpc	r23, r10
      76:	82 05       	cpc	r24, r2

00000078 <__trampolines_end>:
      78:	30 39       	cpi	r19, 0x90	; 144
      7a:	30 30       	cpi	r19, 0x00	; 0
      7c:	30 31       	cpi	r19, 0x10	; 16
	...

0000007f <fl_version>:
      7f:	30 32 32 30 30 30 00                                022000.

00000086 <fl_name>:
      86:	4b 4d 30 31 2d 33 32 30 30 2e 4d 30 00 00           KM01-3200.M0..

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d4 e0       	ldi	r29, 0x04	; 4
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
      a0:	23 e0       	ldi	r18, 0x03	; 3
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	a3 3a       	cpi	r26, 0xA3	; 163
      ac:	b2 07       	cpc	r27, r18
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
      b0:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <main>
      b4:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <_exit>

000000b8 <__bad_interrupt>:
      b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <InitLine>:

//=========================== Фукция инициализации портов входа/выхода ====================
void InitLine(void)
{
	// --- настраиваю входы/выходы для контроллера КМ01-8600.М ---
	PORTB = 0x00;		// на выходах LD, DO1, DO2 д.б. 0
      bc:	15 b8       	out	0x05, r1	; 5
	DDRB  = 0x07;		// Выводы DO1, DO2, LD -выходы
      be:	87 e0       	ldi	r24, 0x07	; 7
      c0:	84 b9       	out	0x04, r24	; 4
	PORTC = 0x00;		// на выходах - 0
      c2:	18 b8       	out	0x08, r1	; 8
	DDRC  = 0x00;		// Выводы  DI1...DI3 -входы
      c4:	17 b8       	out	0x07, r1	; 7
	PORTD = 0x21;		// подтягиваем к + JP1,RX
      c6:	81 e2       	ldi	r24, 0x21	; 33
      c8:	8b b9       	out	0x0b, r24	; 11
	DDRD  = 0x06;		// Выводы  JP1 - вход, TXE и TX - выходы
      ca:	86 e0       	ldi	r24, 0x06	; 6
      cc:	8a b9       	out	0x0a, r24	; 10
      ce:	08 95       	ret

000000d0 <InitDev>:
* Функция настройки внутренних устройств контроллера
********************************************************************************/
void InitDev(void)
{
	// --- настраиваю прерывания по изменению состояния входов ---
	PCICR |= (1<<PCIE1);								// Разрешение прерывания для группы PCINT8...PCINT15 (PORTC)
      d0:	e8 e6       	ldi	r30, 0x68	; 104
      d2:	f0 e0       	ldi	r31, 0x00	; 0
      d4:	80 81       	ld	r24, Z
      d6:	82 60       	ori	r24, 0x02	; 2
      d8:	80 83       	st	Z, r24
	PCMSK1 |= (0<<PCINT7) | (0<<PCINT6) | (0<<PCINT5) | (0<<PCINT4) | (0<<PCINT3) | (1<<PCINT2) | (1<<PCINT1) | (1<<PCINT0); // Разрешить прерывания PCINT8,PCINT9,PCINT10
      da:	ec e6       	ldi	r30, 0x6C	; 108
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	87 60       	ori	r24, 0x07	; 7
      e2:	80 83       	st	Z, r24
      e4:	08 95       	ret

000000e6 <InState>:
// считывает состояние только одной линии входа
//=================================================================================================================================
char InState(unsigned char port_line)
{
//------------------------ Для контроллера КМ3200 ---------------------------------
	if(port_line < maxAddr_DI) {return ((MB_Ireg[1] >> port_line) & 0x01);}	// Чтение состояния входов и возврат с полученным значением
      e6:	80 31       	cpi	r24, 0x10	; 16
      e8:	68 f4       	brcc	.+26     	; 0x104 <InState+0x1e>
      ea:	20 91 89 01 	lds	r18, 0x0189
      ee:	30 91 8a 01 	lds	r19, 0x018A
      f2:	a9 01       	movw	r20, r18
      f4:	02 c0       	rjmp	.+4      	; 0xfa <InState+0x14>
      f6:	56 95       	lsr	r21
      f8:	47 95       	ror	r20
      fa:	8a 95       	dec	r24
      fc:	e2 f7       	brpl	.-8      	; 0xf6 <InState+0x10>
      fe:	ca 01       	movw	r24, r20
     100:	81 70       	andi	r24, 0x01	; 1
     102:	08 95       	ret
	else return 0xFF;															// вернуться с ошибкой
     104:	8f ef       	ldi	r24, 0xFF	; 255
}
     106:	08 95       	ret

00000108 <OutState>:
// считывает состояние только одной линии входа
//=========================================================================================
char OutState(unsigned char port_line)
{
//------------------------ Для контроллера КМ3200 ---------------------------------
	if(port_line < maxAddr_DO) {return ((MB_Ireg[2] >> port_line) & 0x01);}	// Чтение состояния выходов и возврат с полученным значением
     108:	80 31       	cpi	r24, 0x10	; 16
     10a:	68 f4       	brcc	.+26     	; 0x126 <OutState+0x1e>
     10c:	20 91 8b 01 	lds	r18, 0x018B
     110:	30 91 8c 01 	lds	r19, 0x018C
     114:	a9 01       	movw	r20, r18
     116:	02 c0       	rjmp	.+4      	; 0x11c <OutState+0x14>
     118:	56 95       	lsr	r21
     11a:	47 95       	ror	r20
     11c:	8a 95       	dec	r24
     11e:	e2 f7       	brpl	.-8      	; 0x118 <OutState+0x10>
     120:	ca 01       	movw	r24, r20
     122:	81 70       	andi	r24, 0x01	; 1
     124:	08 95       	ret
	else return 0xFF;														// вернуться с ошибкой	
     126:	8f ef       	ldi	r24, 0xFF	; 255
}
     128:	08 95       	ret

0000012a <OutControl>:
//=========================================================================================

char OutControl(char port_line, char level)
{
//------------------- Для контроллера КМ3200 --------------------
	if ((port_line >= maxAddr_DO) || (level > 1) ) return 0xFF;	//Если указана не существующая линия порта или не верный уровень сигнала, выход с ошибкой
     12a:	80 31       	cpi	r24, 0x10	; 16
     12c:	60 f5       	brcc	.+88     	; 0x186 <OutControl+0x5c>
     12e:	62 30       	cpi	r22, 0x02	; 2
     130:	60 f5       	brcc	.+88     	; 0x18a <OutControl+0x60>
	if (level!=0x00) {MB_Hreg[5] |= (0x01 << port_line);	return 0x01;} //Установка состояния линии в 1
     132:	66 23       	and	r22, r22
     134:	99 f0       	breq	.+38     	; 0x15c <OutControl+0x32>
     136:	ed e2       	ldi	r30, 0x2D	; 45
     138:	f3 e0       	ldi	r31, 0x03	; 3
     13a:	21 e0       	ldi	r18, 0x01	; 1
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	a9 01       	movw	r20, r18
     140:	02 c0       	rjmp	.+4      	; 0x146 <OutControl+0x1c>
     142:	44 0f       	add	r20, r20
     144:	55 1f       	adc	r21, r21
     146:	8a 95       	dec	r24
     148:	e2 f7       	brpl	.-8      	; 0x142 <OutControl+0x18>
     14a:	ca 01       	movw	r24, r20
     14c:	20 81       	ld	r18, Z
     14e:	31 81       	ldd	r19, Z+1	; 0x01
     150:	82 2b       	or	r24, r18
     152:	93 2b       	or	r25, r19
     154:	91 83       	std	Z+1, r25	; 0x01
     156:	80 83       	st	Z, r24
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	08 95       	ret
	else { MB_Hreg[5] &= ~(0x01 << port_line);}			//Установка состояния линии в 0
     15c:	ed e2       	ldi	r30, 0x2D	; 45
     15e:	f3 e0       	ldi	r31, 0x03	; 3
     160:	21 e0       	ldi	r18, 0x01	; 1
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	a9 01       	movw	r20, r18
     166:	02 c0       	rjmp	.+4      	; 0x16c <OutControl+0x42>
     168:	44 0f       	add	r20, r20
     16a:	55 1f       	adc	r21, r21
     16c:	8a 95       	dec	r24
     16e:	e2 f7       	brpl	.-8      	; 0x168 <OutControl+0x3e>
     170:	ca 01       	movw	r24, r20
     172:	80 95       	com	r24
     174:	90 95       	com	r25
     176:	20 81       	ld	r18, Z
     178:	31 81       	ldd	r19, Z+1	; 0x01
     17a:	82 23       	and	r24, r18
     17c:	93 23       	and	r25, r19
     17e:	91 83       	std	Z+1, r25	; 0x01
     180:	80 83       	st	Z, r24
	return 0;
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	08 95       	ret
//=========================================================================================

char OutControl(char port_line, char level)
{
//------------------- Для контроллера КМ3200 --------------------
	if ((port_line >= maxAddr_DO) || (level > 1) ) return 0xFF;	//Если указана не существующая линия порта или не верный уровень сигнала, выход с ошибкой
     186:	8f ef       	ldi	r24, 0xFF	; 255
     188:	08 95       	ret
     18a:	8f ef       	ldi	r24, 0xFF	; 255
	if (level!=0x00) {MB_Hreg[5] |= (0x01 << port_line);	return 0x01;} //Установка состояния линии в 1
	else { MB_Hreg[5] &= ~(0x01 << port_line);}			//Установка состояния линии в 0
	return 0;
}
     18c:	08 95       	ret

0000018e <INP_Read>:

//=========================================================== КОНТРОЛЬ СОСТОЯНИЯ ДИСКРЕТНЫХ ЛИНИЙ ВВОДА ==================================================
//========================================================================================================================================================
// --- Чтение состояния входов (надо при старте, т.к. дальнейшие изменения состояния работают по прерыванию) ---
void INP_Read(void)
{
     18e:	82 e0       	ldi	r24, 0x02	; 2
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	a2 e0       	ldi	r26, 0x02	; 2
     194:	b0 e0       	ldi	r27, 0x00	; 0
	for(char i=0;i<3;i++) // считывает состояние 3 бит
	{
		if((PINC & (1<<i)) == 0) MB_Ireg[1] &= ~(1<<(2-i));// установить бит в 0
		else MB_Ireg[1] |= (1<<(2-i));						// установить бит в 1
     196:	e9 e8       	ldi	r30, 0x89	; 137
     198:	f1 e0       	ldi	r31, 0x01	; 1
     19a:	61 e0       	ldi	r22, 0x01	; 1
     19c:	70 e0       	ldi	r23, 0x00	; 0
// --- Чтение состояния входов (надо при старте, т.к. дальнейшие изменения состояния работают по прерыванию) ---
void INP_Read(void)
{
	for(char i=0;i<3;i++) // считывает состояние 3 бит
	{
		if((PINC & (1<<i)) == 0) MB_Ireg[1] &= ~(1<<(2-i));// установить бит в 0
     19e:	26 b1       	in	r18, 0x06	; 6
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	ad 01       	movw	r20, r26
     1a4:	48 1b       	sub	r20, r24
     1a6:	59 0b       	sbc	r21, r25
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <INP_Read+0x20>
     1aa:	35 95       	asr	r19
     1ac:	27 95       	ror	r18
     1ae:	4a 95       	dec	r20
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <INP_Read+0x1c>
     1b2:	20 fd       	sbrc	r18, 0
     1b4:	10 c0       	rjmp	.+32     	; 0x1d6 <INP_Read+0x48>
     1b6:	9b 01       	movw	r18, r22
     1b8:	08 2e       	mov	r0, r24
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <INP_Read+0x32>
     1bc:	22 0f       	add	r18, r18
     1be:	33 1f       	adc	r19, r19
     1c0:	0a 94       	dec	r0
     1c2:	e2 f7       	brpl	.-8      	; 0x1bc <INP_Read+0x2e>
     1c4:	20 95       	com	r18
     1c6:	30 95       	com	r19
     1c8:	40 81       	ld	r20, Z
     1ca:	51 81       	ldd	r21, Z+1	; 0x01
     1cc:	24 23       	and	r18, r20
     1ce:	35 23       	and	r19, r21
     1d0:	31 83       	std	Z+1, r19	; 0x01
     1d2:	20 83       	st	Z, r18
     1d4:	0d c0       	rjmp	.+26     	; 0x1f0 <INP_Read+0x62>
		else MB_Ireg[1] |= (1<<(2-i));						// установить бит в 1
     1d6:	20 81       	ld	r18, Z
     1d8:	31 81       	ldd	r19, Z+1	; 0x01
     1da:	ab 01       	movw	r20, r22
     1dc:	08 2e       	mov	r0, r24
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <INP_Read+0x56>
     1e0:	44 0f       	add	r20, r20
     1e2:	55 1f       	adc	r21, r21
     1e4:	0a 94       	dec	r0
     1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <INP_Read+0x52>
     1e8:	24 2b       	or	r18, r20
     1ea:	35 2b       	or	r19, r21
     1ec:	31 83       	std	Z+1, r19	; 0x01
     1ee:	20 83       	st	Z, r18
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	a8 f6       	brcc	.-86     	; 0x19e <INP_Read+0x10>
	}
}
     1f4:	08 95       	ret

000001f6 <__vector_4>:
 /******************************************************************************
 * Обработка прерывания по изменению состояния входов DI1,DI2,DI3,DI4,DI5,DI6,DI7
 ******************************************************************************/
 ISR(PCINT1_vect)
{ // пишем текущее состояние входов в регистр Input
     1f6:	1f 92       	push	r1
     1f8:	0f 92       	push	r0
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	0f 92       	push	r0
     1fe:	11 24       	eor	r1, r1
     200:	2f 93       	push	r18
     202:	3f 93       	push	r19
     204:	4f 93       	push	r20
     206:	5f 93       	push	r21
     208:	6f 93       	push	r22
     20a:	7f 93       	push	r23
     20c:	8f 93       	push	r24
     20e:	9f 93       	push	r25
     210:	af 93       	push	r26
     212:	bf 93       	push	r27
     214:	ef 93       	push	r30
     216:	ff 93       	push	r31
     218:	82 e0       	ldi	r24, 0x02	; 2
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	a2 e0       	ldi	r26, 0x02	; 2
     21e:	b0 e0       	ldi	r27, 0x00	; 0
char i;
	for(i=0;i<3;i++) // считывает состояние 3 бит
		{
		if((PINC & (1<<i)) == 0) MB_Ireg[1] &= ~(1<<(2-i));// установить бит в 0
		else MB_Ireg[1] |= (1<<(2-i));						// установить бит в 1
     220:	e9 e8       	ldi	r30, 0x89	; 137
     222:	f1 e0       	ldi	r31, 0x01	; 1
     224:	61 e0       	ldi	r22, 0x01	; 1
     226:	70 e0       	ldi	r23, 0x00	; 0
 ISR(PCINT1_vect)
{ // пишем текущее состояние входов в регистр Input
char i;
	for(i=0;i<3;i++) // считывает состояние 3 бит
		{
		if((PINC & (1<<i)) == 0) MB_Ireg[1] &= ~(1<<(2-i));// установить бит в 0
     228:	26 b1       	in	r18, 0x06	; 6
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	ad 01       	movw	r20, r26
     22e:	48 1b       	sub	r20, r24
     230:	59 0b       	sbc	r21, r25
     232:	02 c0       	rjmp	.+4      	; 0x238 <__vector_4+0x42>
     234:	35 95       	asr	r19
     236:	27 95       	ror	r18
     238:	4a 95       	dec	r20
     23a:	e2 f7       	brpl	.-8      	; 0x234 <__vector_4+0x3e>
     23c:	20 fd       	sbrc	r18, 0
     23e:	10 c0       	rjmp	.+32     	; 0x260 <__vector_4+0x6a>
     240:	9b 01       	movw	r18, r22
     242:	08 2e       	mov	r0, r24
     244:	02 c0       	rjmp	.+4      	; 0x24a <__vector_4+0x54>
     246:	22 0f       	add	r18, r18
     248:	33 1f       	adc	r19, r19
     24a:	0a 94       	dec	r0
     24c:	e2 f7       	brpl	.-8      	; 0x246 <__vector_4+0x50>
     24e:	20 95       	com	r18
     250:	30 95       	com	r19
     252:	40 81       	ld	r20, Z
     254:	51 81       	ldd	r21, Z+1	; 0x01
     256:	24 23       	and	r18, r20
     258:	35 23       	and	r19, r21
     25a:	31 83       	std	Z+1, r19	; 0x01
     25c:	20 83       	st	Z, r18
     25e:	0d c0       	rjmp	.+26     	; 0x27a <__vector_4+0x84>
		else MB_Ireg[1] |= (1<<(2-i));						// установить бит в 1
     260:	20 81       	ld	r18, Z
     262:	31 81       	ldd	r19, Z+1	; 0x01
     264:	ab 01       	movw	r20, r22
     266:	08 2e       	mov	r0, r24
     268:	02 c0       	rjmp	.+4      	; 0x26e <__vector_4+0x78>
     26a:	44 0f       	add	r20, r20
     26c:	55 1f       	adc	r21, r21
     26e:	0a 94       	dec	r0
     270:	e2 f7       	brpl	.-8      	; 0x26a <__vector_4+0x74>
     272:	24 2b       	or	r18, r20
     274:	35 2b       	or	r19, r21
     276:	31 83       	std	Z+1, r19	; 0x01
     278:	20 83       	st	Z, r18
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	a8 f6       	brcc	.-86     	; 0x228 <__vector_4+0x32>
		}
// Проверяем работу счетных входов!
// =========== если задана работа счетного входа №1 ============================
if((MB_Hreg[6] & 0x01) != 0)
     27e:	20 91 2f 03 	lds	r18, 0x032F
     282:	20 ff       	sbrs	r18, 0
     284:	30 c0       	rjmp	.+96     	; 0x2e6 <__vector_4+0xf0>
{
	if(((PINC & 0x04) != 0) & ((count.stat & 0x01) == 0)) // если на входе 1, а был 0
     286:	86 b1       	in	r24, 0x06	; 6
     288:	30 91 90 02 	lds	r19, 0x0290
     28c:	30 fd       	sbrc	r19, 0
     28e:	24 c0       	rjmp	.+72     	; 0x2d8 <__vector_4+0xe2>
     290:	82 ff       	sbrs	r24, 2
     292:	22 c0       	rjmp	.+68     	; 0x2d8 <__vector_4+0xe2>
	{
		count.pre_cnt1++;		// увеличить предделитель на 1
     294:	e1 e9       	ldi	r30, 0x91	; 145
     296:	f2 e0       	ldi	r31, 0x02	; 2
     298:	80 81       	ld	r24, Z
     29a:	91 81       	ldd	r25, Z+1	; 0x01
     29c:	01 96       	adiw	r24, 0x01	; 1
     29e:	91 83       	std	Z+1, r25	; 0x01
     2a0:	80 83       	st	Z, r24
		count.stat |= 0x01;		// защита от повторного входа
     2a2:	31 60       	ori	r19, 0x01	; 1
     2a4:	30 93 90 02 	sts	0x0290, r19
		if(count.pre_cnt1 >= MB_Hreg[7]) {count.pre_cnt1 = 0; count.cnt1++;} // собственно счет
     2a8:	40 91 31 03 	lds	r20, 0x0331
     2ac:	50 91 32 03 	lds	r21, 0x0332
     2b0:	84 17       	cp	r24, r20
     2b2:	95 07       	cpc	r25, r21
     2b4:	88 f0       	brcs	.+34     	; 0x2d8 <__vector_4+0xe2>
     2b6:	10 92 92 02 	sts	0x0292, r1
     2ba:	10 92 91 02 	sts	0x0291, r1
     2be:	e3 e9       	ldi	r30, 0x93	; 147
     2c0:	f2 e0       	ldi	r31, 0x02	; 2
     2c2:	80 81       	ld	r24, Z
     2c4:	91 81       	ldd	r25, Z+1	; 0x01
     2c6:	a2 81       	ldd	r26, Z+2	; 0x02
     2c8:	b3 81       	ldd	r27, Z+3	; 0x03
     2ca:	01 96       	adiw	r24, 0x01	; 1
     2cc:	a1 1d       	adc	r26, r1
     2ce:	b1 1d       	adc	r27, r1
     2d0:	80 83       	st	Z, r24
     2d2:	91 83       	std	Z+1, r25	; 0x01
     2d4:	a2 83       	std	Z+2, r26	; 0x02
     2d6:	b3 83       	std	Z+3, r27	; 0x03
	}
	if((PINC & 0x04) == 0) count.stat &= ~(0x01); // Если на входе 0 - взвести счетчик и ждать очередной 1!
     2d8:	32 99       	sbic	0x06, 2	; 6
     2da:	05 c0       	rjmp	.+10     	; 0x2e6 <__vector_4+0xf0>
     2dc:	e0 e9       	ldi	r30, 0x90	; 144
     2de:	f2 e0       	ldi	r31, 0x02	; 2
     2e0:	80 81       	ld	r24, Z
     2e2:	8e 7f       	andi	r24, 0xFE	; 254
     2e4:	80 83       	st	Z, r24
}
// ================ если задана работа счетного входа №2 =============================================
if((MB_Hreg[6] & 0x02) != 0)
     2e6:	21 ff       	sbrs	r18, 1
     2e8:	30 c0       	rjmp	.+96     	; 0x34a <__vector_4+0x154>
{
	if(((PINC & 0x02) != 0) & ((count.stat & 0x02) == 0)) // если на входе 1, а был 0
     2ea:	86 b1       	in	r24, 0x06	; 6
     2ec:	30 91 90 02 	lds	r19, 0x0290
     2f0:	31 fd       	sbrc	r19, 1
     2f2:	24 c0       	rjmp	.+72     	; 0x33c <__vector_4+0x146>
     2f4:	81 ff       	sbrs	r24, 1
     2f6:	22 c0       	rjmp	.+68     	; 0x33c <__vector_4+0x146>
	{
		count.pre_cnt2++;		// увеличить предделитель на 1
     2f8:	e7 e9       	ldi	r30, 0x97	; 151
     2fa:	f2 e0       	ldi	r31, 0x02	; 2
     2fc:	80 81       	ld	r24, Z
     2fe:	91 81       	ldd	r25, Z+1	; 0x01
     300:	01 96       	adiw	r24, 0x01	; 1
     302:	91 83       	std	Z+1, r25	; 0x01
     304:	80 83       	st	Z, r24
		count.stat |= 0x02;		// защита от повторного входа
     306:	32 60       	ori	r19, 0x02	; 2
     308:	30 93 90 02 	sts	0x0290, r19
		if(count.pre_cnt2 >= MB_Hreg[10]) {count.pre_cnt2 = 0; count.cnt2++;} // собственно счет
     30c:	40 91 37 03 	lds	r20, 0x0337
     310:	50 91 38 03 	lds	r21, 0x0338
     314:	84 17       	cp	r24, r20
     316:	95 07       	cpc	r25, r21
     318:	88 f0       	brcs	.+34     	; 0x33c <__vector_4+0x146>
     31a:	10 92 98 02 	sts	0x0298, r1
     31e:	10 92 97 02 	sts	0x0297, r1
     322:	e9 e9       	ldi	r30, 0x99	; 153
     324:	f2 e0       	ldi	r31, 0x02	; 2
     326:	80 81       	ld	r24, Z
     328:	91 81       	ldd	r25, Z+1	; 0x01
     32a:	a2 81       	ldd	r26, Z+2	; 0x02
     32c:	b3 81       	ldd	r27, Z+3	; 0x03
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	a1 1d       	adc	r26, r1
     332:	b1 1d       	adc	r27, r1
     334:	80 83       	st	Z, r24
     336:	91 83       	std	Z+1, r25	; 0x01
     338:	a2 83       	std	Z+2, r26	; 0x02
     33a:	b3 83       	std	Z+3, r27	; 0x03
	}
	if((PINC & 0x02) == 0) count.stat &= ~(0x02); // Если на входе 0 - взвести счетчик и ждать очередной 1!
     33c:	31 99       	sbic	0x06, 1	; 6
     33e:	05 c0       	rjmp	.+10     	; 0x34a <__vector_4+0x154>
     340:	e0 e9       	ldi	r30, 0x90	; 144
     342:	f2 e0       	ldi	r31, 0x02	; 2
     344:	80 81       	ld	r24, Z
     346:	8d 7f       	andi	r24, 0xFD	; 253
     348:	80 83       	st	Z, r24
}
// ================ если задана работа счетного входа №3 =============================================
if((MB_Hreg[6] & 0x04) != 0)
     34a:	22 ff       	sbrs	r18, 2
     34c:	30 c0       	rjmp	.+96     	; 0x3ae <__vector_4+0x1b8>
{
	if(((PINC & 0x01) != 0) & ((count.stat & 0x04) == 0)) // если на входе 1, а был 0
     34e:	86 b1       	in	r24, 0x06	; 6
     350:	20 91 90 02 	lds	r18, 0x0290
     354:	22 fd       	sbrc	r18, 2
     356:	24 c0       	rjmp	.+72     	; 0x3a0 <__vector_4+0x1aa>
     358:	80 ff       	sbrs	r24, 0
     35a:	22 c0       	rjmp	.+68     	; 0x3a0 <__vector_4+0x1aa>
	{
		count.pre_cnt3++;			// увеличить предделитель на 1
     35c:	ed e9       	ldi	r30, 0x9D	; 157
     35e:	f2 e0       	ldi	r31, 0x02	; 2
     360:	80 81       	ld	r24, Z
     362:	91 81       	ldd	r25, Z+1	; 0x01
     364:	01 96       	adiw	r24, 0x01	; 1
     366:	91 83       	std	Z+1, r25	; 0x01
     368:	80 83       	st	Z, r24
		count.stat |= 0x04;			// защита от повторного входа
     36a:	24 60       	ori	r18, 0x04	; 4
     36c:	20 93 90 02 	sts	0x0290, r18
		if(count.pre_cnt3 >= MB_Hreg[13]) {count.pre_cnt3 = 0; count.cnt3++;} // собственно счет
     370:	20 91 3d 03 	lds	r18, 0x033D
     374:	30 91 3e 03 	lds	r19, 0x033E
     378:	82 17       	cp	r24, r18
     37a:	93 07       	cpc	r25, r19
     37c:	88 f0       	brcs	.+34     	; 0x3a0 <__vector_4+0x1aa>
     37e:	10 92 9e 02 	sts	0x029E, r1
     382:	10 92 9d 02 	sts	0x029D, r1
     386:	ef e9       	ldi	r30, 0x9F	; 159
     388:	f2 e0       	ldi	r31, 0x02	; 2
     38a:	80 81       	ld	r24, Z
     38c:	91 81       	ldd	r25, Z+1	; 0x01
     38e:	a2 81       	ldd	r26, Z+2	; 0x02
     390:	b3 81       	ldd	r27, Z+3	; 0x03
     392:	01 96       	adiw	r24, 0x01	; 1
     394:	a1 1d       	adc	r26, r1
     396:	b1 1d       	adc	r27, r1
     398:	80 83       	st	Z, r24
     39a:	91 83       	std	Z+1, r25	; 0x01
     39c:	a2 83       	std	Z+2, r26	; 0x02
     39e:	b3 83       	std	Z+3, r27	; 0x03
	}
	if((PINC & 0x01) == 0) count.stat &= ~(0x04); // Если на входе 0 - взвести счетчик и ждать очередной 1!
     3a0:	30 99       	sbic	0x06, 0	; 6
     3a2:	05 c0       	rjmp	.+10     	; 0x3ae <__vector_4+0x1b8>
     3a4:	e0 e9       	ldi	r30, 0x90	; 144
     3a6:	f2 e0       	ldi	r31, 0x02	; 2
     3a8:	80 81       	ld	r24, Z
     3aa:	8b 7f       	andi	r24, 0xFB	; 251
     3ac:	80 83       	st	Z, r24
}
} 
     3ae:	ff 91       	pop	r31
     3b0:	ef 91       	pop	r30
     3b2:	bf 91       	pop	r27
     3b4:	af 91       	pop	r26
     3b6:	9f 91       	pop	r25
     3b8:	8f 91       	pop	r24
     3ba:	7f 91       	pop	r23
     3bc:	6f 91       	pop	r22
     3be:	5f 91       	pop	r21
     3c0:	4f 91       	pop	r20
     3c2:	3f 91       	pop	r19
     3c4:	2f 91       	pop	r18
     3c6:	0f 90       	pop	r0
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	0f 90       	pop	r0
     3cc:	1f 90       	pop	r1
     3ce:	18 95       	reti

000003d0 <OUT_Read>:
{
	char i;
	// --- Чтение состояния выходов ---
	for(i=0;i<2;i++) // только 2 выхода
	{
		if((PINB & (1<<(1+i))) == 0) MB_Ireg[2] &=~(0x01 << i);	// установить 0
     3d0:	19 9b       	sbis	0x03, 1	; 3
     3d2:	08 c0       	rjmp	.+16     	; 0x3e4 <OUT_Read+0x14>
		else MB_Ireg[2] |=0x01 << i;							// установить 1
     3d4:	eb e8       	ldi	r30, 0x8B	; 139
     3d6:	f1 e0       	ldi	r31, 0x01	; 1
     3d8:	80 81       	ld	r24, Z
     3da:	91 81       	ldd	r25, Z+1	; 0x01
     3dc:	81 60       	ori	r24, 0x01	; 1
     3de:	91 83       	std	Z+1, r25	; 0x01
     3e0:	80 83       	st	Z, r24
     3e2:	07 c0       	rjmp	.+14     	; 0x3f2 <OUT_Read+0x22>
{
	char i;
	// --- Чтение состояния выходов ---
	for(i=0;i<2;i++) // только 2 выхода
	{
		if((PINB & (1<<(1+i))) == 0) MB_Ireg[2] &=~(0x01 << i);	// установить 0
     3e4:	eb e8       	ldi	r30, 0x8B	; 139
     3e6:	f1 e0       	ldi	r31, 0x01	; 1
     3e8:	80 81       	ld	r24, Z
     3ea:	91 81       	ldd	r25, Z+1	; 0x01
     3ec:	8e 7f       	andi	r24, 0xFE	; 254
     3ee:	91 83       	std	Z+1, r25	; 0x01
     3f0:	80 83       	st	Z, r24
     3f2:	1a 99       	sbic	0x03, 2	; 3
     3f4:	08 c0       	rjmp	.+16     	; 0x406 <OUT_Read+0x36>
     3f6:	eb e8       	ldi	r30, 0x8B	; 139
     3f8:	f1 e0       	ldi	r31, 0x01	; 1
     3fa:	80 81       	ld	r24, Z
     3fc:	91 81       	ldd	r25, Z+1	; 0x01
     3fe:	8d 7f       	andi	r24, 0xFD	; 253
     400:	91 83       	std	Z+1, r25	; 0x01
     402:	80 83       	st	Z, r24
     404:	08 95       	ret
		else MB_Ireg[2] |=0x01 << i;							// установить 1
     406:	eb e8       	ldi	r30, 0x8B	; 139
     408:	f1 e0       	ldi	r31, 0x01	; 1
     40a:	80 81       	ld	r24, Z
     40c:	91 81       	ldd	r25, Z+1	; 0x01
     40e:	82 60       	ori	r24, 0x02	; 2
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	80 83       	st	Z, r24
     414:	08 95       	ret

00000416 <OUT_Update>:
{
char i;
	// --- Изменение состояния выходов ---
	for(i=0;i<2;i++) // первые 4 выхода (реле)
	{
		if((MB_Hreg[5] & (1<<i)) == 0) PORTB&=~(0x01 << (1+i));	// установить 0
     416:	80 91 2d 03 	lds	r24, 0x032D
     41a:	80 ff       	sbrs	r24, 0
     41c:	02 c0       	rjmp	.+4      	; 0x422 <OUT_Update+0xc>
		else PORTB|=0x01 << (1+i);								// установить 1
     41e:	29 9a       	sbi	0x05, 1	; 5
     420:	01 c0       	rjmp	.+2      	; 0x424 <OUT_Update+0xe>
{
char i;
	// --- Изменение состояния выходов ---
	for(i=0;i<2;i++) // первые 4 выхода (реле)
	{
		if((MB_Hreg[5] & (1<<i)) == 0) PORTB&=~(0x01 << (1+i));	// установить 0
     422:	29 98       	cbi	0x05, 1	; 5
     424:	80 91 2d 03 	lds	r24, 0x032D
     428:	81 fd       	sbrc	r24, 1
     42a:	02 c0       	rjmp	.+4      	; 0x430 <OUT_Update+0x1a>
     42c:	2a 98       	cbi	0x05, 2	; 5
     42e:	08 95       	ret
		else PORTB|=0x01 << (1+i);								// установить 1
     430:	2a 9a       	sbi	0x05, 2	; 5
     432:	08 95       	ret

00000434 <CNT_clear>:
//================================================ РАБОТА СЧЕТНЫХ ВХОДОВ ==================================================================
//=========================================================================================================================================
// === Очистить счетные регистры ===
void CNT_clear(void)
{
count.stat = 0;
     434:	10 92 90 02 	sts	0x0290, r1
count.pre_cnt1 = 0;
     438:	10 92 92 02 	sts	0x0292, r1
     43c:	10 92 91 02 	sts	0x0291, r1
count.cnt1 = 0;
     440:	10 92 93 02 	sts	0x0293, r1
     444:	10 92 94 02 	sts	0x0294, r1
     448:	10 92 95 02 	sts	0x0295, r1
     44c:	10 92 96 02 	sts	0x0296, r1
count.pre_cnt2 = 0;
     450:	10 92 98 02 	sts	0x0298, r1
     454:	10 92 97 02 	sts	0x0297, r1
count.cnt2 = 0;
     458:	10 92 99 02 	sts	0x0299, r1
     45c:	10 92 9a 02 	sts	0x029A, r1
     460:	10 92 9b 02 	sts	0x029B, r1
     464:	10 92 9c 02 	sts	0x029C, r1
count.pre_cnt3 = 0;
     468:	10 92 9e 02 	sts	0x029E, r1
     46c:	10 92 9d 02 	sts	0x029D, r1
count.cnt3 = 0;
     470:	10 92 9f 02 	sts	0x029F, r1
     474:	10 92 a0 02 	sts	0x02A0, r1
     478:	10 92 a1 02 	sts	0x02A1, r1
     47c:	10 92 a2 02 	sts	0x02A2, r1
     480:	08 95       	ret

00000482 <rd_cnt>:

// === Перенос значений счетных регистров в регистры INPUT ===
void rd_cnt(void)
{
unsigned long int c = 0;									// Рабочая переменная
  c = count.cnt1 + (((unsigned long int)MB_Hreg[10] << 16) + MB_Hreg[11]);	// коррекция значения счетчика №1
     482:	20 91 39 03 	lds	r18, 0x0339
     486:	30 91 3a 03 	lds	r19, 0x033A
     48a:	80 91 93 02 	lds	r24, 0x0293
     48e:	90 91 94 02 	lds	r25, 0x0294
     492:	a0 91 95 02 	lds	r26, 0x0295
     496:	b0 91 96 02 	lds	r27, 0x0296
     49a:	82 0f       	add	r24, r18
     49c:	93 1f       	adc	r25, r19
     49e:	a1 1d       	adc	r26, r1
     4a0:	b1 1d       	adc	r27, r1
     4a2:	40 91 37 03 	lds	r20, 0x0337
     4a6:	50 91 38 03 	lds	r21, 0x0338
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	ba 01       	movw	r22, r20
     4b0:	55 27       	eor	r21, r21
     4b2:	44 27       	eor	r20, r20
     4b4:	84 0f       	add	r24, r20
     4b6:	95 1f       	adc	r25, r21
     4b8:	a6 1f       	adc	r26, r22
     4ba:	b7 1f       	adc	r27, r23
  MB_Ireg[11] = (c >> 16) & 0xFFFF;							// запись старшего числа счетчика №1
     4bc:	b0 93 9e 01 	sts	0x019E, r27
     4c0:	a0 93 9d 01 	sts	0x019D, r26
  MB_Ireg[12] = c & 0xFFFF;									// запись младшего числа счетчика №1
     4c4:	90 93 a0 01 	sts	0x01A0, r25
     4c8:	80 93 9f 01 	sts	0x019F, r24
  c = 0;
  c = count.cnt2 + (((unsigned long int)MB_Hreg[12] << 16) + MB_Hreg[13]);	// коррекция значения счетчика №2
     4cc:	20 91 3d 03 	lds	r18, 0x033D
     4d0:	30 91 3e 03 	lds	r19, 0x033E
     4d4:	80 91 99 02 	lds	r24, 0x0299
     4d8:	90 91 9a 02 	lds	r25, 0x029A
     4dc:	a0 91 9b 02 	lds	r26, 0x029B
     4e0:	b0 91 9c 02 	lds	r27, 0x029C
     4e4:	82 0f       	add	r24, r18
     4e6:	93 1f       	adc	r25, r19
     4e8:	a1 1d       	adc	r26, r1
     4ea:	b1 1d       	adc	r27, r1
     4ec:	40 91 3b 03 	lds	r20, 0x033B
     4f0:	50 91 3c 03 	lds	r21, 0x033C
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	ba 01       	movw	r22, r20
     4fa:	55 27       	eor	r21, r21
     4fc:	44 27       	eor	r20, r20
     4fe:	84 0f       	add	r24, r20
     500:	95 1f       	adc	r25, r21
     502:	a6 1f       	adc	r26, r22
     504:	b7 1f       	adc	r27, r23
  MB_Ireg[13] = (c >> 16) & 0xFFFF;							// запись старшего числа счетчика №2
     506:	b0 93 a2 01 	sts	0x01A2, r27
     50a:	a0 93 a1 01 	sts	0x01A1, r26
  MB_Ireg[14] = c & 0xFFFF;									// запись младшего числа счетчика №2
     50e:	90 93 a4 01 	sts	0x01A4, r25
     512:	80 93 a3 01 	sts	0x01A3, r24
  c = 0;
  c = count.cnt3 + (((unsigned long int)MB_Hreg[14] << 16) + MB_Hreg[15]);	// коррекция значения счетчика №3
     516:	20 91 41 03 	lds	r18, 0x0341
     51a:	30 91 42 03 	lds	r19, 0x0342
     51e:	80 91 9f 02 	lds	r24, 0x029F
     522:	90 91 a0 02 	lds	r25, 0x02A0
     526:	a0 91 a1 02 	lds	r26, 0x02A1
     52a:	b0 91 a2 02 	lds	r27, 0x02A2
     52e:	82 0f       	add	r24, r18
     530:	93 1f       	adc	r25, r19
     532:	a1 1d       	adc	r26, r1
     534:	b1 1d       	adc	r27, r1
     536:	40 91 3f 03 	lds	r20, 0x033F
     53a:	50 91 40 03 	lds	r21, 0x0340
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	ba 01       	movw	r22, r20
     544:	55 27       	eor	r21, r21
     546:	44 27       	eor	r20, r20
     548:	84 0f       	add	r24, r20
     54a:	95 1f       	adc	r25, r21
     54c:	a6 1f       	adc	r26, r22
     54e:	b7 1f       	adc	r27, r23
  MB_Ireg[15] = (c >> 16) & 0xFFFF;							// запись старшего числа счетчика №3
     550:	b0 93 a6 01 	sts	0x01A6, r27
     554:	a0 93 a5 01 	sts	0x01A5, r26
  MB_Ireg[16] = c & 0xFFFF;									// запись младшего числа счетчика №3
     558:	90 93 a8 01 	sts	0x01A8, r25
     55c:	80 93 a7 01 	sts	0x01A7, r24
     560:	08 95       	ret

00000562 <set_default>:

/**************** установка заводских настроек (заданных по умолчанию) ********************************************
* изначально все уставки находяться в  и переписываются в eeprom, затем из eeprom в рагистры ОЗУ
*******************************************************************************************************************/
void set_default(void)
{
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	63 97       	sbiw	r28, 0x13	; 19
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	de bf       	out	0x3e, r29	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	cd bf       	out	0x3d, r28	; 61
config tma;		// Временный массив!
	// --- заполню массив настроек по умолчанию ---
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
     576:	f9 9b       	sbis	0x1f, 1	; 31
     578:	02 c0       	rjmp	.+4      	; 0x57e <set_default+0x1c>
     57a:	f9 99       	sbic	0x1f, 1	; 31
     57c:	fe cf       	rjmp	.-4      	; 0x57a <set_default+0x18>
	WDR();
     57e:	a8 95       	wdr
	eeprom_read_block(&tma,&MEM_df,sizeof(MEM_df));	// Считаю вcе из EEPROM в ОЗУ
     580:	43 e1       	ldi	r20, 0x13	; 19
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	ce 01       	movw	r24, r28
     58a:	01 96       	adiw	r24, 0x01	; 1
     58c:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__eerd_block_m168pa>
	WDR();
     590:	a8 95       	wdr
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
     592:	f9 9b       	sbis	0x1f, 1	; 31
     594:	02 c0       	rjmp	.+4      	; 0x59a <set_default+0x38>
     596:	f9 99       	sbic	0x1f, 1	; 31
     598:	fe cf       	rjmp	.-4      	; 0x596 <set_default+0x34>
	WDR();
     59a:	a8 95       	wdr
	eeprom_write_block(&tma,&MEM,sizeof(tma));		// Записать всю структуру ОЗУ в EEPROM структуру рабочих настроек
     59c:	43 e1       	ldi	r20, 0x13	; 19
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	63 e1       	ldi	r22, 0x13	; 19
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	ce 01       	movw	r24, r28
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__eewr_block_m168pa>
	
}
     5ac:	63 96       	adiw	r28, 0x13	; 19
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	de bf       	out	0x3e, r29	; 62
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <rd_name>:

//================================================ Работа с INPUT регистрами ===============================================================

/************ Чтение имени контроллера из FLASH в Ireg регистр ****************************************************/
void rd_name(void)
{
     5be:	86 e8       	ldi	r24, 0x86	; 134
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	af eb       	ldi	r26, 0xBF	; 191
     5c4:	b1 e0       	ldi	r27, 0x01	; 1
     5c6:	22 e9       	ldi	r18, 0x92	; 146
     5c8:	30 e0       	ldi	r19, 0x00	; 0
for(unsigned char i=0;i<6;i++)
	{
		MB_Ireg[28+i] = (unsigned int) (pgm_read_byte(&fl_name[i*2]) << 8);
     5ca:	fc 01       	movw	r30, r24
     5cc:	44 91       	lpm	r20, Z
     5ce:	31 96       	adiw	r30, 0x01	; 1
		MB_Ireg[28+i] |= pgm_read_byte(&fl_name[(i*2)+1]);
     5d0:	e4 91       	lpm	r30, Z
/************ Чтение имени контроллера из FLASH в Ireg регистр ****************************************************/
void rd_name(void)
{
for(unsigned char i=0;i<6;i++)
	{
		MB_Ireg[28+i] = (unsigned int) (pgm_read_byte(&fl_name[i*2]) << 8);
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
		MB_Ireg[28+i] |= pgm_read_byte(&fl_name[(i*2)+1]);
     5d4:	f4 2b       	or	r31, r20
     5d6:	ed 93       	st	X+, r30
     5d8:	fd 93       	st	X+, r31
     5da:	02 96       	adiw	r24, 0x02	; 2
//================================================ Работа с INPUT регистрами ===============================================================

/************ Чтение имени контроллера из FLASH в Ireg регистр ****************************************************/
void rd_name(void)
{
for(unsigned char i=0;i<6;i++)
     5dc:	82 17       	cp	r24, r18
     5de:	93 07       	cpc	r25, r19
     5e0:	a1 f7       	brne	.-24     	; 0x5ca <rd_name+0xc>
	{
		MB_Ireg[28+i] = (unsigned int) (pgm_read_byte(&fl_name[i*2]) << 8);
		MB_Ireg[28+i] |= pgm_read_byte(&fl_name[(i*2)+1]);
	}
}
     5e2:	08 95       	ret

000005e4 <rd_ver>:
/************ Чтение версии ПО контроллера из FLASH в Ireg регистр ***********************************************/
void rd_ver(void)
{
     5e4:	8f e7       	ldi	r24, 0x7F	; 127
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	af ec       	ldi	r26, 0xCF	; 207
     5ea:	b1 e0       	ldi	r27, 0x01	; 1
     5ec:	25 e8       	ldi	r18, 0x85	; 133
     5ee:	30 e0       	ldi	r19, 0x00	; 0
for(unsigned char i=0;i<3;i++)
  {
	MB_Ireg[36+i] = (unsigned int) (pgm_read_byte(&fl_version[i*2]) << 8);
     5f0:	fc 01       	movw	r30, r24
     5f2:	44 91       	lpm	r20, Z
     5f4:	31 96       	adiw	r30, 0x01	; 1
	MB_Ireg[36+i] |= pgm_read_byte(&fl_version[(i*2)+1]);
     5f6:	e4 91       	lpm	r30, Z
/************ Чтение версии ПО контроллера из FLASH в Ireg регистр ***********************************************/
void rd_ver(void)
{
for(unsigned char i=0;i<3;i++)
  {
	MB_Ireg[36+i] = (unsigned int) (pgm_read_byte(&fl_version[i*2]) << 8);
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
	MB_Ireg[36+i] |= pgm_read_byte(&fl_version[(i*2)+1]);
     5fa:	f4 2b       	or	r31, r20
     5fc:	ed 93       	st	X+, r30
     5fe:	fd 93       	st	X+, r31
     600:	02 96       	adiw	r24, 0x02	; 2
	}
}
/************ Чтение версии ПО контроллера из FLASH в Ireg регистр ***********************************************/
void rd_ver(void)
{
for(unsigned char i=0;i<3;i++)
     602:	82 17       	cp	r24, r18
     604:	93 07       	cpc	r25, r19
     606:	a1 f7       	brne	.-24     	; 0x5f0 <rd_ver+0xc>
  {
	MB_Ireg[36+i] = (unsigned int) (pgm_read_byte(&fl_version[i*2]) << 8);
	MB_Ireg[36+i] |= pgm_read_byte(&fl_version[(i*2)+1]);
  }
}
     608:	08 95       	ret

0000060a <rd_ser>:
/************ Чтение серийного номера контроллера из FLASH в Ireg регистр ****************************************/
void rd_ser(void)
{
     60a:	88 e7       	ldi	r24, 0x78	; 120
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	a5 ed       	ldi	r26, 0xD5	; 213
     610:	b1 e0       	ldi	r27, 0x01	; 1
     612:	2e e7       	ldi	r18, 0x7E	; 126
     614:	30 e0       	ldi	r19, 0x00	; 0
for(unsigned char i=0;i<3;i++)
  {
	MB_Ireg[39+i] = (unsigned int) (pgm_read_byte(&fl_progid[i*2]) << 8);
     616:	fc 01       	movw	r30, r24
     618:	44 91       	lpm	r20, Z
     61a:	31 96       	adiw	r30, 0x01	; 1
	MB_Ireg[39+i] |= pgm_read_byte(&fl_progid[(i*2)+1]);
     61c:	e4 91       	lpm	r30, Z
/************ Чтение серийного номера контроллера из FLASH в Ireg регистр ****************************************/
void rd_ser(void)
{
for(unsigned char i=0;i<3;i++)
  {
	MB_Ireg[39+i] = (unsigned int) (pgm_read_byte(&fl_progid[i*2]) << 8);
     61e:	f0 e0       	ldi	r31, 0x00	; 0
	MB_Ireg[39+i] |= pgm_read_byte(&fl_progid[(i*2)+1]);
     620:	f4 2b       	or	r31, r20
     622:	ed 93       	st	X+, r30
     624:	fd 93       	st	X+, r31
     626:	02 96       	adiw	r24, 0x02	; 2
  }
}
/************ Чтение серийного номера контроллера из FLASH в Ireg регистр ****************************************/
void rd_ser(void)
{
for(unsigned char i=0;i<3;i++)
     628:	82 17       	cp	r24, r18
     62a:	93 07       	cpc	r25, r19
     62c:	a1 f7       	brne	.-24     	; 0x616 <rd_ser+0xc>
  {
	MB_Ireg[39+i] = (unsigned int) (pgm_read_byte(&fl_progid[i*2]) << 8);
	MB_Ireg[39+i] |= pgm_read_byte(&fl_progid[(i*2)+1]);
  }
}
     62e:	08 95       	ret

00000630 <rd_adr>:
//============================================================================================================================================

/************ Чтение адреса контроллера в ModBus сети из EEPROM в Hreg регистр ***********************************/
void rd_adr(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();						// Ждать готовности eeprom
     630:	f9 9b       	sbis	0x1f, 1	; 31
     632:	02 c0       	rjmp	.+4      	; 0x638 <rd_adr+0x8>
     634:	f9 99       	sbic	0x1f, 1	; 31
     636:	fe cf       	rjmp	.-4      	; 0x634 <rd_adr+0x4>
	WDR();
     638:	a8 95       	wdr
	MB_Hreg[29] = (unsigned int) eeprom_read_byte(&MEM.Address_device); // Считаю сетевой адрес контроллера из EEPROM в ОЗУ			
     63a:	83 e1       	ldi	r24, 0x13	; 19
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__eerd_byte_m168pa>
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	90 93 5e 03 	sts	0x035E, r25
     648:	80 93 5d 03 	sts	0x035D, r24
     64c:	08 95       	ret

0000064e <rd_par>:
}
/*** Чтение категории скорости и параметров в сети для контроллера, из EEPROM в Hreg регистр *********************/
void rd_par(void)
{
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
	if(eeprom_is_ready() == 0) eeprom_busy_wait();				// Ждать готовности eeprom
     652:	f9 9b       	sbis	0x1f, 1	; 31
     654:	02 c0       	rjmp	.+4      	; 0x65a <rd_par+0xc>
     656:	f9 99       	sbic	0x1f, 1	; 31
     658:	fe cf       	rjmp	.-4      	; 0x656 <rd_par+0x8>
	WDR();
     65a:	a8 95       	wdr
	MB_Hreg[30] = eeprom_read_byte(&MEM.COM_Param) << 8;		// Считаю сначала параметры сети для контроллера и сдвиг т.к. это старший байт
     65c:	85 e1       	ldi	r24, 0x15	; 21
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__eerd_byte_m168pa>
     664:	c8 2f       	mov	r28, r24
     666:	d0 e0       	ldi	r29, 0x00	; 0
     668:	dc 2f       	mov	r29, r28
     66a:	cc 27       	eor	r28, r28
     66c:	d0 93 60 03 	sts	0x0360, r29
     670:	c0 93 5f 03 	sts	0x035F, r28
	WDR();
     674:	a8 95       	wdr
	MB_Hreg[30] |= eeprom_read_byte(&MEM.COM_Speed);			// Считаю категорию скорости для контроллера и склеиваю со старшим.
     676:	84 e1       	ldi	r24, 0x14	; 20
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__eerd_byte_m168pa>
     67e:	c8 2b       	or	r28, r24
     680:	d0 93 60 03 	sts	0x0360, r29
     684:	c0 93 5f 03 	sts	0x035F, r28
}
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <rd_mcnt>:
//======================================== РАБОТА С СЧЕТНЫМИ ВХОДАМИ - ЧТЕНИЕ =========================================================

/****** Чтение значения режима работы цифровых входов контроллера из EEPROM в Hreg регистр ********************/
void rd_mcnt(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();				// Ждать готовности eeprom
     68e:	f9 9b       	sbis	0x1f, 1	; 31
     690:	02 c0       	rjmp	.+4      	; 0x696 <rd_mcnt+0x8>
     692:	f9 99       	sbic	0x1f, 1	; 31
     694:	fe cf       	rjmp	.-4      	; 0x692 <rd_mcnt+0x4>
	WDR();
     696:	a8 95       	wdr
	MB_Hreg[6] = (unsigned int) eeprom_read_byte(&MEM.INP_Mode); // Считаю значение режимов работы из EEPROM в ОЗУ
     698:	86 e1       	ldi	r24, 0x16	; 22
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__eerd_byte_m168pa>
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	90 93 30 03 	sts	0x0330, r25
     6a6:	80 93 2f 03 	sts	0x032F, r24
     6aa:	08 95       	ret

000006ac <rd_vcnt1>:
}
/****** Чтение значения счетчика для входа №1 контроллера из EEPROM в Hreg регистр *****************************/
void rd_vcnt1(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();				// Ждать готовности eeprom
     6ac:	f9 9b       	sbis	0x1f, 1	; 31
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <rd_vcnt1+0x8>
     6b0:	f9 99       	sbic	0x1f, 1	; 31
     6b2:	fe cf       	rjmp	.-4      	; 0x6b0 <rd_vcnt1+0x4>
	WDR();
     6b4:	a8 95       	wdr
	MB_Hreg[7] = (unsigned int) eeprom_read_byte(&MEM.CB_cnt1); // Считаю значение счетчика из EEPROM в ОЗУ
     6b6:	87 e1       	ldi	r24, 0x17	; 23
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__eerd_byte_m168pa>
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	90 93 32 03 	sts	0x0332, r25
     6c4:	80 93 31 03 	sts	0x0331, r24
     6c8:	08 95       	ret

000006ca <rd_vlcnt1>:
}
/****** Чтение младшего слова значения счетчика для входа №1 контроллера из EEPROM в Hreg регистр *************/
void rd_vlcnt1(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
     6ca:	f9 9b       	sbis	0x1f, 1	; 31
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <rd_vlcnt1+0x8>
     6ce:	f9 99       	sbic	0x1f, 1	; 31
     6d0:	fe cf       	rjmp	.-4      	; 0x6ce <rd_vlcnt1+0x4>
	WDR();
     6d2:	a8 95       	wdr
	MB_Hreg[11] = eeprom_read_word(&MEM.LW_cnt1);			// Считаю мл слово опорного числа счетчика из EEPROM в ОЗУ
     6d4:	8c e1       	ldi	r24, 0x1C	; 28
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__eerd_word_m168pa>
     6dc:	90 93 3a 03 	sts	0x033A, r25
     6e0:	80 93 39 03 	sts	0x0339, r24
     6e4:	08 95       	ret

000006e6 <rd_vhcnt1>:
}
/****** Чтение старшего слова значения счетчика для входа №1 контроллера из EEPROM в Hreg регистр *************/
void rd_vhcnt1(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
     6e6:	f9 9b       	sbis	0x1f, 1	; 31
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <rd_vhcnt1+0x8>
     6ea:	f9 99       	sbic	0x1f, 1	; 31
     6ec:	fe cf       	rjmp	.-4      	; 0x6ea <rd_vhcnt1+0x4>
	WDR();
     6ee:	a8 95       	wdr
	MB_Hreg[10] = eeprom_read_word(&MEM.HW_cnt1);			// Считаю ст слово опорного числа счетчика из EEPROM в ОЗУ
     6f0:	8a e1       	ldi	r24, 0x1A	; 26
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__eerd_word_m168pa>
     6f8:	90 93 38 03 	sts	0x0338, r25
     6fc:	80 93 37 03 	sts	0x0337, r24
     700:	08 95       	ret

00000702 <rd_vcnt2>:
}

/****** Чтение значения счетчика для входа №2 контроллера из EEPROM в Hreg регистр *****************************/
void rd_vcnt2(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();				// Ждать готовности eeprom
     702:	f9 9b       	sbis	0x1f, 1	; 31
     704:	02 c0       	rjmp	.+4      	; 0x70a <rd_vcnt2+0x8>
     706:	f9 99       	sbic	0x1f, 1	; 31
     708:	fe cf       	rjmp	.-4      	; 0x706 <rd_vcnt2+0x4>
	WDR();
     70a:	a8 95       	wdr
	MB_Hreg[8] = (unsigned int) eeprom_read_byte(&MEM.CB_cnt2); // Считаю значение счетчика из EEPROM в ОЗУ
     70c:	88 e1       	ldi	r24, 0x18	; 24
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__eerd_byte_m168pa>
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	90 93 34 03 	sts	0x0334, r25
     71a:	80 93 33 03 	sts	0x0333, r24
     71e:	08 95       	ret

00000720 <rd_vlcnt2>:
}
/****** Чтение младшего слова значения счетчика для входа №2 контроллера из EEPROM в Hreg регистр *************/
void rd_vlcnt2(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
     720:	f9 9b       	sbis	0x1f, 1	; 31
     722:	02 c0       	rjmp	.+4      	; 0x728 <rd_vlcnt2+0x8>
     724:	f9 99       	sbic	0x1f, 1	; 31
     726:	fe cf       	rjmp	.-4      	; 0x724 <rd_vlcnt2+0x4>
	WDR();
     728:	a8 95       	wdr
	MB_Hreg[13] = eeprom_read_word(&MEM.LW_cnt2);			// Считаю мл слово опорного числа счетчика из EEPROM в ОЗУ
     72a:	80 e2       	ldi	r24, 0x20	; 32
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__eerd_word_m168pa>
     732:	90 93 3e 03 	sts	0x033E, r25
     736:	80 93 3d 03 	sts	0x033D, r24
     73a:	08 95       	ret

0000073c <rd_vhcnt2>:
}
/****** Чтение старшего слова значения счетчика для входа №2 контроллера из EEPROM в Hreg регистр *************/
void rd_vhcnt2(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
     73c:	f9 9b       	sbis	0x1f, 1	; 31
     73e:	02 c0       	rjmp	.+4      	; 0x744 <rd_vhcnt2+0x8>
     740:	f9 99       	sbic	0x1f, 1	; 31
     742:	fe cf       	rjmp	.-4      	; 0x740 <rd_vhcnt2+0x4>
	WDR();
     744:	a8 95       	wdr
	MB_Hreg[12] = eeprom_read_word(&MEM.HW_cnt2);			// Считаю ст слово опорного числа счетчика из EEPROM в ОЗУ
     746:	8e e1       	ldi	r24, 0x1E	; 30
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__eerd_word_m168pa>
     74e:	90 93 3c 03 	sts	0x033C, r25
     752:	80 93 3b 03 	sts	0x033B, r24
     756:	08 95       	ret

00000758 <rd_vcnt3>:
}

/****** Чтение значения счетчика для входа №3 контроллера из EEPROM в Hreg регистр *****************************/
void rd_vcnt3(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();				// Ждать готовности eeprom
     758:	f9 9b       	sbis	0x1f, 1	; 31
     75a:	02 c0       	rjmp	.+4      	; 0x760 <rd_vcnt3+0x8>
     75c:	f9 99       	sbic	0x1f, 1	; 31
     75e:	fe cf       	rjmp	.-4      	; 0x75c <rd_vcnt3+0x4>
	WDR();
     760:	a8 95       	wdr
	MB_Hreg[9] = (unsigned int) eeprom_read_byte(&MEM.CB_cnt3); // Считаю значение счетчика из EEPROM в ОЗУ
     762:	89 e1       	ldi	r24, 0x19	; 25
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__eerd_byte_m168pa>
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	90 93 36 03 	sts	0x0336, r25
     770:	80 93 35 03 	sts	0x0335, r24
     774:	08 95       	ret

00000776 <rd_vlcnt3>:
}
/****** Чтение младшего слова значения счетчика для входа №3 контроллера из EEPROM в Hreg регистр *************/
void rd_vlcnt3(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
     776:	f9 9b       	sbis	0x1f, 1	; 31
     778:	02 c0       	rjmp	.+4      	; 0x77e <rd_vlcnt3+0x8>
     77a:	f9 99       	sbic	0x1f, 1	; 31
     77c:	fe cf       	rjmp	.-4      	; 0x77a <rd_vlcnt3+0x4>
	WDR();
     77e:	a8 95       	wdr
	MB_Hreg[15] = eeprom_read_word(&MEM.LW_cnt3);			// Считаю мл слово опорного числа счетчика из EEPROM в ОЗУ
     780:	84 e2       	ldi	r24, 0x24	; 36
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__eerd_word_m168pa>
     788:	90 93 42 03 	sts	0x0342, r25
     78c:	80 93 41 03 	sts	0x0341, r24
     790:	08 95       	ret

00000792 <rd_vhcnt3>:
}
/****** Чтение старшего слова значения счетчика для входа №3 контроллера из EEPROM в Hreg регистр *************/
void rd_vhcnt3(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
     792:	f9 9b       	sbis	0x1f, 1	; 31
     794:	02 c0       	rjmp	.+4      	; 0x79a <rd_vhcnt3+0x8>
     796:	f9 99       	sbic	0x1f, 1	; 31
     798:	fe cf       	rjmp	.-4      	; 0x796 <rd_vhcnt3+0x4>
	WDR();
     79a:	a8 95       	wdr
	MB_Hreg[14] = eeprom_read_word(&MEM.HW_cnt3);			// Считаю ст слово опорного числа счетчика из EEPROM в ОЗУ
     79c:	82 e2       	ldi	r24, 0x22	; 34
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__eerd_word_m168pa>
     7a4:	90 93 40 03 	sts	0x0340, r25
     7a8:	80 93 3f 03 	sts	0x033F, r24
     7ac:	08 95       	ret

000007ae <wr_adr>:
//------------------------------------------------------------------------------------------------------------------------- ЗАПИСЬ ---
/******************* Запись адреса контроллера в сети ModBus из Hreg в EEPROM ***********************************/
void wr_adr(void)
{
unsigned char b;
	b = (unsigned char) MB_Hreg[29];				// беру младший байт
     7ae:	60 91 5d 03 	lds	r22, 0x035D
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
     7b2:	f9 9b       	sbis	0x1f, 1	; 31
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <wr_adr+0xc>
     7b6:	f9 99       	sbic	0x1f, 1	; 31
     7b8:	fe cf       	rjmp	.-4      	; 0x7b6 <wr_adr+0x8>
	WDR();
     7ba:	a8 95       	wdr
	eeprom_write_byte(&MEM.Address_device,b);		// Записать значение в память EEPROM
     7bc:	83 e1       	ldi	r24, 0x13	; 19
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__eewr_byte_m168pa>
     7c4:	08 95       	ret

000007c6 <wr_par>:
}
/******************* Запись параметров сети контроллера в ModBus из Hreg в EEPROM ******************************/
void wr_par(void)
{
	unsigned char b;
	b = (unsigned char) MB_Hreg[30];				// беру младший байт
     7c6:	60 91 5f 03 	lds	r22, 0x035F
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
     7ca:	f9 9b       	sbis	0x1f, 1	; 31
     7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <wr_par+0xc>
     7ce:	f9 99       	sbic	0x1f, 1	; 31
     7d0:	fe cf       	rjmp	.-4      	; 0x7ce <wr_par+0x8>
	WDR();
     7d2:	a8 95       	wdr
	eeprom_write_byte(&MEM.COM_Speed,b);			// Записать значение скорости в память EEPROM
     7d4:	84 e1       	ldi	r24, 0x14	; 20
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__eewr_byte_m168pa>
	WDR();
     7dc:	a8 95       	wdr
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
     7de:	f9 9b       	sbis	0x1f, 1	; 31
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <wr_par+0x20>
     7e2:	f9 99       	sbic	0x1f, 1	; 31
     7e4:	fe cf       	rjmp	.-4      	; 0x7e2 <wr_par+0x1c>
	WDR();
     7e6:	a8 95       	wdr
	b = (unsigned char) (MB_Hreg[30] >> 8);			// беру старший байт
     7e8:	60 91 60 03 	lds	r22, 0x0360
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
     7ec:	f9 9b       	sbis	0x1f, 1	; 31
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <wr_par+0x2e>
     7f0:	f9 99       	sbic	0x1f, 1	; 31
     7f2:	fe cf       	rjmp	.-4      	; 0x7f0 <wr_par+0x2a>
	WDR();
     7f4:	a8 95       	wdr
	eeprom_write_byte(&MEM.COM_Param,b);			// Записать значение параметров в память EEPROM
     7f6:	85 e1       	ldi	r24, 0x15	; 21
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__eewr_byte_m168pa>
     7fe:	08 95       	ret

00000800 <wr_mcnt>:
//=========================================== РАБОТА С СЧЕТНЫМИ ВХОДАМИ - ЗАПИСЬ ================================================
//===============================================================================================================================
/******************* Запись режима работы входов контроллера из Hreg в EEPROM ******************************/
void wr_mcnt(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();					// Ждать готовности eeprom
     800:	f9 9b       	sbis	0x1f, 1	; 31
     802:	02 c0       	rjmp	.+4      	; 0x808 <wr_mcnt+0x8>
     804:	f9 99       	sbic	0x1f, 1	; 31
     806:	fe cf       	rjmp	.-4      	; 0x804 <wr_mcnt+0x4>
	WDR();
     808:	a8 95       	wdr
	eeprom_write_byte(&MEM.INP_Mode,(unsigned char) MB_Hreg[6]);	// Записать значение в память EEPROM
     80a:	60 91 2f 03 	lds	r22, 0x032F
     80e:	86 e1       	ldi	r24, 0x16	; 22
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__eewr_byte_m168pa>
     816:	08 95       	ret

00000818 <wr_vcnt1>:
}

/********** Запись числа пересчета для счетного входа №1 контроллера из Hreg в EEPROM *********************/
void wr_vcnt1(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();					// Ждать готовности eeprom
     818:	f9 9b       	sbis	0x1f, 1	; 31
     81a:	02 c0       	rjmp	.+4      	; 0x820 <wr_vcnt1+0x8>
     81c:	f9 99       	sbic	0x1f, 1	; 31
     81e:	fe cf       	rjmp	.-4      	; 0x81c <wr_vcnt1+0x4>
	WDR();
     820:	a8 95       	wdr
	eeprom_write_byte(&MEM.CB_cnt1,(unsigned char) MB_Hreg[7]);	// Записать значение в память EEPROM
     822:	60 91 31 03 	lds	r22, 0x0331
     826:	87 e1       	ldi	r24, 0x17	; 23
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__eewr_byte_m168pa>
     82e:	08 95       	ret

00000830 <wr_vlcnt1>:
}
/*** Запись значения младшего опорного числа для счетчика №1 контроллера из Hreg в EEPROM ******************/
void wr_vlcnt1(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
     830:	f9 9b       	sbis	0x1f, 1	; 31
     832:	02 c0       	rjmp	.+4      	; 0x838 <wr_vlcnt1+0x8>
     834:	f9 99       	sbic	0x1f, 1	; 31
     836:	fe cf       	rjmp	.-4      	; 0x834 <wr_vlcnt1+0x4>
	WDR();
     838:	a8 95       	wdr
	eeprom_write_word(&MEM.LW_cnt1,MB_Hreg[11]);	// Записать значение в память EEPROM
     83a:	60 91 39 03 	lds	r22, 0x0339
     83e:	70 91 3a 03 	lds	r23, 0x033A
     842:	8c e1       	ldi	r24, 0x1C	; 28
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__eewr_word_m168pa>
     84a:	08 95       	ret

0000084c <wr_vhcnt1>:
}
/*** Запись значения младшего опорного числа для счетчика №1 контроллера из Hreg в EEPROM ******************/
void wr_vhcnt1(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
     84c:	f9 9b       	sbis	0x1f, 1	; 31
     84e:	02 c0       	rjmp	.+4      	; 0x854 <wr_vhcnt1+0x8>
     850:	f9 99       	sbic	0x1f, 1	; 31
     852:	fe cf       	rjmp	.-4      	; 0x850 <wr_vhcnt1+0x4>
	WDR();
     854:	a8 95       	wdr
	eeprom_write_word(&MEM.HW_cnt1,MB_Hreg[10]);	// Записать значение в память EEPROM
     856:	60 91 37 03 	lds	r22, 0x0337
     85a:	70 91 38 03 	lds	r23, 0x0338
     85e:	8a e1       	ldi	r24, 0x1A	; 26
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__eewr_word_m168pa>
     866:	08 95       	ret

00000868 <wr_vcnt2>:
}

/********** Запись числа пересчета для счетного входа №2 контроллера из Hreg в EEPROM *********************/
void wr_vcnt2(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();					// Ждать готовности eeprom
     868:	f9 9b       	sbis	0x1f, 1	; 31
     86a:	02 c0       	rjmp	.+4      	; 0x870 <wr_vcnt2+0x8>
     86c:	f9 99       	sbic	0x1f, 1	; 31
     86e:	fe cf       	rjmp	.-4      	; 0x86c <wr_vcnt2+0x4>
	WDR();
     870:	a8 95       	wdr
	eeprom_write_byte(&MEM.CB_cnt2,(unsigned char) MB_Hreg[8]);	// Записать значение в память EEPROM
     872:	60 91 33 03 	lds	r22, 0x0333
     876:	88 e1       	ldi	r24, 0x18	; 24
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__eewr_byte_m168pa>
     87e:	08 95       	ret

00000880 <wr_vlcnt2>:
}
/*** Запись значения младшего опорного числа для счетчика №2 контроллера из Hreg в EEPROM ******************/
void wr_vlcnt2(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
     880:	f9 9b       	sbis	0x1f, 1	; 31
     882:	02 c0       	rjmp	.+4      	; 0x888 <wr_vlcnt2+0x8>
     884:	f9 99       	sbic	0x1f, 1	; 31
     886:	fe cf       	rjmp	.-4      	; 0x884 <wr_vlcnt2+0x4>
	WDR();
     888:	a8 95       	wdr
	eeprom_write_word(&MEM.LW_cnt2,MB_Hreg[13]);	// Записать значение в память EEPROM
     88a:	60 91 3d 03 	lds	r22, 0x033D
     88e:	70 91 3e 03 	lds	r23, 0x033E
     892:	80 e2       	ldi	r24, 0x20	; 32
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__eewr_word_m168pa>
     89a:	08 95       	ret

0000089c <wr_vhcnt2>:
}
/*** Запись значения младшего опорного числа для счетчика №2 контроллера из Hreg в EEPROM ******************/
void wr_vhcnt2(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
     89c:	f9 9b       	sbis	0x1f, 1	; 31
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <wr_vhcnt2+0x8>
     8a0:	f9 99       	sbic	0x1f, 1	; 31
     8a2:	fe cf       	rjmp	.-4      	; 0x8a0 <wr_vhcnt2+0x4>
	WDR();
     8a4:	a8 95       	wdr
	eeprom_write_word(&MEM.HW_cnt2,MB_Hreg[12]);	// Записать значение в память EEPROM
     8a6:	60 91 3b 03 	lds	r22, 0x033B
     8aa:	70 91 3c 03 	lds	r23, 0x033C
     8ae:	8e e1       	ldi	r24, 0x1E	; 30
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__eewr_word_m168pa>
     8b6:	08 95       	ret

000008b8 <wr_vcnt3>:
}
/********** Запись числа пересчета для счетного входа №3 контроллера из Hreg в EEPROM *********************/
void wr_vcnt3(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();					// Ждать готовности eeprom
     8b8:	f9 9b       	sbis	0x1f, 1	; 31
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <wr_vcnt3+0x8>
     8bc:	f9 99       	sbic	0x1f, 1	; 31
     8be:	fe cf       	rjmp	.-4      	; 0x8bc <wr_vcnt3+0x4>
	WDR();
     8c0:	a8 95       	wdr
	eeprom_write_byte(&MEM.CB_cnt3,(unsigned char) MB_Hreg[9]);	// Записать значение в память EEPROM
     8c2:	60 91 35 03 	lds	r22, 0x0335
     8c6:	89 e1       	ldi	r24, 0x19	; 25
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__eewr_byte_m168pa>
     8ce:	08 95       	ret

000008d0 <wr_vlcnt3>:
}
/*** Запись значения младшего опорного числа для счетчика №3 контроллера из Hreg в EEPROM ******************/
void wr_vlcnt3(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
     8d0:	f9 9b       	sbis	0x1f, 1	; 31
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <wr_vlcnt3+0x8>
     8d4:	f9 99       	sbic	0x1f, 1	; 31
     8d6:	fe cf       	rjmp	.-4      	; 0x8d4 <wr_vlcnt3+0x4>
	WDR();
     8d8:	a8 95       	wdr
	eeprom_write_word(&MEM.LW_cnt3,MB_Hreg[15]);	// Записать значение в память EEPROM
     8da:	60 91 41 03 	lds	r22, 0x0341
     8de:	70 91 42 03 	lds	r23, 0x0342
     8e2:	84 e2       	ldi	r24, 0x24	; 36
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__eewr_word_m168pa>
     8ea:	08 95       	ret

000008ec <wr_vhcnt3>:
}
/*** Запись значения младшего опорного числа для счетчика №3 контроллера из Hreg в EEPROM ******************/
void wr_vhcnt3(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
     8ec:	f9 9b       	sbis	0x1f, 1	; 31
     8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <wr_vhcnt3+0x8>
     8f0:	f9 99       	sbic	0x1f, 1	; 31
     8f2:	fe cf       	rjmp	.-4      	; 0x8f0 <wr_vhcnt3+0x4>
	WDR();
     8f4:	a8 95       	wdr
	eeprom_write_word(&MEM.HW_cnt3,MB_Hreg[14]);	// Записать значение в память EEPROM
     8f6:	60 91 3f 03 	lds	r22, 0x033F
     8fa:	70 91 40 03 	lds	r23, 0x0340
     8fe:	82 e2       	ldi	r24, 0x22	; 34
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__eewr_word_m168pa>
     906:	08 95       	ret

00000908 <InitMem>:

/*************************************** Инициализация регистров из памяти ********************************/
void InitMem(void)
{
	// Заполняю структуру регистров INPUT
	rd_name();		// Имя контроллера
     908:	0e 94 df 02 	call	0x5be	; 0x5be <rd_name>
	rd_ver();		// Версия ПО контроллера
     90c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <rd_ver>
	rd_ser();		// Серийный номер контроллера
     910:	0e 94 05 03 	call	0x60a	; 0x60a <rd_ser>
	// Заполняю структуру регистров HOLD
	rd_adr();		// Адрес контроллера в сети ModBus
     914:	0e 94 18 03 	call	0x630	; 0x630 <rd_adr>
	rd_par();		// Параметры сети
     918:	0e 94 27 03 	call	0x64e	; 0x64e <rd_par>
	rd_mcnt();		// указатель режима работы цифровых входов
     91c:	0e 94 47 03 	call	0x68e	; 0x68e <rd_mcnt>
	rd_vcnt1();		// значение делителя для входа №1
     920:	0e 94 56 03 	call	0x6ac	; 0x6ac <rd_vcnt1>
	rd_vcnt2();		// значение делителя для входа №2
     924:	0e 94 81 03 	call	0x702	; 0x702 <rd_vcnt2>
	rd_vcnt3();		// значение делителя для входа №3
     928:	0e 94 ac 03 	call	0x758	; 0x758 <rd_vcnt3>
	rd_vhcnt1();	// старшее слово опорного значения счетного входа №1
     92c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <rd_vhcnt1>
	rd_vlcnt1();	// младшее слово опорного значения счетного входа №1
     930:	0e 94 65 03 	call	0x6ca	; 0x6ca <rd_vlcnt1>
	rd_vhcnt2();	// старшее слово опорного значения счетного входа №2
     934:	0e 94 9e 03 	call	0x73c	; 0x73c <rd_vhcnt2>
	rd_vlcnt2();	// младшее слово опорного значения счетного входа №2
     938:	0e 94 90 03 	call	0x720	; 0x720 <rd_vlcnt2>
	rd_vhcnt3();	// старшее слово опорного значения счетного входа №3
     93c:	0e 94 c9 03 	call	0x792	; 0x792 <rd_vhcnt3>
	rd_vlcnt3();	// младшее слово опорного значения счетного входа №3
     940:	0e 94 bb 03 	call	0x776	; 0x776 <rd_vlcnt3>
     944:	08 95       	ret

00000946 <__vector_14>:
//-------------------------------------
//======================== Прерывание по совпадению А таймера 0 ============================
// === пакет принят ===
//------------------------------------------------------------------------------------------
SIGNAL(TIMER0_COMPA_vect)
{
     946:	1f 92       	push	r1
     948:	0f 92       	push	r0
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	0f 92       	push	r0
     94e:	11 24       	eor	r1, r1
     950:	2f 93       	push	r18
     952:	3f 93       	push	r19
     954:	4f 93       	push	r20
     956:	8f 93       	push	r24
     958:	9f 93       	push	r25
     95a:	af 93       	push	r26
     95c:	bf 93       	push	r27
     95e:	ef 93       	push	r30
     960:	ff 93       	push	r31
	int temp;														//Вспомогательная переменная
	
	_Frame_pause=0;													//Обнуление флага превышения интервала 1.5 символа
     962:	10 92 0e 02 	sts	0x020E, r1
	for (temp=0; temp<_UART_RX_point; temp++) _UART_RX_dup[temp]=_UART_RX_Buf[temp];//Копирование приемного буфера
     966:	20 91 00 01 	lds	r18, 0x0100
     96a:	30 91 01 01 	lds	r19, 0x0101
     96e:	12 16       	cp	r1, r18
     970:	13 06       	cpc	r1, r19
     972:	64 f4       	brge	.+24     	; 0x98c <__vector_14+0x46>
     974:	a4 ea       	ldi	r26, 0xA4	; 164
     976:	b2 e0       	ldi	r27, 0x02	; 2
     978:	e5 e0       	ldi	r30, 0x05	; 5
     97a:	f1 e0       	ldi	r31, 0x01	; 1
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	4d 91       	ld	r20, X+
     982:	41 93       	st	Z+, r20
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	82 17       	cp	r24, r18
     988:	93 07       	cpc	r25, r19
     98a:	d4 f3       	brlt	.-12     	; 0x980 <__vector_14+0x3a>
	_UART_RX_length=_UART_RX_point;								    //Вычисление длины принятой посылки
     98c:	20 93 86 01 	sts	0x0186, r18
	_UART_RX_point=0;										        //Указатель приемного буфера на начало
     990:	10 92 01 01 	sts	0x0101, r1
     994:	10 92 00 01 	sts	0x0100, r1
	TCCR0A=0x00;													//Остановка таймера
     998:	14 bc       	out	0x24, r1	; 36
	TCCR0B=0x00;													//Остановка таймера
     99a:	15 bc       	out	0x25, r1	; 37
	_UART_RX_end=1;
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	80 93 07 02 	sts	0x0207, r24
//	LD_on;										// вкл светодиод
}
     9a2:	ff 91       	pop	r31
     9a4:	ef 91       	pop	r30
     9a6:	bf 91       	pop	r27
     9a8:	af 91       	pop	r26
     9aa:	9f 91       	pop	r25
     9ac:	8f 91       	pop	r24
     9ae:	4f 91       	pop	r20
     9b0:	3f 91       	pop	r19
     9b2:	2f 91       	pop	r18
     9b4:	0f 90       	pop	r0
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	0f 90       	pop	r0
     9ba:	1f 90       	pop	r1
     9bc:	18 95       	reti

000009be <__vector_15>:

//------------------------------------------------------------------------------------------
//======================== Прерывание по совпадению B таймера 0 ============================
//------------------------------------------------------------------------------------------
SIGNAL(TIMER0_COMPB_vect)
{
     9be:	1f 92       	push	r1
     9c0:	0f 92       	push	r0
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	0f 92       	push	r0
     9c6:	11 24       	eor	r1, r1
     9c8:	8f 93       	push	r24
	_Frame_pause=1;														//Установить флаг превышения интервала 1.5 символа
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	80 93 0e 02 	sts	0x020E, r24
}
     9d0:	8f 91       	pop	r24
     9d2:	0f 90       	pop	r0
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	0f 90       	pop	r0
     9d8:	1f 90       	pop	r1
     9da:	18 95       	reti

000009dc <_CRC_calc>:
//================================== Функция расчета контрольной суммы в протоколе Modbus RTU ====================================
//Функция принимает:
//*buf-указатель на массив в котором содержатся данные для расчета контрольной суммы
//Len-количество байт участвующих в расчете контрольной суммы
int _CRC_calc(char *buf, char Len)
{
     9dc:	38 2f       	mov	r19, r24
	unsigned int CRC;														//Переменная для расчета контрольной суммы
	char temp,temp2;														//Вспомогательные переменные
	
	CRC=0xFFFF;																//Начальное значение CRC (по алгоритму расчета CRC)
	for (temp=0; temp<Len; temp++)											//Цикл для всех байт участвующих в расчете
     9de:	66 23       	and	r22, r22
     9e0:	d1 f0       	breq	.+52     	; 0xa16 <_CRC_calc+0x3a>
     9e2:	e8 2f       	mov	r30, r24
     9e4:	f9 2f       	mov	r31, r25
int _CRC_calc(char *buf, char Len)
{
	unsigned int CRC;														//Переменная для расчета контрольной суммы
	char temp,temp2;														//Вспомогательные переменные
	
	CRC=0xFFFF;																//Начальное значение CRC (по алгоритму расчета CRC)
     9e6:	8f ef       	ldi	r24, 0xFF	; 255
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
	for (temp=0; temp<Len; temp++)											//Цикл для всех байт участвующих в расчете
	{
		CRC=CRC^*buf;														//"Исключающее или" (по алгоритму расчета CRC)
		buf++;																//Указатель на следующий байт
     9ea:	48 e0       	ldi	r20, 0x08	; 8
	char temp,temp2;														//Вспомогательные переменные
	
	CRC=0xFFFF;																//Начальное значение CRC (по алгоритму расчета CRC)
	for (temp=0; temp<Len; temp++)											//Цикл для всех байт участвующих в расчете
	{
		CRC=CRC^*buf;														//"Исключающее или" (по алгоритму расчета CRC)
     9ec:	21 91       	ld	r18, Z+
     9ee:	82 27       	eor	r24, r18
		buf++;																//Указатель на следующий байт
     9f0:	24 2f       	mov	r18, r20
		for (temp2=0; temp2<8; temp2++)										//Цикл для каждого бита в байте
		if ((CRC & 0x0001)==0) CRC=CRC>>1;									//Если младший бит в единице, просто сдвиг (по алгоритму расчета CRC)
     9f2:	80 fd       	sbrc	r24, 0
     9f4:	03 c0       	rjmp	.+6      	; 0x9fc <_CRC_calc+0x20>
     9f6:	96 95       	lsr	r25
     9f8:	87 95       	ror	r24
     9fa:	06 c0       	rjmp	.+12     	; 0xa08 <_CRC_calc+0x2c>
		else
		{
			CRC=CRC>>1;														//Сдвиг	и "Исключающее или" (по алгоритму расчета CRC)
     9fc:	96 95       	lsr	r25
     9fe:	87 95       	ror	r24
			CRC=CRC^0xA001;													//Полином для "Исключающего или" 1010 0000 0000 0001
     a00:	51 e0       	ldi	r21, 0x01	; 1
     a02:	85 27       	eor	r24, r21
     a04:	50 ea       	ldi	r21, 0xA0	; 160
     a06:	95 27       	eor	r25, r21
     a08:	21 50       	subi	r18, 0x01	; 1
	CRC=0xFFFF;																//Начальное значение CRC (по алгоритму расчета CRC)
	for (temp=0; temp<Len; temp++)											//Цикл для всех байт участвующих в расчете
	{
		CRC=CRC^*buf;														//"Исключающее или" (по алгоритму расчета CRC)
		buf++;																//Указатель на следующий байт
		for (temp2=0; temp2<8; temp2++)										//Цикл для каждого бита в байте
     a0a:	99 f7       	brne	.-26     	; 0x9f2 <_CRC_calc+0x16>
     a0c:	2e 2f       	mov	r18, r30
     a0e:	23 1b       	sub	r18, r19
{
	unsigned int CRC;														//Переменная для расчета контрольной суммы
	char temp,temp2;														//Вспомогательные переменные
	
	CRC=0xFFFF;																//Начальное значение CRC (по алгоритму расчета CRC)
	for (temp=0; temp<Len; temp++)											//Цикл для всех байт участвующих в расчете
     a10:	26 17       	cp	r18, r22
     a12:	60 f3       	brcs	.-40     	; 0x9ec <_CRC_calc+0x10>
     a14:	08 95       	ret
int _CRC_calc(char *buf, char Len)
{
	unsigned int CRC;														//Переменная для расчета контрольной суммы
	char temp,temp2;														//Вспомогательные переменные
	
	CRC=0xFFFF;																//Начальное значение CRC (по алгоритму расчета CRC)
     a16:	8f ef       	ldi	r24, 0xFF	; 255
     a18:	9f ef       	ldi	r25, 0xFF	; 255
			CRC=CRC^0xA001;													//Полином для "Исключающего или" 1010 0000 0000 0001
		}
	}
	
	return CRC;																//Возврат расчитанной контрольной суммы
}
     a1a:	08 95       	ret

00000a1c <__vector_18>:
Description:  Ф-я вызывается по прерыванию - если принят байт в буфер UDR(прием завершен)
Output:       Data in NetRxData[]
new:		Принимаю весь пакет и ввожу дополнительную функцию проверки принятого пакета по ModBus
*****************************************************************************************************************************************/
ISR(USART_RX_vect)
{
     a1c:	1f 92       	push	r1
     a1e:	0f 92       	push	r0
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	0f 92       	push	r0
     a24:	11 24       	eor	r1, r1
     a26:	8f 93       	push	r24
     a28:	9f 93       	push	r25
     a2a:	ef 93       	push	r30
     a2c:	ff 93       	push	r31
	unsigned char InByte; // Рабочий буфер - для принятого байта

	if (NET_UCSRA & ((1<<FE0)+(1<<DOR0))) {InByte = NET_UDR; return;} // При ошибке кадрирования и переполнении буфера
     a2e:	80 91 c0 00 	lds	r24, 0x00C0
     a32:	88 71       	andi	r24, 0x18	; 24
     a34:	19 f0       	breq	.+6      	; 0xa3c <__vector_18+0x20>
     a36:	80 91 c6 00 	lds	r24, 0x00C6
     a3a:	26 c0       	rjmp	.+76     	; 0xa88 <__vector_18+0x6c>
	InByte = NET_UDR;												//Чтение регистра приемника
     a3c:	90 91 c6 00 	lds	r25, 0x00C6
	if (_Frame_pause==0)                                            //Если было превышение интервала 1.5 символа
     a40:	80 91 0e 02 	lds	r24, 0x020E
     a44:	81 11       	cpse	r24, r1
     a46:	20 c0       	rjmp	.+64     	; 0xa88 <__vector_18+0x6c>
	{
		_UART_RX_Buf[_UART_RX_point]=InByte;						//Записываю принятое в буфер
     a48:	e0 91 00 01 	lds	r30, 0x0100
     a4c:	f0 91 01 01 	lds	r31, 0x0101
     a50:	ec 55       	subi	r30, 0x5C	; 92
     a52:	fd 4f       	sbci	r31, 0xFD	; 253
     a54:	90 83       	st	Z, r25
		TIFR0|=(1<<OCF0A)|(1<<OCF0B);                               //Обнуление флага прерывания по таймеру (необходимо если прерывание возникло в момент выполнения данного обработчика)
     a56:	85 b3       	in	r24, 0x15	; 21
     a58:	86 60       	ori	r24, 0x06	; 6
     a5a:	85 bb       	out	0x15, r24	; 21
		TCNT0=0;                                                    //Обнуление счетного регистра таймера
     a5c:	16 bc       	out	0x26, r1	; 38
		TCCR0A=(1<<WGM01);											// Установка режима работы таймера "Сброс при совпадении"
     a5e:	82 e0       	ldi	r24, 0x02	; 2
     a60:	84 bd       	out	0x24, r24	; 36
		TCCR0B=(1<<CS02);											//Установка коэффициента деления тактовой частоты 256
     a62:	84 e0       	ldi	r24, 0x04	; 4
     a64:	85 bd       	out	0x25, r24	; 37
		_UART_RX_point++;                                           //Увеличение счетчика принятых байт
     a66:	80 91 00 01 	lds	r24, 0x0100
     a6a:	90 91 01 01 	lds	r25, 0x0101
     a6e:	01 96       	adiw	r24, 0x01	; 1
		if (_UART_RX_point>=(COM_RX_BUFFER_SIZE-1)) _UART_RX_point=0; //Защита от длинной бессмысленной команды
     a70:	8e 37       	cpi	r24, 0x7E	; 126
     a72:	91 05       	cpc	r25, r1
     a74:	2c f4       	brge	.+10     	; 0xa80 <__vector_18+0x64>
		_UART_RX_Buf[_UART_RX_point]=InByte;						//Записываю принятое в буфер
		TIFR0|=(1<<OCF0A)|(1<<OCF0B);                               //Обнуление флага прерывания по таймеру (необходимо если прерывание возникло в момент выполнения данного обработчика)
		TCNT0=0;                                                    //Обнуление счетного регистра таймера
		TCCR0A=(1<<WGM01);											// Установка режима работы таймера "Сброс при совпадении"
		TCCR0B=(1<<CS02);											//Установка коэффициента деления тактовой частоты 256
		_UART_RX_point++;                                           //Увеличение счетчика принятых байт
     a76:	90 93 01 01 	sts	0x0101, r25
     a7a:	80 93 00 01 	sts	0x0100, r24
     a7e:	04 c0       	rjmp	.+8      	; 0xa88 <__vector_18+0x6c>
		if (_UART_RX_point>=(COM_RX_BUFFER_SIZE-1)) _UART_RX_point=0; //Защита от длинной бессмысленной команды
     a80:	10 92 01 01 	sts	0x0101, r1
     a84:	10 92 00 01 	sts	0x0100, r1
	}
	// Управление светодиодом
//	if((_UART_RX_point == 1) && (InByte == (Address_device & 0xFF))) LD_off;	// выкл светодиод если первый байт = адресу
}
     a88:	ff 91       	pop	r31
     a8a:	ef 91       	pop	r30
     a8c:	9f 91       	pop	r25
     a8e:	8f 91       	pop	r24
     a90:	0f 90       	pop	r0
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	0f 90       	pop	r0
     a96:	1f 90       	pop	r1
     a98:	18 95       	reti

00000a9a <COM_Init>:
//COM_param - Табличное значение параметров COM порта
//Функция возвращает:
//0x00-если все параметры заданы корректно, в противном случае 0xFF
//========================================================================================================================================
char COM_Init(char COM_speed,char COM_param)
{
     a9a:	8f 92       	push	r8
     a9c:	9f 92       	push	r9
     a9e:	af 92       	push	r10
     aa0:	bf 92       	push	r11
     aa2:	cf 92       	push	r12
     aa4:	df 92       	push	r13
     aa6:	ef 92       	push	r14
     aa8:	ff 92       	push	r15
     aaa:	cf 93       	push	r28
     aac:	c6 2f       	mov	r28, r22
	unsigned char m;
	float temp;
	long Speed;
	switch (COM_speed)
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	fc 01       	movw	r30, r24
     ab2:	33 97       	sbiw	r30, 0x03	; 3
     ab4:	e8 30       	cpi	r30, 0x08	; 8
     ab6:	f1 05       	cpc	r31, r1
     ab8:	70 f5       	brcc	.+92     	; 0xb16 <COM_Init+0x7c>
     aba:	ec 5c       	subi	r30, 0xCC	; 204
     abc:	ff 4f       	sbci	r31, 0xFF	; 255
     abe:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__tablejump2__>
		{
			case 0x03: Speed=1200; break;
			case 0x04: Speed=2400; break;
			case 0x05: Speed=4800; break;
			case 0x06: Speed=9600; break;
     ac2:	0f 2e       	mov	r0, r31
     ac4:	f0 e8       	ldi	r31, 0x80	; 128
     ac6:	cf 2e       	mov	r12, r31
     ac8:	f5 e2       	ldi	r31, 0x25	; 37
     aca:	df 2e       	mov	r13, r31
     acc:	e1 2c       	mov	r14, r1
     ace:	f1 2c       	mov	r15, r1
     ad0:	f0 2d       	mov	r31, r0
     ad2:	32 c0       	rjmp	.+100    	; 0xb38 <COM_Init+0x9e>
			case 0x07: Speed=19200; break;
     ad4:	0f 2e       	mov	r0, r31
     ad6:	c1 2c       	mov	r12, r1
     ad8:	fb e4       	ldi	r31, 0x4B	; 75
     ada:	df 2e       	mov	r13, r31
     adc:	e1 2c       	mov	r14, r1
     ade:	f1 2c       	mov	r15, r1
     ae0:	f0 2d       	mov	r31, r0
     ae2:	2a c0       	rjmp	.+84     	; 0xb38 <COM_Init+0x9e>
			case 0x08: Speed=38400; break;
     ae4:	0f 2e       	mov	r0, r31
     ae6:	c1 2c       	mov	r12, r1
     ae8:	f6 e9       	ldi	r31, 0x96	; 150
     aea:	df 2e       	mov	r13, r31
     aec:	e1 2c       	mov	r14, r1
     aee:	f1 2c       	mov	r15, r1
     af0:	f0 2d       	mov	r31, r0
     af2:	22 c0       	rjmp	.+68     	; 0xb38 <COM_Init+0x9e>
			case 0x09: Speed=57600; break;
     af4:	0f 2e       	mov	r0, r31
     af6:	c1 2c       	mov	r12, r1
     af8:	f1 ee       	ldi	r31, 0xE1	; 225
     afa:	df 2e       	mov	r13, r31
     afc:	e1 2c       	mov	r14, r1
     afe:	f1 2c       	mov	r15, r1
     b00:	f0 2d       	mov	r31, r0
     b02:	1a c0       	rjmp	.+52     	; 0xb38 <COM_Init+0x9e>
			case 0x0A: Speed=115200; break;
     b04:	0f 2e       	mov	r0, r31
     b06:	c1 2c       	mov	r12, r1
     b08:	f2 ec       	ldi	r31, 0xC2	; 194
     b0a:	df 2e       	mov	r13, r31
     b0c:	ee 24       	eor	r14, r14
     b0e:	e3 94       	inc	r14
     b10:	f1 2c       	mov	r15, r1
     b12:	f0 2d       	mov	r31, r0
     b14:	11 c0       	rjmp	.+34     	; 0xb38 <COM_Init+0x9e>
			default: {Speed=9600;}
     b16:	0f 2e       	mov	r0, r31
     b18:	f0 e8       	ldi	r31, 0x80	; 128
     b1a:	cf 2e       	mov	r12, r31
     b1c:	f5 e2       	ldi	r31, 0x25	; 37
     b1e:	df 2e       	mov	r13, r31
     b20:	e1 2c       	mov	r14, r1
     b22:	f1 2c       	mov	r15, r1
     b24:	f0 2d       	mov	r31, r0
     b26:	08 c0       	rjmp	.+16     	; 0xb38 <COM_Init+0x9e>
	unsigned char m;
	float temp;
	long Speed;
	switch (COM_speed)
		{
			case 0x03: Speed=1200; break;
     b28:	0f 2e       	mov	r0, r31
     b2a:	f0 eb       	ldi	r31, 0xB0	; 176
     b2c:	cf 2e       	mov	r12, r31
     b2e:	f4 e0       	ldi	r31, 0x04	; 4
     b30:	df 2e       	mov	r13, r31
     b32:	e1 2c       	mov	r14, r1
     b34:	f1 2c       	mov	r15, r1
     b36:	f0 2d       	mov	r31, r0
			default: {Speed=9600;}
		}
	
	if ((Speed<=0) || (Speed>1000000)) return 0xFF;					//Если не верно задана скорость
	
	temp=(float)F_CPU/Speed/16-0.5;									//Расчет значения регистра скорости UART
     b38:	c7 01       	movw	r24, r14
     b3a:	b6 01       	movw	r22, r12
     b3c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__floatsisf>
     b40:	9b 01       	movw	r18, r22
     b42:	ac 01       	movw	r20, r24
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	81 e6       	ldi	r24, 0x61	; 97
     b4a:	9b e4       	ldi	r25, 0x4B	; 75
     b4c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__divsf3>
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e8       	ldi	r20, 0x80	; 128
     b56:	5d e3       	ldi	r21, 0x3D	; 61
     b58:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__mulsf3>
     b5c:	20 e0       	ldi	r18, 0x00	; 0
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	5f e3       	ldi	r21, 0x3F	; 63
     b64:	0e 94 90 0b 	call	0x1720	; 0x1720 <__subsf3>
     b68:	4b 01       	movw	r8, r22
     b6a:	5c 01       	movw	r10, r24
	if (temp>=0.5)													//Если скорость допустимая для данного кварца
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	5f e3       	ldi	r21, 0x3F	; 63
     b74:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__gesf2>
     b78:	88 23       	and	r24, r24
     b7a:	0c f4       	brge	.+2      	; 0xb7e <COM_Init+0xe4>
     b7c:	99 c0       	rjmp	.+306    	; 0xcb0 <COM_Init+0x216>
	{
			NET_UBRRH =(unsigned long)temp>>8;
     b7e:	c5 01       	movw	r24, r10
     b80:	b4 01       	movw	r22, r8
     b82:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__fixunssfsi>
     b86:	87 2e       	mov	r8, r23
     b88:	98 2e       	mov	r9, r24
     b8a:	a9 2e       	mov	r10, r25
     b8c:	bb 24       	eor	r11, r11
     b8e:	80 92 c5 00 	sts	0x00C5, r8
			NET_UBRRL =(unsigned long)temp & 0x000000FF;
     b92:	60 93 c4 00 	sts	0x00C4, r22
	}
	else return 0xFF;												//иначе, выход с ошибкой

	switch (COM_param)
     b96:	c2 30       	cpi	r28, 0x02	; 2
     b98:	41 f0       	breq	.+16     	; 0xbaa <COM_Init+0x110>
     b9a:	c3 30       	cpi	r28, 0x03	; 3
     b9c:	51 f0       	breq	.+20     	; 0xbb2 <COM_Init+0x118>
     b9e:	c1 30       	cpi	r28, 0x01	; 1
     ba0:	61 f4       	brne	.+24     	; 0xbba <COM_Init+0x120>
		{
			case 0x01: NET_UCSRC = (1<<UMSEL01)+(1<<UPM01)+(1<<USBS0)+(1<<UCSZ01)+(1<<UCSZ00); break;	// 8 bit, 2 стоп бита, event(8E2)
     ba2:	8e ea       	ldi	r24, 0xAE	; 174
     ba4:	80 93 c2 00 	sts	0x00C2, r24
     ba8:	0b c0       	rjmp	.+22     	; 0xbc0 <COM_Init+0x126>
			case 0x02: NET_UCSRC = (1<<UMSEL01)+(1<<UCSZ01)+(1<<UCSZ00); break;							// 8 bit, 1 стоп бита, none (8N1)
     baa:	86 e8       	ldi	r24, 0x86	; 134
     bac:	80 93 c2 00 	sts	0x00C2, r24
     bb0:	07 c0       	rjmp	.+14     	; 0xbc0 <COM_Init+0x126>
			case 0x03: NET_UCSRC = (1<<UMSEL01)+(1<<USBS0)+(1<<UCSZ01)+(1<<UCSZ00); break;				// 8 bit, 2 стоп бита, none (8N2)
     bb2:	8e e8       	ldi	r24, 0x8E	; 142
     bb4:	80 93 c2 00 	sts	0x00C2, r24
     bb8:	03 c0       	rjmp	.+6      	; 0xbc0 <COM_Init+0x126>
			default:   NET_UCSRC = (1<<UMSEL01)+(1<<UPM01)+(1<<UCSZ01)+(1<<UCSZ00);						// 8 bit, 1 стоп бита, event(8E1)
     bba:	86 ea       	ldi	r24, 0xA6	; 166
     bbc:	80 93 c2 00 	sts	0x00C2, r24
		}
	NET_UCSRB=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0)|(1<<TXCIE0);	//Настройка приемо-передатчика(разрешить RX, TX и прерывания)
     bc0:	88 ed       	ldi	r24, 0xD8	; 216
     bc2:	80 93 c1 00 	sts	0x00C1, r24
		
	m = NET_UDR; // Считать и очичтить от барахла!!! Иначе подвисает))))
     bc6:	e6 ec       	ldi	r30, 0xC6	; 198
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
	m = NET_UDR; // Считать и очичтить от барахла!!! Иначе подвисает))))
     bcc:	80 81       	ld	r24, Z
	m = NET_UDR; // Считать и очичтить от барахла!!! Иначе подвисает))))
     bce:	80 81       	ld	r24, Z
	m = NET_UDR; // Считать и очичтить от барахла!!! Иначе подвисает))))
     bd0:	80 81       	ld	r24, Z
	
	// --- Настройка выводов контроллера для работы с RS485 ---
	NET_PORT&=~(1<<NET_TX);									// на TX - выходе - 0
     bd2:	59 98       	cbi	0x0b, 1	; 11
	NET_DDR|=(1<<NET_TX);									// вывод TX - выход
     bd4:	51 9a       	sbi	0x0a, 1	; 10
	NET_PORT|=(1<<NET_RX);									// RX - подтянут к +
     bd6:	58 9a       	sbi	0x0b, 0	; 11
	NET_DDR&=~(1<<NET_RX);									// Вывод RX - вход
     bd8:	50 98       	cbi	0x0a, 0	; 10
	NET_PORT&=~(1<<NET_TXE);								// Переключить UART0 на прием, на RXE - 0
     bda:	5a 98       	cbi	0x0b, 2	; 11
	NET_DDR|=(1<<NET_TXE);									// Настройка линии управления драйвером RS485, вывод RXE - выход
     bdc:	52 9a       	sbi	0x0a, 2	; 10
     bde:	e4 ea       	ldi	r30, 0xA4	; 164
     be0:	f2 e0       	ldi	r31, 0x02	; 2
     be2:	83 e2       	ldi	r24, 0x23	; 35
     be4:	93 e0       	ldi	r25, 0x03	; 3
		
	// Очистить рабочие буфера
	for(m=0;m<COM_RX_BUFFER_SIZE;m++) {_UART_RX_Buf[m] = 0;}
     be6:	11 92       	st	Z+, r1
     be8:	e8 17       	cp	r30, r24
     bea:	f9 07       	cpc	r31, r25
     bec:	e1 f7       	brne	.-8      	; 0xbe6 <COM_Init+0x14c>
     bee:	e5 e0       	ldi	r30, 0x05	; 5
     bf0:	f1 e0       	ldi	r31, 0x01	; 1
     bf2:	84 e8       	ldi	r24, 0x84	; 132
     bf4:	91 e0       	ldi	r25, 0x01	; 1
	for(m=0;m<COM_RX_BUFFER_SIZE;m++) {_UART_RX_dup[m] = 0;}
     bf6:	11 92       	st	Z+, r1
     bf8:	e8 17       	cp	r30, r24
     bfa:	f9 07       	cpc	r31, r25
     bfc:	e1 f7       	brne	.-8      	; 0xbf6 <COM_Init+0x15c>
     bfe:	ef e0       	ldi	r30, 0x0F	; 15
     c00:	f2 e0       	ldi	r31, 0x02	; 2
     c02:	8e e8       	ldi	r24, 0x8E	; 142
     c04:	92 e0       	ldi	r25, 0x02	; 2
	for(m=0;m<COM_TX_BUFFER_SIZE;m++) {_UART_TX_Buf[m] = 0;}
     c06:	11 92       	st	Z+, r1
     c08:	e8 17       	cp	r30, r24
     c0a:	f9 07       	cpc	r31, r25
     c0c:	e1 f7       	brne	.-8      	; 0xc06 <COM_Init+0x16c>
	
	_UART_RX_point=0;										//Указатель на начало буфера
     c0e:	10 92 01 01 	sts	0x0101, r1
     c12:	10 92 00 01 	sts	0x0100, r1
	_UART_RX_end=0;											//Сбросить признак окончания приема
     c16:	10 92 07 02 	sts	0x0207, r1
	_UART_TX_end=1;											//Установить флаг завершения предачи
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	80 93 08 02 	sts	0x0208, r24
		
	// Настраиваю работу таймера0
	if (Speed>=19200) Speed=19200;							//Если значение скорости 19200 бит/сек или больше, длительность тишины равна 1.75 мс.
     c20:	c1 14       	cp	r12, r1
     c22:	8b e4       	ldi	r24, 0x4B	; 75
     c24:	d8 06       	cpc	r13, r24
     c26:	e1 04       	cpc	r14, r1
     c28:	f1 04       	cpc	r15, r1
     c2a:	3c f0       	brlt	.+14     	; 0xc3a <COM_Init+0x1a0>
     c2c:	0f 2e       	mov	r0, r31
     c2e:	c1 2c       	mov	r12, r1
     c30:	fb e4       	ldi	r31, 0x4B	; 75
     c32:	df 2e       	mov	r13, r31
     c34:	e1 2c       	mov	r14, r1
     c36:	f1 2c       	mov	r15, r1
     c38:	f0 2d       	mov	r31, r0
	OCR0A=35*(float)F_CPU/Speed/256+0.5;					//Расчет длительности 3.5 символов
     c3a:	c7 01       	movw	r24, r14
     c3c:	b6 01       	movw	r22, r12
     c3e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__floatsisf>
     c42:	6b 01       	movw	r12, r22
     c44:	7c 01       	movw	r14, r24
     c46:	9b 01       	movw	r18, r22
     c48:	ac 01       	movw	r20, r24
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	78 e1       	ldi	r23, 0x18	; 24
     c4e:	86 ef       	ldi	r24, 0xF6	; 246
     c50:	9d e4       	ldi	r25, 0x4D	; 77
     c52:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__divsf3>
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	40 e8       	ldi	r20, 0x80	; 128
     c5c:	5b e3       	ldi	r21, 0x3B	; 59
     c5e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__mulsf3>
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	40 e0       	ldi	r20, 0x00	; 0
     c68:	5f e3       	ldi	r21, 0x3F	; 63
     c6a:	0e 94 91 0b 	call	0x1722	; 0x1722 <__addsf3>
     c6e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__fixunssfsi>
     c72:	67 bd       	out	0x27, r22	; 39
	OCR0B=15*(float)F_CPU/Speed/256+0.5;					//Расчет длительности 1.5 символов
     c74:	a7 01       	movw	r20, r14
     c76:	96 01       	movw	r18, r12
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	70 ef       	ldi	r23, 0xF0	; 240
     c7c:	82 e5       	ldi	r24, 0x52	; 82
     c7e:	9d e4       	ldi	r25, 0x4D	; 77
     c80:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__divsf3>
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	40 e8       	ldi	r20, 0x80	; 128
     c8a:	5b e3       	ldi	r21, 0x3B	; 59
     c8c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__mulsf3>
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	5f e3       	ldi	r21, 0x3F	; 63
     c98:	0e 94 91 0b 	call	0x1722	; 0x1722 <__addsf3>
     c9c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__fixunssfsi>
     ca0:	68 bd       	out	0x28, r22	; 40
	TIMSK0|=(1<<OCIE0A)|(1<<OCIE0B);						//Разрешение прерывание по совпадению А и B таймера 0
     ca2:	ee e6       	ldi	r30, 0x6E	; 110
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	86 60       	ori	r24, 0x06	; 6
     caa:	80 83       	st	Z, r24
	return 0;
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	14 c0       	rjmp	.+40     	; 0xcd8 <COM_Init+0x23e>
	if (temp>=0.5)													//Если скорость допустимая для данного кварца
	{
			NET_UBRRH =(unsigned long)temp>>8;
			NET_UBRRL =(unsigned long)temp & 0x000000FF;
	}
	else return 0xFF;												//иначе, выход с ошибкой
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
     cb2:	12 c0       	rjmp	.+36     	; 0xcd8 <COM_Init+0x23e>
	float temp;
	long Speed;
	switch (COM_speed)
		{
			case 0x03: Speed=1200; break;
			case 0x04: Speed=2400; break;
     cb4:	0f 2e       	mov	r0, r31
     cb6:	f0 e6       	ldi	r31, 0x60	; 96
     cb8:	cf 2e       	mov	r12, r31
     cba:	f9 e0       	ldi	r31, 0x09	; 9
     cbc:	df 2e       	mov	r13, r31
     cbe:	e1 2c       	mov	r14, r1
     cc0:	f1 2c       	mov	r15, r1
     cc2:	f0 2d       	mov	r31, r0
     cc4:	39 cf       	rjmp	.-398    	; 0xb38 <COM_Init+0x9e>
			case 0x05: Speed=4800; break;
     cc6:	0f 2e       	mov	r0, r31
     cc8:	f0 ec       	ldi	r31, 0xC0	; 192
     cca:	cf 2e       	mov	r12, r31
     ccc:	f2 e1       	ldi	r31, 0x12	; 18
     cce:	df 2e       	mov	r13, r31
     cd0:	e1 2c       	mov	r14, r1
     cd2:	f1 2c       	mov	r15, r1
     cd4:	f0 2d       	mov	r31, r0
     cd6:	30 cf       	rjmp	.-416    	; 0xb38 <COM_Init+0x9e>
	if (Speed>=19200) Speed=19200;							//Если значение скорости 19200 бит/сек или больше, длительность тишины равна 1.75 мс.
	OCR0A=35*(float)F_CPU/Speed/256+0.5;					//Расчет длительности 3.5 символов
	OCR0B=15*(float)F_CPU/Speed/256+0.5;					//Расчет длительности 1.5 символов
	TIMSK0|=(1<<OCIE0A)|(1<<OCIE0B);						//Разрешение прерывание по совпадению А и B таймера 0
	return 0;
}
     cd8:	cf 91       	pop	r28
     cda:	ff 90       	pop	r15
     cdc:	ef 90       	pop	r14
     cde:	df 90       	pop	r13
     ce0:	cf 90       	pop	r12
     ce2:	bf 90       	pop	r11
     ce4:	af 90       	pop	r10
     ce6:	9f 90       	pop	r9
     ce8:	8f 90       	pop	r8
     cea:	08 95       	ret

00000cec <_UART_Go>:
//Len - Длина передаваемых данных

void _UART_Go(int Len)
{
//	LD_on;													// Вкл светодиод
	_UART_TX_length=Len;									//Длина передаваемых данных
     cec:	80 93 a3 02 	sts	0x02A3, r24
	_UART_TX_point=0;										//Позиция в передающем буфере
     cf0:	10 92 03 01 	sts	0x0103, r1
     cf4:	10 92 02 01 	sts	0x0102, r1
	_UART_TX_end=0;											//Сброс флага окончания передачи (отправка новой посылки)
     cf8:	10 92 08 02 	sts	0x0208, r1
	NET_UCSRB |= (1<<UDRIE0); 								// Разрешить прерывание при очистке буфера
     cfc:	e1 ec       	ldi	r30, 0xC1	; 193
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	80 62       	ori	r24, 0x20	; 32
     d04:	80 83       	st	Z, r24
	NET_PORT |= (1 << NET_TXE);								// Активизировать передачу по RS485
     d06:	5a 9a       	sbi	0x0b, 2	; 11
     d08:	08 95       	ret

00000d0a <__vector_19>:
/********************************************************************************************************************************************
Name:         void NetTxByte(void)
Description:  Ф-я вызывается по прерыванию - буфер UDR пуст
*********************************************************************************************************************************************/
ISR(USART_UDRE_vect)
{
     d0a:	1f 92       	push	r1
     d0c:	0f 92       	push	r0
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	0f 92       	push	r0
     d12:	11 24       	eor	r1, r1
     d14:	2f 93       	push	r18
     d16:	3f 93       	push	r19
     d18:	8f 93       	push	r24
     d1a:	9f 93       	push	r25
     d1c:	ef 93       	push	r30
     d1e:	ff 93       	push	r31
  if (_UART_TX_point!=_UART_TX_length)			// если отправлена не вся посылка
     d20:	20 91 a3 02 	lds	r18, 0x02A3
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	80 91 02 01 	lds	r24, 0x0102
     d2a:	90 91 03 01 	lds	r25, 0x0103
     d2e:	28 17       	cp	r18, r24
     d30:	39 07       	cpc	r19, r25
     d32:	a9 f0       	breq	.+42     	; 0xd5e <__vector_19+0x54>
  {
    asm("wdr");
     d34:	a8 95       	wdr
    NET_PORT |= NET_TXE;						// Активизировать передачу
     d36:	59 9a       	sbi	0x0b, 1	; 11
    NET_UDR = _UART_TX_Buf[_UART_TX_point];		//Отправка байта по UART
     d38:	e0 91 02 01 	lds	r30, 0x0102
     d3c:	f0 91 03 01 	lds	r31, 0x0103
     d40:	e1 5f       	subi	r30, 0xF1	; 241
     d42:	fd 4f       	sbci	r31, 0xFD	; 253
     d44:	80 81       	ld	r24, Z
     d46:	80 93 c6 00 	sts	0x00C6, r24
    _UART_TX_point++;							// Увеличить указатель
     d4a:	80 91 02 01 	lds	r24, 0x0102
     d4e:	90 91 03 01 	lds	r25, 0x0103
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	90 93 03 01 	sts	0x0103, r25
     d58:	80 93 02 01 	sts	0x0102, r24
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__vector_19+0x5e>
  }
  else NET_UCSRB &= ~(1<<UDRIE0);  /* Запретить прерывания TX если вся посылка передана*/
     d5e:	e1 ec       	ldi	r30, 0xC1	; 193
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	8f 7d       	andi	r24, 0xDF	; 223
     d66:	80 83       	st	Z, r24
}
     d68:	ff 91       	pop	r31
     d6a:	ef 91       	pop	r30
     d6c:	9f 91       	pop	r25
     d6e:	8f 91       	pop	r24
     d70:	3f 91       	pop	r19
     d72:	2f 91       	pop	r18
     d74:	0f 90       	pop	r0
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	0f 90       	pop	r0
     d7a:	1f 90       	pop	r1
     d7c:	18 95       	reti

00000d7e <__vector_20>:
/********************************************************************************************************************************************
Description:  Ф-я вызывается по прерыванию - передача завершена
              TxBuffer были переданы в NET.
*********************************************************************************************************************************************/
ISR(USART_TX_vect)
{
     d7e:	1f 92       	push	r1
     d80:	0f 92       	push	r0
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	0f 92       	push	r0
     d86:	11 24       	eor	r1, r1
     d88:	8f 93       	push	r24
//  LD_off;							// Выкл светодиод
  NET_PORT &= ~(1 << NET_TXE);		// Переключить в режим приема RS485
     d8a:	5a 98       	cbi	0x0b, 2	; 11
  _UART_TX_end=1;					//Установить флаг завершения передачи
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	80 93 08 02 	sts	0x0208, r24
}
     d92:	8f 91       	pop	r24
     d94:	0f 90       	pop	r0
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	0f 90       	pop	r0
     d9a:	1f 90       	pop	r1
     d9c:	18 95       	reti

00000d9e <Read_Modbus>:
* Два байта контрольной суммы включены в данный массив.
* Нулевой элемент выходного массива содержит количество прочитаных байт, считая байты контрольной суммы.
****************************************************************************************************************************************/

char Read_Modbus(void)
{
     d9e:	cf 93       	push	r28
	unsigned int CRC;									//Переменная для контрольной суммы
	
	if (_UART_RX_end==0) return 0;						//Выход если признак окончания приема пакета не установлен
     da0:	80 91 07 02 	lds	r24, 0x0207
     da4:	88 23       	and	r24, r24
     da6:	49 f1       	breq	.+82     	; 0xdfa <Read_Modbus+0x5c>
	_UART_RX_end=0;										//Сброс флага окончания приема
     da8:	10 92 07 02 	sts	0x0207, r1
	if(_UART_RX_Buf[0] != Address_device) return 0xFD;	// если адрес не наш
     dac:	90 91 a4 02 	lds	r25, 0x02A4
     db0:	80 91 0d 02 	lds	r24, 0x020D
     db4:	98 13       	cpse	r25, r24
     db6:	23 c0       	rjmp	.+70     	; 0xdfe <Read_Modbus+0x60>
	if(_UART_RX_length<=5) return 0xFE;
     db8:	c0 91 86 01 	lds	r28, 0x0186
     dbc:	c6 30       	cpi	r28, 0x06	; 6
     dbe:	08 f1       	brcs	.+66     	; 0xe02 <Read_Modbus+0x64>
	CRC=_CRC_calc(_UART_RX_Buf,_UART_RX_length-2);		//Расчет CRC
     dc0:	6e ef       	ldi	r22, 0xFE	; 254
     dc2:	6c 0f       	add	r22, r28
     dc4:	84 ea       	ldi	r24, 0xA4	; 164
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_CRC_calc>
	// Проверка контрольной суммы, если полученая и вычисленная CRC16 не совпадают
	if (((CRC>>8)!=_UART_RX_Buf[_UART_RX_length-1]) || ((CRC & 0xFF)!=_UART_RX_Buf[_UART_RX_length-2])) return 0xFF; // Возврат с ошибкой CRC
     dcc:	2c 2f       	mov	r18, r28
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	69 2f       	mov	r22, r25
     dd2:	77 27       	eor	r23, r23
     dd4:	f9 01       	movw	r30, r18
     dd6:	ed 55       	subi	r30, 0x5D	; 93
     dd8:	fd 4f       	sbci	r31, 0xFD	; 253
     dda:	40 81       	ld	r20, Z
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	64 17       	cp	r22, r20
     de0:	75 07       	cpc	r23, r21
     de2:	89 f4       	brne	.+34     	; 0xe06 <Read_Modbus+0x68>
     de4:	99 27       	eor	r25, r25
     de6:	f9 01       	movw	r30, r18
     de8:	ee 55       	subi	r30, 0x5E	; 94
     dea:	fd 4f       	sbci	r31, 0xFD	; 253
     dec:	20 81       	ld	r18, Z
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	82 17       	cp	r24, r18
     df2:	93 07       	cpc	r25, r19
     df4:	51 f0       	breq	.+20     	; 0xe0a <Read_Modbus+0x6c>
     df6:	8f ef       	ldi	r24, 0xFF	; 255
     df8:	09 c0       	rjmp	.+18     	; 0xe0c <Read_Modbus+0x6e>

char Read_Modbus(void)
{
	unsigned int CRC;									//Переменная для контрольной суммы
	
	if (_UART_RX_end==0) return 0;						//Выход если признак окончания приема пакета не установлен
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	07 c0       	rjmp	.+14     	; 0xe0c <Read_Modbus+0x6e>
	_UART_RX_end=0;										//Сброс флага окончания приема
	if(_UART_RX_Buf[0] != Address_device) return 0xFD;	// если адрес не наш
     dfe:	8d ef       	ldi	r24, 0xFD	; 253
     e00:	05 c0       	rjmp	.+10     	; 0xe0c <Read_Modbus+0x6e>
	if(_UART_RX_length<=5) return 0xFE;
     e02:	8e ef       	ldi	r24, 0xFE	; 254
     e04:	03 c0       	rjmp	.+6      	; 0xe0c <Read_Modbus+0x6e>
	CRC=_CRC_calc(_UART_RX_Buf,_UART_RX_length-2);		//Расчет CRC
	// Проверка контрольной суммы, если полученая и вычисленная CRC16 не совпадают
	if (((CRC>>8)!=_UART_RX_Buf[_UART_RX_length-1]) || ((CRC & 0xFF)!=_UART_RX_Buf[_UART_RX_length-2])) return 0xFF; // Возврат с ошибкой CRC
     e06:	8f ef       	ldi	r24, 0xFF	; 255
     e08:	01 c0       	rjmp	.+2      	; 0xe0c <Read_Modbus+0x6e>

	return 1;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
}
     e0c:	cf 91       	pop	r28
     e0e:	08 95       	ret

00000e10 <MODBUS_K1_2>:
/*****************************************************************************
 Чтение состояния дискретных выходов DO и дискретных входов DI
******************************************************************************
*****************************************************************************/
void MODBUS_K1_2(void)
{
     e10:	af 92       	push	r10
     e12:	bf 92       	push	r11
     e14:	cf 92       	push	r12
     e16:	df 92       	push	r13
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
//unsigned int n;
int n;
unsigned char b,d,nb,c;
asm("wdr");
     e24:	a8 95       	wdr
d = SubFunc + Data;
     e26:	d0 90 8e 02 	lds	r13, 0x028E
     e2a:	80 91 0a 02 	lds	r24, 0x020A
     e2e:	90 91 0b 02 	lds	r25, 0x020B
     e32:	cd 2c       	mov	r12, r13
     e34:	c8 0e       	add	r12, r24
n = 0;
// Считаем кол-во запрошеных байт
nb = Data/8;
     e36:	9c 01       	movw	r18, r24
     e38:	99 23       	and	r25, r25
     e3a:	14 f4       	brge	.+4      	; 0xe40 <MODBUS_K1_2+0x30>
     e3c:	29 5f       	subi	r18, 0xF9	; 249
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
     e40:	35 95       	asr	r19
     e42:	27 95       	ror	r18
     e44:	35 95       	asr	r19
     e46:	27 95       	ror	r18
     e48:	35 95       	asr	r19
     e4a:	27 95       	ror	r18
     e4c:	b2 2e       	mov	r11, r18
if(Data%8 > 0) nb += 1; // если есть остаток - увеличиваем до целого байта
     e4e:	87 70       	andi	r24, 0x07	; 7
     e50:	90 78       	andi	r25, 0x80	; 128
     e52:	99 23       	and	r25, r25
     e54:	24 f4       	brge	.+8      	; 0xe5e <MODBUS_K1_2+0x4e>
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	88 6f       	ori	r24, 0xF8	; 248
     e5a:	9f 6f       	ori	r25, 0xFF	; 255
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	18 16       	cp	r1, r24
     e60:	19 06       	cpc	r1, r25
     e62:	1c f4       	brge	.+6      	; 0xe6a <MODBUS_K1_2+0x5a>
     e64:	bb 24       	eor	r11, r11
     e66:	b3 94       	inc	r11
     e68:	b2 0e       	add	r11, r18

if(Func == 1) // ---------------- Если надо считать состояние DO -----------------------------
     e6a:	a0 90 09 02 	lds	r10, 0x0209
     e6e:	21 e0       	ldi	r18, 0x01	; 1
     e70:	a2 12       	cpse	r10, r18
     e72:	28 c0       	rjmp	.+80     	; 0xec4 <MODBUS_K1_2+0xb4>
  {
  if(d > maxAddr_DO) {m_coderr=2; return;} // Если запрашивается больше имеющихся DO
     e74:	80 e1       	ldi	r24, 0x10	; 16
     e76:	8c 15       	cp	r24, r12
     e78:	28 f0       	brcs	.+10     	; 0xe84 <MODBUS_K1_2+0x74>
  for(b = SubFunc,c = 0; b < d; b++) // заполняем запрошеными данными переменную n
     e7a:	dc 14       	cp	r13, r12
     e7c:	38 f0       	brcs	.+14     	; 0xe8c <MODBUS_K1_2+0x7c>
     e7e:	00 e0       	ldi	r16, 0x00	; 0
     e80:	10 e0       	ldi	r17, 0x00	; 0
     e82:	47 c0       	rjmp	.+142    	; 0xf12 <MODBUS_K1_2+0x102>
nb = Data/8;
if(Data%8 > 0) nb += 1; // если есть остаток - увеличиваем до целого байта

if(Func == 1) // ---------------- Если надо считать состояние DO -----------------------------
  {
  if(d > maxAddr_DO) {m_coderr=2; return;} // Если запрашивается больше имеющихся DO
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	80 93 84 01 	sts	0x0184, r24
     e8a:	68 c0       	rjmp	.+208    	; 0xf5c <MODBUS_K1_2+0x14c>
  for(b = SubFunc,c = 0; b < d; b++) // заполняем запрошеными данными переменную n
     e8c:	c0 e0       	ldi	r28, 0x00	; 0
     e8e:	d0 e0       	ldi	r29, 0x00	; 0
     e90:	00 e0       	ldi	r16, 0x00	; 0
     e92:	10 e0       	ldi	r17, 0x00	; 0
    {
	if(OutState(b) != 0) n|=(0x01 << c); // Если считываемый бит не = 0 - Установим соответствующий бит в переменной
     e94:	ee 24       	eor	r14, r14
     e96:	e3 94       	inc	r14
     e98:	f1 2c       	mov	r15, r1
     e9a:	8c 2f       	mov	r24, r28
     e9c:	8d 0d       	add	r24, r13
     e9e:	0e 94 84 00 	call	0x108	; 0x108 <OutState>
     ea2:	88 23       	and	r24, r24
     ea4:	49 f0       	breq	.+18     	; 0xeb8 <MODBUS_K1_2+0xa8>
     ea6:	c7 01       	movw	r24, r14
     ea8:	0c 2e       	mov	r0, r28
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <MODBUS_K1_2+0xa0>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <MODBUS_K1_2+0x9c>
     eb4:	08 2b       	or	r16, r24
     eb6:	19 2b       	or	r17, r25
     eb8:	21 96       	adiw	r28, 0x01	; 1
     eba:	8c 2f       	mov	r24, r28
     ebc:	8d 0d       	add	r24, r13
if(Data%8 > 0) nb += 1; // если есть остаток - увеличиваем до целого байта

if(Func == 1) // ---------------- Если надо считать состояние DO -----------------------------
  {
  if(d > maxAddr_DO) {m_coderr=2; return;} // Если запрашивается больше имеющихся DO
  for(b = SubFunc,c = 0; b < d; b++) // заполняем запрошеными данными переменную n
     ebe:	8c 15       	cp	r24, r12
     ec0:	60 f3       	brcs	.-40     	; 0xe9a <MODBUS_K1_2+0x8a>
     ec2:	27 c0       	rjmp	.+78     	; 0xf12 <MODBUS_K1_2+0x102>
	c++;
	}
  }
else 			  // ----------------- Если надо считать состояние DI -----------------------------
  {
  if(d > maxAddr_DI) {m_coderr=2; return;} // Если запрашивается больше имеющихся DI
     ec4:	80 e1       	ldi	r24, 0x10	; 16
     ec6:	8c 15       	cp	r24, r12
     ec8:	28 f0       	brcs	.+10     	; 0xed4 <MODBUS_K1_2+0xc4>
  for(b = SubFunc,c = 0; b < d; b++) // заполняем запрошеными данными переменную n
     eca:	dc 14       	cp	r13, r12
     ecc:	38 f0       	brcs	.+14     	; 0xedc <MODBUS_K1_2+0xcc>
     ece:	00 e0       	ldi	r16, 0x00	; 0
     ed0:	10 e0       	ldi	r17, 0x00	; 0
     ed2:	1f c0       	rjmp	.+62     	; 0xf12 <MODBUS_K1_2+0x102>
	c++;
	}
  }
else 			  // ----------------- Если надо считать состояние DI -----------------------------
  {
  if(d > maxAddr_DI) {m_coderr=2; return;} // Если запрашивается больше имеющихся DI
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	80 93 84 01 	sts	0x0184, r24
     eda:	40 c0       	rjmp	.+128    	; 0xf5c <MODBUS_K1_2+0x14c>
  for(b = SubFunc,c = 0; b < d; b++) // заполняем запрошеными данными переменную n
     edc:	c0 e0       	ldi	r28, 0x00	; 0
     ede:	d0 e0       	ldi	r29, 0x00	; 0
     ee0:	00 e0       	ldi	r16, 0x00	; 0
     ee2:	10 e0       	ldi	r17, 0x00	; 0
    {
	if(InState(b) != 0) n|=(0x01 << c); // Если считываемый бит не = 0 - Установим соответствующий бит в переменной
     ee4:	ee 24       	eor	r14, r14
     ee6:	e3 94       	inc	r14
     ee8:	f1 2c       	mov	r15, r1
     eea:	8c 2f       	mov	r24, r28
     eec:	8d 0d       	add	r24, r13
     eee:	0e 94 73 00 	call	0xe6	; 0xe6 <InState>
     ef2:	88 23       	and	r24, r24
     ef4:	49 f0       	breq	.+18     	; 0xf08 <MODBUS_K1_2+0xf8>
     ef6:	c7 01       	movw	r24, r14
     ef8:	0c 2e       	mov	r0, r28
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <MODBUS_K1_2+0xf0>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <MODBUS_K1_2+0xec>
     f04:	08 2b       	or	r16, r24
     f06:	19 2b       	or	r17, r25
     f08:	21 96       	adiw	r28, 0x01	; 1
     f0a:	8c 2f       	mov	r24, r28
     f0c:	8d 0d       	add	r24, r13
	}
  }
else 			  // ----------------- Если надо считать состояние DI -----------------------------
  {
  if(d > maxAddr_DI) {m_coderr=2; return;} // Если запрашивается больше имеющихся DI
  for(b = SubFunc,c = 0; b < d; b++) // заполняем запрошеными данными переменную n
     f0e:	8c 15       	cp	r24, r12
     f10:	60 f3       	brcs	.-40     	; 0xeea <MODBUS_K1_2+0xda>
	c++;
	}
  }
// =================================== Теперь составим ответ =============================
 b = 0;										// Обнуляем указатель
 _UART_TX_Buf[b++] = Address_device & 0xFF; // Запишем адрес контроллера
     f12:	80 91 0d 02 	lds	r24, 0x020D
     f16:	80 93 0f 02 	sts	0x020F, r24
 _UART_TX_Buf[b++] = Func; 					// Запишем выполненую команду
     f1a:	a0 92 10 02 	sts	0x0210, r10
 _UART_TX_Buf[b++] =  nb;					// Запишем кол- во отсылаемых байт
     f1e:	b0 92 11 02 	sts	0x0211, r11
 _UART_TX_Buf[b++] = n & 0xFF; 	   			// 1 байт в любом случае
     f22:	00 93 12 02 	sts	0x0212, r16
 if(nb == 2) _UART_TX_Buf[b++] = ((n >> 8) & 0xFF); // 2 байт - если надо
     f26:	82 e0       	ldi	r24, 0x02	; 2
     f28:	b8 12       	cpse	r11, r24
     f2a:	04 c0       	rjmp	.+8      	; 0xf34 <MODBUS_K1_2+0x124>
     f2c:	10 93 13 02 	sts	0x0213, r17
     f30:	c5 e0       	ldi	r28, 0x05	; 5
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <MODBUS_K1_2+0x126>
// =================================== Теперь составим ответ =============================
 b = 0;										// Обнуляем указатель
 _UART_TX_Buf[b++] = Address_device & 0xFF; // Запишем адрес контроллера
 _UART_TX_Buf[b++] = Func; 					// Запишем выполненую команду
 _UART_TX_Buf[b++] =  nb;					// Запишем кол- во отсылаемых байт
 _UART_TX_Buf[b++] = n & 0xFF; 	   			// 1 байт в любом случае
     f34:	c4 e0       	ldi	r28, 0x04	; 4
 if(nb == 2) _UART_TX_Buf[b++] = ((n >> 8) & 0xFF); // 2 байт - если надо
 // --------------- Подсчет CRC -------------------
 n = _CRC_calc(_UART_TX_Buf, b);				// Считаем CRC
     f36:	6c 2f       	mov	r22, r28
     f38:	8f e0       	ldi	r24, 0x0F	; 15
     f3a:	92 e0       	ldi	r25, 0x02	; 2
     f3c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_CRC_calc>
 _UART_TX_Buf[b++] = n & 0xFF;	  			// Пишем младший байт - вначале передаем младший байт
     f40:	ec 2f       	mov	r30, r28
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	e1 5f       	subi	r30, 0xF1	; 241
     f46:	fd 4f       	sbci	r31, 0xFD	; 253
     f48:	80 83       	st	Z, r24
     f4a:	e1 e0       	ldi	r30, 0x01	; 1
     f4c:	ec 0f       	add	r30, r28
 _UART_TX_Buf[b++] = ((n >> 8) & 0xFF);		// Пишем старший байт 
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	e1 5f       	subi	r30, 0xF1	; 241
     f52:	fd 4f       	sbci	r31, 0xFD	; 253
     f54:	90 83       	st	Z, r25
     f56:	ce 5f       	subi	r28, 0xFE	; 254

 _UART_TX_length = b;	  	  		 // Запишем кол - во передаваемых байт из буфера
     f58:	c0 93 a3 02 	sts	0x02A3, r28
}
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	ff 90       	pop	r15
     f66:	ef 90       	pop	r14
     f68:	df 90       	pop	r13
     f6a:	cf 90       	pop	r12
     f6c:	bf 90       	pop	r11
     f6e:	af 90       	pop	r10
     f70:	08 95       	ret

00000f72 <MODBUS_K3_4>:
/*****************************************************************************
 Чтение нескольких Holding или Input регистров (чтение)
******************************************************************************
*****************************************************************************/
void MODBUS_K3_4(void)
{
     f72:	cf 93       	push	r28
// Внутренние переменные
unsigned int n;
unsigned char m,b,d;
asm("wdr");
     f74:	a8 95       	wdr
d = SubFunc + Data;
     f76:	80 91 8e 02 	lds	r24, 0x028E
     f7a:	60 91 0a 02 	lds	r22, 0x020A
     f7e:	70 91 0b 02 	lds	r23, 0x020B
     f82:	98 2f       	mov	r25, r24
     f84:	96 0f       	add	r25, r22
b = 0;

// Составляем ответ
 _UART_TX_Buf[b++] = Address_device & 0xFF; // Запишем адрес контроллера
     f86:	20 91 0d 02 	lds	r18, 0x020D
     f8a:	20 93 0f 02 	sts	0x020F, r18
 _UART_TX_Buf[b++] = Func; 					// Запишем выполненую команду
     f8e:	40 91 09 02 	lds	r20, 0x0209
     f92:	40 93 10 02 	sts	0x0210, r20
 _UART_TX_Buf[b++] = (Data<<1) & 0xFF;		// Кол-во байт = кол-во слов*2 и наложить маску
     f96:	9b 01       	movw	r18, r22
     f98:	22 0f       	add	r18, r18
     f9a:	33 1f       	adc	r19, r19
     f9c:	20 93 11 02 	sts	0x0211, r18
// Считаем смещение
if(Func == 3) // Если надо считать HOLDING регистры
     fa0:	43 30       	cpi	r20, 0x03	; 3
     fa2:	31 f5       	brne	.+76     	; 0xff0 <MODBUS_K3_4+0x7e>
  {
  if(d > maxAddrRegHOLD) {m_coderr=2; return;} // Ошибка!!! запрашивается больше имеющихся
     fa4:	91 34       	cpi	r25, 0x41	; 65
     fa6:	20 f4       	brcc	.+8      	; 0xfb0 <MODBUS_K3_4+0x3e>
  for(m = SubFunc; m < d; m++) // заполняем запрошеными данными буфер ответа
     fa8:	89 17       	cp	r24, r25
     faa:	30 f0       	brcs	.+12     	; 0xfb8 <MODBUS_K3_4+0x46>
     fac:	c3 e0       	ldi	r28, 0x03	; 3
     fae:	45 c0       	rjmp	.+138    	; 0x103a <MODBUS_K3_4+0xc8>
 _UART_TX_Buf[b++] = Func; 					// Запишем выполненую команду
 _UART_TX_Buf[b++] = (Data<<1) & 0xFF;		// Кол-во байт = кол-во слов*2 и наложить маску
// Считаем смещение
if(Func == 3) // Если надо считать HOLDING регистры
  {
  if(d > maxAddrRegHOLD) {m_coderr=2; return;} // Ошибка!!! запрашивается больше имеющихся
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	80 93 84 01 	sts	0x0184, r24
     fb6:	54 c0       	rjmp	.+168    	; 0x1060 <MODBUS_K3_4+0xee>
  for(m = SubFunc; m < d; m++) // заполняем запрошеными данными буфер ответа
     fb8:	23 e0       	ldi	r18, 0x03	; 3
   {
   _UART_TX_Buf[b++] = (MB_Hreg[m] >> 8) & 0xFF; // Записываем старший байт
     fba:	e8 2f       	mov	r30, r24
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	ee 0f       	add	r30, r30
     fc0:	ff 1f       	adc	r31, r31
     fc2:	ed 5d       	subi	r30, 0xDD	; 221
     fc4:	fc 4f       	sbci	r31, 0xFC	; 252
     fc6:	30 81       	ld	r19, Z
     fc8:	41 81       	ldd	r20, Z+1	; 0x01
     fca:	e2 2f       	mov	r30, r18
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	e1 5f       	subi	r30, 0xF1	; 241
     fd0:	fd 4f       	sbci	r31, 0xFD	; 253
     fd2:	40 83       	st	Z, r20
   _UART_TX_Buf[b++] =  MB_Hreg[m] & 0xFF;  	 // Записываем младший байт
     fd4:	e1 e0       	ldi	r30, 0x01	; 1
     fd6:	e2 0f       	add	r30, r18
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	2e 5f       	subi	r18, 0xFE	; 254
     fdc:	e1 5f       	subi	r30, 0xF1	; 241
     fde:	fd 4f       	sbci	r31, 0xFD	; 253
     fe0:	30 83       	st	Z, r19
 _UART_TX_Buf[b++] = (Data<<1) & 0xFF;		// Кол-во байт = кол-во слов*2 и наложить маску
// Считаем смещение
if(Func == 3) // Если надо считать HOLDING регистры
  {
  if(d > maxAddrRegHOLD) {m_coderr=2; return;} // Ошибка!!! запрашивается больше имеющихся
  for(m = SubFunc; m < d; m++) // заполняем запрошеными данными буфер ответа
     fe2:	8f 5f       	subi	r24, 0xFF	; 255
     fe4:	89 13       	cpse	r24, r25
     fe6:	e9 cf       	rjmp	.-46     	; 0xfba <MODBUS_K3_4+0x48>
     fe8:	66 0f       	add	r22, r22
     fea:	c3 e0       	ldi	r28, 0x03	; 3
     fec:	c6 0f       	add	r28, r22
     fee:	25 c0       	rjmp	.+74     	; 0x103a <MODBUS_K3_4+0xc8>
   _UART_TX_Buf[b++] =  MB_Hreg[m] & 0xFF;  	 // Записываем младший байт
   }
  }
else 			  // Если надо считать INPUT регистры
  {
  if(d > maxAddrRegINP) {m_coderr=2; return;} // Ошибка!!! запрашивается больше имеющихся
     ff0:	91 34       	cpi	r25, 0x41	; 65
     ff2:	20 f4       	brcc	.+8      	; 0xffc <MODBUS_K3_4+0x8a>
  for(m = SubFunc; m < d; m++) // заполняем запрошеными данными буфер ответа
     ff4:	89 17       	cp	r24, r25
     ff6:	30 f0       	brcs	.+12     	; 0x1004 <MODBUS_K3_4+0x92>
     ff8:	c3 e0       	ldi	r28, 0x03	; 3
     ffa:	1f c0       	rjmp	.+62     	; 0x103a <MODBUS_K3_4+0xc8>
   _UART_TX_Buf[b++] =  MB_Hreg[m] & 0xFF;  	 // Записываем младший байт
   }
  }
else 			  // Если надо считать INPUT регистры
  {
  if(d > maxAddrRegINP) {m_coderr=2; return;} // Ошибка!!! запрашивается больше имеющихся
     ffc:	82 e0       	ldi	r24, 0x02	; 2
     ffe:	80 93 84 01 	sts	0x0184, r24
    1002:	2e c0       	rjmp	.+92     	; 0x1060 <MODBUS_K3_4+0xee>
  for(m = SubFunc; m < d; m++) // заполняем запрошеными данными буфер ответа
    1004:	23 e0       	ldi	r18, 0x03	; 3
   {
   _UART_TX_Buf[b++] = (MB_Ireg[m] >> 8) & 0xFF; // Записываем старший байт
    1006:	e8 2f       	mov	r30, r24
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	e9 57       	subi	r30, 0x79	; 121
    1010:	fe 4f       	sbci	r31, 0xFE	; 254
    1012:	30 81       	ld	r19, Z
    1014:	41 81       	ldd	r20, Z+1	; 0x01
    1016:	e2 2f       	mov	r30, r18
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	e1 5f       	subi	r30, 0xF1	; 241
    101c:	fd 4f       	sbci	r31, 0xFD	; 253
    101e:	40 83       	st	Z, r20
   _UART_TX_Buf[b++] =  MB_Ireg[m] & 0xFF;  	   // Записываем младший байт
    1020:	e1 e0       	ldi	r30, 0x01	; 1
    1022:	e2 0f       	add	r30, r18
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	2e 5f       	subi	r18, 0xFE	; 254
    1028:	e1 5f       	subi	r30, 0xF1	; 241
    102a:	fd 4f       	sbci	r31, 0xFD	; 253
    102c:	30 83       	st	Z, r19
   }
  }
else 			  // Если надо считать INPUT регистры
  {
  if(d > maxAddrRegINP) {m_coderr=2; return;} // Ошибка!!! запрашивается больше имеющихся
  for(m = SubFunc; m < d; m++) // заполняем запрошеными данными буфер ответа
    102e:	8f 5f       	subi	r24, 0xFF	; 255
    1030:	89 13       	cpse	r24, r25
    1032:	e9 cf       	rjmp	.-46     	; 0x1006 <MODBUS_K3_4+0x94>
    1034:	66 0f       	add	r22, r22
    1036:	c3 e0       	ldi	r28, 0x03	; 3
    1038:	c6 0f       	add	r28, r22
   _UART_TX_Buf[b++] = (MB_Ireg[m] >> 8) & 0xFF; // Записываем старший байт
   _UART_TX_Buf[b++] =  MB_Ireg[m] & 0xFF;  	   // Записываем младший байт
   }
  }
// --- Подсчет CRC ---
 n = _CRC_calc(_UART_TX_Buf,b);				// Считаем CRC
    103a:	6c 2f       	mov	r22, r28
    103c:	8f e0       	ldi	r24, 0x0F	; 15
    103e:	92 e0       	ldi	r25, 0x02	; 2
    1040:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_CRC_calc>
 _UART_TX_Buf[b++] = n & 0xFF;	  			// Пишем младший байт - вначале передаем младший байт
    1044:	ec 2f       	mov	r30, r28
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	e1 5f       	subi	r30, 0xF1	; 241
    104a:	fd 4f       	sbci	r31, 0xFD	; 253
    104c:	80 83       	st	Z, r24
    104e:	e1 e0       	ldi	r30, 0x01	; 1
    1050:	ec 0f       	add	r30, r28
 _UART_TX_Buf[b++] = ((n >> 8) & 0xFF);		// Пишем старший байт - затем старший байт
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	e1 5f       	subi	r30, 0xF1	; 241
    1056:	fd 4f       	sbci	r31, 0xFD	; 253
    1058:	90 83       	st	Z, r25
    105a:	ce 5f       	subi	r28, 0xFE	; 254

 _UART_TX_length = b;	  	  		 // Запишем кол - во передаваемых байт из буфера
    105c:	c0 93 a3 02 	sts	0x02A3, r28
}
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

00001064 <MODBUS_K5>:
*****************************************************************************/
void MODBUS_K5(void)
{
unsigned int n;
unsigned char b,d;
asm("wdr");
    1064:	a8 95       	wdr
d = SubFunc + Data;
    1066:	80 91 8e 02 	lds	r24, 0x028E
    106a:	90 91 0a 02 	lds	r25, 0x020A
    106e:	98 0f       	add	r25, r24
n = 0;
if(d > maxAddr_DO) {m_coderr=2; return;} // Если запрашивается больше имеющихся
    1070:	91 31       	cpi	r25, 0x11	; 17
    1072:	20 f0       	brcs	.+8      	; 0x107c <MODBUS_K5+0x18>
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	80 93 84 01 	sts	0x0184, r24
    107a:	08 95       	ret
// Всегда установка 1 выхода DO
if((_UART_RX_dup[4] == 0xFF) && (_UART_RX_dup[5] == 0x00)) OutControl(SubFunc,1);      // Если установить (вкл выход)
    107c:	90 91 09 01 	lds	r25, 0x0109
    1080:	9f 3f       	cpi	r25, 0xFF	; 255
    1082:	41 f4       	brne	.+16     	; 0x1094 <MODBUS_K5+0x30>
    1084:	90 91 0a 01 	lds	r25, 0x010A
    1088:	91 11       	cpse	r25, r1
    108a:	0e c0       	rjmp	.+28     	; 0x10a8 <MODBUS_K5+0x44>
    108c:	61 e0       	ldi	r22, 0x01	; 1
    108e:	0e 94 95 00 	call	0x12a	; 0x12a <OutControl>
    1092:	0e c0       	rjmp	.+28     	; 0x10b0 <MODBUS_K5+0x4c>
else if((_UART_RX_dup[4] == 0x00) && (_UART_RX_dup[5] == 0x00)) OutControl(SubFunc,0);	// Если сбросить (выкл выход)
    1094:	91 11       	cpse	r25, r1
    1096:	08 c0       	rjmp	.+16     	; 0x10a8 <MODBUS_K5+0x44>
    1098:	90 91 0a 01 	lds	r25, 0x010A
    109c:	91 11       	cpse	r25, r1
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <MODBUS_K5+0x44>
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	0e 94 95 00 	call	0x12a	; 0x12a <OutControl>
    10a6:	04 c0       	rjmp	.+8      	; 0x10b0 <MODBUS_K5+0x4c>
else {m_coderr=3; return;} // Если неверно задано поле данных
    10a8:	83 e0       	ldi	r24, 0x03	; 3
    10aa:	80 93 84 01 	sts	0x0184, r24
    10ae:	08 95       	ret
// *************** Теперь составим ответ **********************************
b = 0;
 _UART_TX_Buf[b++] = Address_device & 0xFF;   		// Запишем адрес контроллера
    10b0:	80 91 0d 02 	lds	r24, 0x020D
    10b4:	80 93 0f 02 	sts	0x020F, r24
 _UART_TX_Buf[b++] = Func; 		   					// Запишем выполненую команду
    10b8:	80 91 09 02 	lds	r24, 0x0209
    10bc:	80 93 10 02 	sts	0x0210, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[2];				// Запишем ст. байт адреса
    10c0:	80 91 07 01 	lds	r24, 0x0107
    10c4:	80 93 11 02 	sts	0x0211, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[3]; 	   	   		// Запишем мл. байт адреса
    10c8:	80 91 08 01 	lds	r24, 0x0108
    10cc:	80 93 12 02 	sts	0x0212, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[4];				// Запишем ст. байт данных
    10d0:	80 91 09 01 	lds	r24, 0x0109
    10d4:	80 93 13 02 	sts	0x0213, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[5]; 	   	   		// Запишем мл. байт данных
    10d8:	80 91 0a 01 	lds	r24, 0x010A
    10dc:	80 93 14 02 	sts	0x0214, r24
// ---- Подсчет CRC ----
 n = _CRC_calc(_UART_TX_Buf,b);				// Считаем CRC
    10e0:	66 e0       	ldi	r22, 0x06	; 6
    10e2:	8f e0       	ldi	r24, 0x0F	; 15
    10e4:	92 e0       	ldi	r25, 0x02	; 2
    10e6:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_CRC_calc>
 _UART_TX_Buf[b++] = n & 0xFF;	  		 // Пишем младший байт - вначале передаем младший байт
    10ea:	80 93 15 02 	sts	0x0215, r24
 _UART_TX_Buf[b++] = ((n >> 8) & 0xFF); // Пишем старший байт - затем старший байт
    10ee:	90 93 16 02 	sts	0x0216, r25

_UART_TX_length = b;	  	  		 // Запишем кол - во передаваемых байт из буфера
    10f2:	88 e0       	ldi	r24, 0x08	; 8
    10f4:	80 93 a3 02 	sts	0x02A3, r24
    10f8:	08 95       	ret

000010fa <MODBUS_K6>:
*****************************************************************************/
void MODBUS_K6(void)
{
unsigned int n;
unsigned char b;
asm("wdr");
    10fa:	a8 95       	wdr
n = 0;
if(SubFunc > maxAddrRegHOLD) {m_coderr=2; return;} // Если запрашивается изменение регистра больше имеющихся
    10fc:	80 91 8e 02 	lds	r24, 0x028E
    1100:	90 91 8f 02 	lds	r25, 0x028F
    1104:	81 34       	cpi	r24, 0x41	; 65
    1106:	91 05       	cpc	r25, r1
    1108:	24 f0       	brlt	.+8      	; 0x1112 <MODBUS_K6+0x18>
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	80 93 84 01 	sts	0x0184, r24
    1110:	08 95       	ret

MB_Hreg[SubFunc] = (_UART_RX_dup[4] << 8) | _UART_RX_dup[5]; // Просто записываем в Holding регистр по указанному адресу
    1112:	fc 01       	movw	r30, r24
    1114:	ee 0f       	add	r30, r30
    1116:	ff 1f       	adc	r31, r31
    1118:	ed 5d       	subi	r30, 0xDD	; 221
    111a:	fc 4f       	sbci	r31, 0xFC	; 252
    111c:	20 91 09 01 	lds	r18, 0x0109
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	32 2f       	mov	r19, r18
    1124:	22 27       	eor	r18, r18
    1126:	40 91 0a 01 	lds	r20, 0x010A
    112a:	24 2b       	or	r18, r20
    112c:	31 83       	std	Z+1, r19	; 0x01
    112e:	20 83       	st	Z, r18
// --- Для контроллера КМ01-3200.М ---
#ifdef _KM3200_
if(SubFunc == 6) wr_mcnt();	// если это конфигурация счетчиков - записать новое значение в EEPROM
    1130:	86 30       	cpi	r24, 0x06	; 6
    1132:	91 05       	cpc	r25, r1
    1134:	19 f4       	brne	.+6      	; 0x113c <MODBUS_K6+0x42>
    1136:	0e 94 00 04 	call	0x800	; 0x800 <wr_mcnt>
    113a:	40 c0       	rjmp	.+128    	; 0x11bc <MODBUS_K6+0xc2>
else if(SubFunc == 7) wr_vcnt1();	// если это значение делителя для счетчика №1 - записать новое значение в EEPROM
    113c:	87 30       	cpi	r24, 0x07	; 7
    113e:	91 05       	cpc	r25, r1
    1140:	19 f4       	brne	.+6      	; 0x1148 <MODBUS_K6+0x4e>
    1142:	0e 94 0c 04 	call	0x818	; 0x818 <wr_vcnt1>
    1146:	3a c0       	rjmp	.+116    	; 0x11bc <MODBUS_K6+0xc2>
else if(SubFunc == 8) wr_vcnt2();	// если это значение делителя для счетчика №2 - записать новое значение в EEPROM
    1148:	88 30       	cpi	r24, 0x08	; 8
    114a:	91 05       	cpc	r25, r1
    114c:	19 f4       	brne	.+6      	; 0x1154 <MODBUS_K6+0x5a>
    114e:	0e 94 34 04 	call	0x868	; 0x868 <wr_vcnt2>
    1152:	34 c0       	rjmp	.+104    	; 0x11bc <MODBUS_K6+0xc2>
else if(SubFunc == 9) wr_vcnt3();	// если это значение делителя для счетчика №3 - записать новое значение в EEPROM
    1154:	89 30       	cpi	r24, 0x09	; 9
    1156:	91 05       	cpc	r25, r1
    1158:	19 f4       	brne	.+6      	; 0x1160 <MODBUS_K6+0x66>
    115a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <wr_vcnt3>
    115e:	2e c0       	rjmp	.+92     	; 0x11bc <MODBUS_K6+0xc2>
else if(SubFunc == 10) wr_vhcnt1();	// если это старшее опорное слово для счетчика №1 - записать новое значение в EEPROM
    1160:	8a 30       	cpi	r24, 0x0A	; 10
    1162:	91 05       	cpc	r25, r1
    1164:	19 f4       	brne	.+6      	; 0x116c <MODBUS_K6+0x72>
    1166:	0e 94 26 04 	call	0x84c	; 0x84c <wr_vhcnt1>
    116a:	28 c0       	rjmp	.+80     	; 0x11bc <MODBUS_K6+0xc2>
else if(SubFunc == 11) wr_vlcnt1();	// если это младшее опорное слово для счетчика №1 - записать новое значение в EEPROM
    116c:	8b 30       	cpi	r24, 0x0B	; 11
    116e:	91 05       	cpc	r25, r1
    1170:	19 f4       	brne	.+6      	; 0x1178 <MODBUS_K6+0x7e>
    1172:	0e 94 18 04 	call	0x830	; 0x830 <wr_vlcnt1>
    1176:	22 c0       	rjmp	.+68     	; 0x11bc <MODBUS_K6+0xc2>
else if(SubFunc == 12) wr_vhcnt2();	// если это старшее опорное слово для счетчика №2 - записать новое значение в EEPROM
    1178:	8c 30       	cpi	r24, 0x0C	; 12
    117a:	91 05       	cpc	r25, r1
    117c:	19 f4       	brne	.+6      	; 0x1184 <MODBUS_K6+0x8a>
    117e:	0e 94 4e 04 	call	0x89c	; 0x89c <wr_vhcnt2>
    1182:	1c c0       	rjmp	.+56     	; 0x11bc <MODBUS_K6+0xc2>
else if(SubFunc == 13) wr_vlcnt2();	// если это младшее опорное слово для счетчика №2 - записать новое значение в EEPROM
    1184:	8d 30       	cpi	r24, 0x0D	; 13
    1186:	91 05       	cpc	r25, r1
    1188:	19 f4       	brne	.+6      	; 0x1190 <MODBUS_K6+0x96>
    118a:	0e 94 40 04 	call	0x880	; 0x880 <wr_vlcnt2>
    118e:	16 c0       	rjmp	.+44     	; 0x11bc <MODBUS_K6+0xc2>
else if(SubFunc == 14) wr_vhcnt3();	// если это старшее опорное слово для счетчика №3 - записать новое значение в EEPROM
    1190:	8e 30       	cpi	r24, 0x0E	; 14
    1192:	91 05       	cpc	r25, r1
    1194:	19 f4       	brne	.+6      	; 0x119c <MODBUS_K6+0xa2>
    1196:	0e 94 76 04 	call	0x8ec	; 0x8ec <wr_vhcnt3>
    119a:	10 c0       	rjmp	.+32     	; 0x11bc <MODBUS_K6+0xc2>
else if(SubFunc == 15) wr_vlcnt3();	// если это младшее опорное слово для счетчика №3 - записать новое значение в EEPROM
    119c:	8f 30       	cpi	r24, 0x0F	; 15
    119e:	91 05       	cpc	r25, r1
    11a0:	19 f4       	brne	.+6      	; 0x11a8 <MODBUS_K6+0xae>
    11a2:	0e 94 68 04 	call	0x8d0	; 0x8d0 <wr_vlcnt3>
    11a6:	0a c0       	rjmp	.+20     	; 0x11bc <MODBUS_K6+0xc2>
else if(SubFunc == 29) wr_adr();	// если это адрес контроллера - записать новое значение в EEPROM
    11a8:	8d 31       	cpi	r24, 0x1D	; 29
    11aa:	91 05       	cpc	r25, r1
    11ac:	19 f4       	brne	.+6      	; 0x11b4 <MODBUS_K6+0xba>
    11ae:	0e 94 d7 03 	call	0x7ae	; 0x7ae <wr_adr>
    11b2:	04 c0       	rjmp	.+8      	; 0x11bc <MODBUS_K6+0xc2>
else if(SubFunc == 30) wr_par();	// если это параметры сети - записать новое значение в EEPROM
    11b4:	4e 97       	sbiw	r24, 0x1e	; 30
    11b6:	11 f4       	brne	.+4      	; 0x11bc <MODBUS_K6+0xc2>
    11b8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <wr_par>
#endif

// *************** Теперь составим ответ **********************************
b = 0;
 _UART_TX_Buf[b++] = Address_device & 0xFF;			// Запишем адрес контроллера
    11bc:	80 91 0d 02 	lds	r24, 0x020D
    11c0:	80 93 0f 02 	sts	0x020F, r24
 _UART_TX_Buf[b++] = Func; 		   					// Запишем выполненую команду
    11c4:	80 91 09 02 	lds	r24, 0x0209
    11c8:	80 93 10 02 	sts	0x0210, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[2];				// Запишем ст. байт начального адреса регистра
    11cc:	80 91 07 01 	lds	r24, 0x0107
    11d0:	80 93 11 02 	sts	0x0211, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[3]; 	   	   		// Запишем мл. байт начального адреса регистра
    11d4:	80 91 08 01 	lds	r24, 0x0108
    11d8:	80 93 12 02 	sts	0x0212, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[4];				// Запишем ст. байт данных регистра
    11dc:	80 91 09 01 	lds	r24, 0x0109
    11e0:	80 93 13 02 	sts	0x0213, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[5]; 	   	   		// Запишем мл. байт данных регистра
    11e4:	80 91 0a 01 	lds	r24, 0x010A
    11e8:	80 93 14 02 	sts	0x0214, r24
// ---- Кол - во целых бай для подсчета CRC ----
 n = _CRC_calc(_UART_TX_Buf,b);				// Считаем CRC
    11ec:	66 e0       	ldi	r22, 0x06	; 6
    11ee:	8f e0       	ldi	r24, 0x0F	; 15
    11f0:	92 e0       	ldi	r25, 0x02	; 2
    11f2:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_CRC_calc>
 _UART_TX_Buf[b++] = n & 0xFF;	  			// Пишем младший байт - вначале передаем младший байт
    11f6:	80 93 15 02 	sts	0x0215, r24
 _UART_TX_Buf[b++] = ((n >> 8) & 0xFF);		// Пишем старший байт - затем старший байт
    11fa:	90 93 16 02 	sts	0x0216, r25
 
_UART_TX_length = b;	  	  				// Запишем кол - во передаваемых байт из буфера
    11fe:	88 e0       	ldi	r24, 0x08	; 8
    1200:	80 93 a3 02 	sts	0x02A3, r24
    1204:	08 95       	ret

00001206 <MODBUS_K15>:
/*****************************************************************************
 Установка (Запись) в несколько дискретных выходов DO

*****************************************************************************/
void MODBUS_K15(void)
{
    1206:	ef 92       	push	r14
    1208:	ff 92       	push	r15
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
unsigned int n;
unsigned char b,d,c;
asm("wdr");
    1212:	a8 95       	wdr
d = SubFunc + Data; // Считаю макс номер вывода для записи
    1214:	f0 90 8e 02 	lds	r15, 0x028E
    1218:	e0 90 0a 02 	lds	r14, 0x020A
    121c:	ef 0c       	add	r14, r15

if(d > maxAddr_DO) {m_coderr=2; return;} // Если запрашивается больше имеющихся
    121e:	80 e1       	ldi	r24, 0x10	; 16
    1220:	8e 15       	cp	r24, r14
    1222:	20 f4       	brcc	.+8      	; 0x122c <MODBUS_K15+0x26>
    1224:	82 e0       	ldi	r24, 0x02	; 2
    1226:	80 93 84 01 	sts	0x0184, r24
    122a:	56 c0       	rjmp	.+172    	; 0x12d8 <MODBUS_K15+0xd2>

n = 0;
// Переписываем данные для установки выходов в int рабочий регистр
if(_UART_RX_dup[6] == 2) {n = (_UART_RX_dup[8] << 8) | _UART_RX_dup[7];}
    122c:	80 91 0b 01 	lds	r24, 0x010B
    1230:	82 30       	cpi	r24, 0x02	; 2
    1232:	49 f4       	brne	.+18     	; 0x1246 <MODBUS_K15+0x40>
    1234:	00 91 0d 01 	lds	r16, 0x010D
    1238:	10 e0       	ldi	r17, 0x00	; 0
    123a:	10 2f       	mov	r17, r16
    123c:	00 27       	eor	r16, r16
    123e:	80 91 0c 01 	lds	r24, 0x010C
    1242:	08 2b       	or	r16, r24
    1244:	0a c0       	rjmp	.+20     	; 0x125a <MODBUS_K15+0x54>
else if(_UART_RX_dup[6] == 1) {n = _UART_RX_dup[7];}
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	21 f4       	brne	.+8      	; 0x1252 <MODBUS_K15+0x4c>
    124a:	00 91 0c 01 	lds	r16, 0x010C
    124e:	10 e0       	ldi	r17, 0x00	; 0
    1250:	04 c0       	rjmp	.+8      	; 0x125a <MODBUS_K15+0x54>
else {m_coderr=2; return;} // не верно задано кол-во байт для записи
    1252:	82 e0       	ldi	r24, 0x02	; 2
    1254:	80 93 84 01 	sts	0x0184, r24
    1258:	3f c0       	rjmp	.+126    	; 0x12d8 <MODBUS_K15+0xd2>

for(b = SubFunc,c = 0; b < d; b++) // заполняем данными флаги в регистре R_DOUT
    125a:	fe 14       	cp	r15, r14
    125c:	c8 f4       	brcc	.+50     	; 0x1290 <MODBUS_K15+0x8a>
    125e:	c0 e0       	ldi	r28, 0x00	; 0
    1260:	d0 e0       	ldi	r29, 0x00	; 0
    1262:	8c 2f       	mov	r24, r28
    1264:	8f 0d       	add	r24, r15
  {
  if(((n >> c) & 0x01) != 0) OutControl(b,1); // Если проверяемый бит не = 0 - Установим соответствующий бит в регистре
    1266:	98 01       	movw	r18, r16
    1268:	0c 2e       	mov	r0, r28
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <MODBUS_K15+0x6a>
    126c:	36 95       	lsr	r19
    126e:	27 95       	ror	r18
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <MODBUS_K15+0x66>
    1274:	20 ff       	sbrs	r18, 0
    1276:	04 c0       	rjmp	.+8      	; 0x1280 <MODBUS_K15+0x7a>
    1278:	61 e0       	ldi	r22, 0x01	; 1
    127a:	0e 94 95 00 	call	0x12a	; 0x12a <OutControl>
    127e:	03 c0       	rjmp	.+6      	; 0x1286 <MODBUS_K15+0x80>
  else OutControl(b,0); 	   					// если = 0 - Сбросим соответствующий бит в регистре
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	0e 94 95 00 	call	0x12a	; 0x12a <OutControl>
    1286:	21 96       	adiw	r28, 0x01	; 1
    1288:	8c 2f       	mov	r24, r28
    128a:	8f 0d       	add	r24, r15
// Переписываем данные для установки выходов в int рабочий регистр
if(_UART_RX_dup[6] == 2) {n = (_UART_RX_dup[8] << 8) | _UART_RX_dup[7];}
else if(_UART_RX_dup[6] == 1) {n = _UART_RX_dup[7];}
else {m_coderr=2; return;} // не верно задано кол-во байт для записи

for(b = SubFunc,c = 0; b < d; b++) // заполняем данными флаги в регистре R_DOUT
    128c:	8e 15       	cp	r24, r14
    128e:	48 f3       	brcs	.-46     	; 0x1262 <MODBUS_K15+0x5c>
  else OutControl(b,0); 	   					// если = 0 - Сбросим соответствующий бит в регистре
  c++;
  }
// *************** Теперь составим ответ **********************************
b = 0;
 _UART_TX_Buf[b++] = Address_device & 0xFF;		// Запишем адрес контроллера
    1290:	80 91 0d 02 	lds	r24, 0x020D
    1294:	80 93 0f 02 	sts	0x020F, r24
 _UART_TX_Buf[b++] = Func; 						// Запишем выполненую команду
    1298:	80 91 09 02 	lds	r24, 0x0209
    129c:	80 93 10 02 	sts	0x0210, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[2];			// Запишем запрошеный адрес выхода ст. байт
    12a0:	80 91 07 01 	lds	r24, 0x0107
    12a4:	80 93 11 02 	sts	0x0211, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[3]; 	   		// Запишем запрошеный адрес выхода мл. байт
    12a8:	80 91 08 01 	lds	r24, 0x0108
    12ac:	80 93 12 02 	sts	0x0212, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[4];			// Запишем записаные данные кол-во выходов ст. байт
    12b0:	80 91 09 01 	lds	r24, 0x0109
    12b4:	80 93 13 02 	sts	0x0213, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[5]; 	   		// Запишем записаные данные кол-во выходов мл. байт
    12b8:	80 91 0a 01 	lds	r24, 0x010A
    12bc:	80 93 14 02 	sts	0x0214, r24
// ---- Подсчет CRC ----
 n = _CRC_calc(_UART_TX_Buf,b);				// Считаем CRC
    12c0:	66 e0       	ldi	r22, 0x06	; 6
    12c2:	8f e0       	ldi	r24, 0x0F	; 15
    12c4:	92 e0       	ldi	r25, 0x02	; 2
    12c6:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_CRC_calc>
 _UART_TX_Buf[b++] = n & 0xFF;	  			// Пишем младший байт - вначале передаем младший байт
    12ca:	80 93 15 02 	sts	0x0215, r24
 _UART_TX_Buf[b++] = ((n >> 8) & 0xFF);		// Пишем старший байт 
    12ce:	90 93 16 02 	sts	0x0216, r25

 _UART_TX_length = b;	  	  				// Запишем кол - во передаваемых байт из буфера
    12d2:	88 e0       	ldi	r24, 0x08	; 8
    12d4:	80 93 a3 02 	sts	0x02A3, r24
}
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	08 95       	ret

000012e6 <MODBUS_K16>:
/*****************************************************************************
 Установка (Запись) в несколько Holding регистров (запись)
******************************************************************************
*****************************************************************************/
void MODBUS_K16(void)
{
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
// Внутренние переменные
unsigned int n;
unsigned char b,d,c;

asm("wdr");
    12ec:	a8 95       	wdr

d = SubFunc + Data; // Считаю макс адрес записываемого регистра
    12ee:	c0 91 8e 02 	lds	r28, 0x028E
    12f2:	10 91 0a 02 	lds	r17, 0x020A
    12f6:	1c 0f       	add	r17, r28
if(d > maxAddrRegHOLD) {m_coderr=2; return;} // Если запрашивается изменение регистра больше имеющихся
    12f8:	11 34       	cpi	r17, 0x41	; 65
    12fa:	18 f4       	brcc	.+6      	; 0x1302 <MODBUS_K16+0x1c>

// --- Выполню запись в регистры  ---
for(b = SubFunc, c = 0; b < d; b++) // заполняем
    12fc:	c1 17       	cp	r28, r17
    12fe:	28 f0       	brcs	.+10     	; 0x130a <MODBUS_K16+0x24>
    1300:	59 c0       	rjmp	.+178    	; 0x13b4 <MODBUS_K16+0xce>
unsigned char b,d,c;

asm("wdr");

d = SubFunc + Data; // Считаю макс адрес записываемого регистра
if(d > maxAddrRegHOLD) {m_coderr=2; return;} // Если запрашивается изменение регистра больше имеющихся
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	80 93 84 01 	sts	0x0184, r24
    1308:	79 c0       	rjmp	.+242    	; 0x13fc <MODBUS_K16+0x116>

// --- Выполню запись в регистры  ---
for(b = SubFunc, c = 0; b < d; b++) // заполняем
    130a:	d0 e0       	ldi	r29, 0x00	; 0
 {
  MB_Hreg[b] = (_UART_RX_dup[7+(c*2)] << 8) | _UART_RX_dup[8+(c*2)]; // Это просто в Holding
    130c:	ed 2f       	mov	r30, r29
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	ee 0f       	add	r30, r30
    1312:	ff 1f       	adc	r31, r31
    1314:	ac 2f       	mov	r26, r28
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	aa 0f       	add	r26, r26
    131a:	bb 1f       	adc	r27, r27
    131c:	ad 5d       	subi	r26, 0xDD	; 221
    131e:	bc 4f       	sbci	r27, 0xFC	; 252
    1320:	eb 5f       	subi	r30, 0xFB	; 251
    1322:	fe 4f       	sbci	r31, 0xFE	; 254
    1324:	87 81       	ldd	r24, Z+7	; 0x07
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	98 2f       	mov	r25, r24
    132a:	88 27       	eor	r24, r24
    132c:	20 85       	ldd	r18, Z+8	; 0x08
    132e:	82 2b       	or	r24, r18
    1330:	8d 93       	st	X+, r24
    1332:	9c 93       	st	X, r25
  // --- Для контроллера КМ01-3200.М ---
  #ifdef _KM3200_
  if(b == 6) wr_mcnt();	// если это конфигурация счетчиков - записать новое значение в EEPROM
    1334:	c6 30       	cpi	r28, 0x06	; 6
    1336:	19 f4       	brne	.+6      	; 0x133e <MODBUS_K16+0x58>
    1338:	0e 94 00 04 	call	0x800	; 0x800 <wr_mcnt>
    133c:	36 c0       	rjmp	.+108    	; 0x13aa <MODBUS_K16+0xc4>
  else if(b == 7) wr_vcnt1();	// если это значение делителя для счетчика №1 - записать новое значение в EEPROM
    133e:	c7 30       	cpi	r28, 0x07	; 7
    1340:	19 f4       	brne	.+6      	; 0x1348 <MODBUS_K16+0x62>
    1342:	0e 94 0c 04 	call	0x818	; 0x818 <wr_vcnt1>
    1346:	31 c0       	rjmp	.+98     	; 0x13aa <MODBUS_K16+0xc4>
  else if(b == 8) wr_vcnt2();	// если это значение делителя для счетчика №2 - записать новое значение в EEPROM
    1348:	c8 30       	cpi	r28, 0x08	; 8
    134a:	19 f4       	brne	.+6      	; 0x1352 <MODBUS_K16+0x6c>
    134c:	0e 94 34 04 	call	0x868	; 0x868 <wr_vcnt2>
    1350:	2c c0       	rjmp	.+88     	; 0x13aa <MODBUS_K16+0xc4>
  else if(b == 9) wr_vcnt3();	// если это значение делителя для счетчика №3 - записать новое значение в EEPROM
    1352:	c9 30       	cpi	r28, 0x09	; 9
    1354:	19 f4       	brne	.+6      	; 0x135c <MODBUS_K16+0x76>
    1356:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <wr_vcnt3>
    135a:	27 c0       	rjmp	.+78     	; 0x13aa <MODBUS_K16+0xc4>
  else if(b == 10) wr_vhcnt1();	// если это старшее опорное слово для счетчика №1 - записать новое значение в EEPROM
    135c:	ca 30       	cpi	r28, 0x0A	; 10
    135e:	19 f4       	brne	.+6      	; 0x1366 <MODBUS_K16+0x80>
    1360:	0e 94 26 04 	call	0x84c	; 0x84c <wr_vhcnt1>
    1364:	22 c0       	rjmp	.+68     	; 0x13aa <MODBUS_K16+0xc4>
  else if(b == 11) wr_vlcnt1();	// если это младшее опорное слово для счетчика №1 - записать новое значение в EEPROM
    1366:	cb 30       	cpi	r28, 0x0B	; 11
    1368:	19 f4       	brne	.+6      	; 0x1370 <MODBUS_K16+0x8a>
    136a:	0e 94 18 04 	call	0x830	; 0x830 <wr_vlcnt1>
    136e:	1d c0       	rjmp	.+58     	; 0x13aa <MODBUS_K16+0xc4>
  else if(b == 12) wr_vhcnt2();	// если это старшее опорное слово для счетчика №2 - записать новое значение в EEPROM
    1370:	cc 30       	cpi	r28, 0x0C	; 12
    1372:	19 f4       	brne	.+6      	; 0x137a <MODBUS_K16+0x94>
    1374:	0e 94 4e 04 	call	0x89c	; 0x89c <wr_vhcnt2>
    1378:	18 c0       	rjmp	.+48     	; 0x13aa <MODBUS_K16+0xc4>
  else if(b == 13) wr_vlcnt2();	// если это младшее опорное слово для счетчика №2 - записать новое значение в EEPROM
    137a:	cd 30       	cpi	r28, 0x0D	; 13
    137c:	19 f4       	brne	.+6      	; 0x1384 <MODBUS_K16+0x9e>
    137e:	0e 94 40 04 	call	0x880	; 0x880 <wr_vlcnt2>
    1382:	13 c0       	rjmp	.+38     	; 0x13aa <MODBUS_K16+0xc4>
  else if(b == 14) wr_vhcnt3();	// если это старшее опорное слово для счетчика №3 - записать новое значение в EEPROM
    1384:	ce 30       	cpi	r28, 0x0E	; 14
    1386:	19 f4       	brne	.+6      	; 0x138e <MODBUS_K16+0xa8>
    1388:	0e 94 76 04 	call	0x8ec	; 0x8ec <wr_vhcnt3>
    138c:	0e c0       	rjmp	.+28     	; 0x13aa <MODBUS_K16+0xc4>
  else if(b == 15) wr_vlcnt3();	// если это младшее опорное слово для счетчика №3 - записать новое значение в EEPROM
    138e:	cf 30       	cpi	r28, 0x0F	; 15
    1390:	19 f4       	brne	.+6      	; 0x1398 <MODBUS_K16+0xb2>
    1392:	0e 94 68 04 	call	0x8d0	; 0x8d0 <wr_vlcnt3>
    1396:	09 c0       	rjmp	.+18     	; 0x13aa <MODBUS_K16+0xc4>
  else if(b == 29) wr_adr();	// если это адрес контроллера - записать новое значение в EEPROM
    1398:	cd 31       	cpi	r28, 0x1D	; 29
    139a:	19 f4       	brne	.+6      	; 0x13a2 <MODBUS_K16+0xbc>
    139c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <wr_adr>
    13a0:	04 c0       	rjmp	.+8      	; 0x13aa <MODBUS_K16+0xc4>
  else if(b == 30) wr_par();	// если это параметры сети - записать новое значение в EEPROM
    13a2:	ce 31       	cpi	r28, 0x1E	; 30
    13a4:	11 f4       	brne	.+4      	; 0x13aa <MODBUS_K16+0xc4>
    13a6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <wr_par>
  #endif
  c++;
    13aa:	df 5f       	subi	r29, 0xFF	; 255

d = SubFunc + Data; // Считаю макс адрес записываемого регистра
if(d > maxAddrRegHOLD) {m_coderr=2; return;} // Если запрашивается изменение регистра больше имеющихся

// --- Выполню запись в регистры  ---
for(b = SubFunc, c = 0; b < d; b++) // заполняем
    13ac:	cf 5f       	subi	r28, 0xFF	; 255
    13ae:	c1 17       	cp	r28, r17
    13b0:	08 f4       	brcc	.+2      	; 0x13b4 <MODBUS_K16+0xce>
    13b2:	ac cf       	rjmp	.-168    	; 0x130c <MODBUS_K16+0x26>
  #endif
  c++;
 }
 // ----------------- Составляем ответ ---------------------------------------------
b = 0;
 _UART_TX_Buf[b++] = Address_device & 0xFF;   // Запишем адрес контроллера
    13b4:	80 91 0d 02 	lds	r24, 0x020D
    13b8:	80 93 0f 02 	sts	0x020F, r24
 _UART_TX_Buf[b++] = Func; 		  // Запишем выполненую команду
    13bc:	80 91 09 02 	lds	r24, 0x0209
    13c0:	80 93 10 02 	sts	0x0210, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[2];		  // Запишем ст. байт начального адреса регистра
    13c4:	80 91 07 01 	lds	r24, 0x0107
    13c8:	80 93 11 02 	sts	0x0211, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[3];		  // Запишем мл. байт начального адреса регистра
    13cc:	80 91 08 01 	lds	r24, 0x0108
    13d0:	80 93 12 02 	sts	0x0212, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[4];		  // Запишем ст. байт кол-ва записаных регистров
    13d4:	80 91 09 01 	lds	r24, 0x0109
    13d8:	80 93 13 02 	sts	0x0213, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[5];		  // Запишем мл. байт кол-ва записаных регистров
    13dc:	80 91 0a 01 	lds	r24, 0x010A
    13e0:	80 93 14 02 	sts	0x0214, r24
// --- Подсчет CRC ---
 n = _CRC_calc(_UART_TX_Buf,b);				// Считаем CRC
    13e4:	66 e0       	ldi	r22, 0x06	; 6
    13e6:	8f e0       	ldi	r24, 0x0F	; 15
    13e8:	92 e0       	ldi	r25, 0x02	; 2
    13ea:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_CRC_calc>
 _UART_TX_Buf[b++] = n & 0xFF;	  		  // Пишем младший байт - вначале передаем младший байт
    13ee:	80 93 15 02 	sts	0x0215, r24
 _UART_TX_Buf[b++] = ((n >> 8) & 0xFF);  // Пишем старший байт - затем старший байт
    13f2:	90 93 16 02 	sts	0x0216, r25

_UART_TX_length = b;	  	  				// Запишем кол - во передаваемых байт из буфера
    13f6:	88 e0       	ldi	r24, 0x08	; 8
    13f8:	80 93 a3 02 	sts	0x02A3, r24
}
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	08 95       	ret

00001404 <MODBUS_RTU>:
	buf[2]+buf[3]		- Код подфункции (адрес элемента)
	buf[4]+buf[5]		- Данные (для функций 0x05, 0x06 записываемые данные, для 0x01-0x04 количество считываемых данных)
	buf[6]+buf[7]		- CRC свертка (контрольная сумма стандарта Modbus RTU)
	*/
unsigned int q;
asm("wdr");
    1404:	a8 95       	wdr
// --------------- Заполню полученными данными рабочие регистры -----------------------------------------------
m_coderr = 0;											// Код ошибки изначально = 0
    1406:	10 92 84 01 	sts	0x0184, r1
Func = _UART_RX_dup[1];									// Получим выполняемую комманду
    140a:	20 91 06 01 	lds	r18, 0x0106
    140e:	20 93 09 02 	sts	0x0209, r18
SubFunc = (_UART_RX_dup[2]<<8) | _UART_RX_dup[3];		// Получим начальный адрес регистрового поля из запроса
    1412:	80 91 07 01 	lds	r24, 0x0107
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	98 2f       	mov	r25, r24
    141a:	88 27       	eor	r24, r24
    141c:	30 91 08 01 	lds	r19, 0x0108
    1420:	83 2b       	or	r24, r19
    1422:	90 93 8f 02 	sts	0x028F, r25
    1426:	80 93 8e 02 	sts	0x028E, r24
Data = (_UART_RX_dup[4]<<8) | _UART_RX_dup[5];	// Получим кол-во запрашиваемых квантов
    142a:	80 91 09 01 	lds	r24, 0x0109
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	98 2f       	mov	r25, r24
    1432:	88 27       	eor	r24, r24
    1434:	30 91 0a 01 	lds	r19, 0x010A
    1438:	83 2b       	or	r24, r19
    143a:	90 93 0b 02 	sts	0x020B, r25
    143e:	80 93 0a 02 	sts	0x020A, r24
_UART_TX_length = 0; // Обнулю кол-во байт для передачи
    1442:	10 92 a3 02 	sts	0x02A3, r1

if((Func == 5) || (Func == 6)) Data = 1; // --- если команда 5 или 6 то по умолчанию - количество запросов = 1
    1446:	8b ef       	ldi	r24, 0xFB	; 251
    1448:	82 0f       	add	r24, r18
    144a:	82 30       	cpi	r24, 0x02	; 2
    144c:	38 f4       	brcc	.+14     	; 0x145c <MODBUS_RTU+0x58>
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	90 93 0b 02 	sts	0x020B, r25
    1456:	80 93 0a 02 	sts	0x020A, r24
    145a:	0a c0       	rjmp	.+20     	; 0x1470 <MODBUS_RTU+0x6c>

// ---------------------------- Выполним команды ---------------------------------------------------------------
//------------Проверка параметров на допустимость ---------------------
if (Data==0)	//запросили 0 квантов - для других команд кроме 5 и 6
    145c:	80 91 0a 02 	lds	r24, 0x020A
    1460:	90 91 0b 02 	lds	r25, 0x020B
    1464:	89 2b       	or	r24, r25
    1466:	21 f4       	brne	.+8      	; 0x1470 <MODBUS_RTU+0x6c>
 {
 m_coderr=3; // Установим код ошибки - неверный адрес регистра
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	80 93 84 01 	sts	0x0184, r24
    146e:	54 c0       	rjmp	.+168    	; 0x1518 <MODBUS_RTU+0x114>
 }/*---------------------------- k1 -----------------------------------*/	
else if (Func == 1)//чтение дискретного выхода DO[1...16]
    1470:	21 30       	cpi	r18, 0x01	; 1
    1472:	19 f4       	brne	.+6      	; 0x147a <MODBUS_RTU+0x76>
 {
  MODBUS_K1_2();
    1474:	0e 94 08 07 	call	0xe10	; 0xe10 <MODBUS_K1_2>
    1478:	27 c0       	rjmp	.+78     	; 0x14c8 <MODBUS_RTU+0xc4>
 }	
/*---------------------------- k2 -----------------------------------*/	
else if (Func == 2)//чтение дискретного входа DI[1...16]
    147a:	22 30       	cpi	r18, 0x02	; 2
    147c:	19 f4       	brne	.+6      	; 0x1484 <MODBUS_RTU+0x80>
 {// 
 MODBUS_K1_2();  
    147e:	0e 94 08 07 	call	0xe10	; 0xe10 <MODBUS_K1_2>
    1482:	22 c0       	rjmp	.+68     	; 0x14c8 <MODBUS_RTU+0xc4>
 }	
/*---------------------------- k3 -----------------------------------*/	
else if (Func == 3)//чтение нескольких регистров Holding[1...16]
    1484:	23 30       	cpi	r18, 0x03	; 3
    1486:	19 f4       	brne	.+6      	; 0x148e <MODBUS_RTU+0x8a>
 {// 
 MODBUS_K3_4();  
    1488:	0e 94 b9 07 	call	0xf72	; 0xf72 <MODBUS_K3_4>
    148c:	1d c0       	rjmp	.+58     	; 0x14c8 <MODBUS_RTU+0xc4>
 }
/*---------------------------- k4 -----------------------------------*/	
else if (Func == 4)//чтение нескольких регистров Input [1...16]
    148e:	24 30       	cpi	r18, 0x04	; 4
    1490:	19 f4       	brne	.+6      	; 0x1498 <MODBUS_RTU+0x94>
 {// 
 MODBUS_K3_4();  
    1492:	0e 94 b9 07 	call	0xf72	; 0xf72 <MODBUS_K3_4>
    1496:	18 c0       	rjmp	.+48     	; 0x14c8 <MODBUS_RTU+0xc4>
 }
/*---------------------------- k5 -----------------------------------*/		
else if (Func == 5)//Установка (запись) дискретного вывода DO[1...16]
    1498:	25 30       	cpi	r18, 0x05	; 5
    149a:	19 f4       	brne	.+6      	; 0x14a2 <MODBUS_RTU+0x9e>
 {
 MODBUS_K5();				  
    149c:	0e 94 32 08 	call	0x1064	; 0x1064 <MODBUS_K5>
    14a0:	13 c0       	rjmp	.+38     	; 0x14c8 <MODBUS_RTU+0xc4>
 }
/*---------------------------- k6 -----------------------------------*/		
else if (Func == 6)//Установка (запись) одного регистра Holding
    14a2:	26 30       	cpi	r18, 0x06	; 6
    14a4:	19 f4       	brne	.+6      	; 0x14ac <MODBUS_RTU+0xa8>
 {
 MODBUS_K6();				  
    14a6:	0e 94 7d 08 	call	0x10fa	; 0x10fa <MODBUS_K6>
    14aa:	0e c0       	rjmp	.+28     	; 0x14c8 <MODBUS_RTU+0xc4>
 }
/*---------------------------- k15 -----------------------------------*/		
else if (Func == 15)//Установка (запись) нескольких дискретных выходов DO[1...16]
    14ac:	2f 30       	cpi	r18, 0x0F	; 15
    14ae:	19 f4       	brne	.+6      	; 0x14b6 <MODBUS_RTU+0xb2>
 {
 MODBUS_K15();				  
    14b0:	0e 94 03 09 	call	0x1206	; 0x1206 <MODBUS_K15>
    14b4:	09 c0       	rjmp	.+18     	; 0x14c8 <MODBUS_RTU+0xc4>
 }
/*---------------------------- k16 -----------------------------------*/	
else if (Func == 16)//Установка (запись) нескольких регистров Holding[1...16]
    14b6:	20 31       	cpi	r18, 0x10	; 16
    14b8:	19 f4       	brne	.+6      	; 0x14c0 <MODBUS_RTU+0xbc>
 {
 MODBUS_K16();				 
    14ba:	0e 94 73 09 	call	0x12e6	; 0x12e6 <MODBUS_K16>
    14be:	04 c0       	rjmp	.+8      	; 0x14c8 <MODBUS_RTU+0xc4>
 }
else m_coderr=1; // Не правильно задана функция для данного контроллера (не совпала ни одна команда)
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	80 93 84 01 	sts	0x0184, r24
    14c6:	28 c0       	rjmp	.+80     	; 0x1518 <MODBUS_RTU+0x114>

/* ------ Здесь надо составить ответ или ОШИБКА если он еще не составлен ------- */
if(m_coderr == 0)   // --- Если ошибки нет ---
    14c8:	80 91 84 01 	lds	r24, 0x0184
    14cc:	81 11       	cpse	r24, r1
    14ce:	08 c0       	rjmp	.+16     	; 0x14e0 <MODBUS_RTU+0xdc>
 {
 if(_UART_TX_length != 0)  _UART_Go(_UART_TX_length); // и есть байты для отправки то - Активизировать порт передачи
    14d0:	80 91 a3 02 	lds	r24, 0x02A3
    14d4:	88 23       	and	r24, r24
    14d6:	19 f1       	breq	.+70     	; 0x151e <MODBUS_RTU+0x11a>
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 76 06 	call	0xcec	; 0xcec <_UART_Go>
    14de:	08 95       	ret
 }
else		 	   // --- ОШИБКА - надо отослать фрейм ошибки ---
 {
  _UART_TX_Buf[0] = Address_device & 0xFF;	// Запишем адрес контроллера
    14e0:	90 91 0d 02 	lds	r25, 0x020D
    14e4:	90 93 0f 02 	sts	0x020F, r25
  _UART_TX_Buf[1] = (Func | 0x80); 			// Запишем выполненую команду с уст. флагом ошибки
    14e8:	90 91 09 02 	lds	r25, 0x0209
    14ec:	90 68       	ori	r25, 0x80	; 128
    14ee:	90 93 10 02 	sts	0x0210, r25
  _UART_TX_Buf[2] = m_coderr;	  			// Пишем код ошибки
    14f2:	80 93 11 02 	sts	0x0211, r24
  // -------------- Кол - во целых бай для подсчета CRC --------------------
  q = _CRC_calc(_UART_TX_Buf,3);		// Считаем CRC
    14f6:	63 e0       	ldi	r22, 0x03	; 3
    14f8:	8f e0       	ldi	r24, 0x0F	; 15
    14fa:	92 e0       	ldi	r25, 0x02	; 2
    14fc:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_CRC_calc>
  _UART_TX_Buf[3] = q & 0xFF;	  		// Пишем младший байт - вначале передаем младший байт
    1500:	80 93 12 02 	sts	0x0212, r24
  _UART_TX_Buf[4] = ((q >> 8) & 0xFF);	// Пишем старший байт - затем старший байт
    1504:	90 93 13 02 	sts	0x0213, r25
  _UART_TX_length = 5;	  	  			// Запишем кол - во передаваемых байт из буфера NetTxData
    1508:	85 e0       	ldi	r24, 0x05	; 5
    150a:	80 93 a3 02 	sts	0x02A3, r24
  _UART_Go(_UART_TX_length);			// Активизировать порт передачи
    150e:	85 e0       	ldi	r24, 0x05	; 5
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 76 06 	call	0xcec	; 0xcec <_UART_Go>
    1516:	08 95       	ret
 MODBUS_K16();				 
 }
else m_coderr=1; // Не правильно задана функция для данного контроллера (не совпала ни одна команда)

/* ------ Здесь надо составить ответ или ОШИБКА если он еще не составлен ------- */
if(m_coderr == 0)   // --- Если ошибки нет ---
    1518:	80 91 84 01 	lds	r24, 0x0184
    151c:	e1 cf       	rjmp	.-62     	; 0x14e0 <MODBUS_RTU+0xdc>
    151e:	08 95       	ret

00001520 <takt_timer>:
}
*/
// ============ takt_timer выполняется по прерыванию каждые 10 мсек =================
void takt_timer(void)
{  unsigned char n;
	n = TimerTakt;
    1520:	80 91 04 01 	lds	r24, 0x0104
	if (n) TimerTakt = --n;		// Время выполнения основного цикла
    1524:	88 23       	and	r24, r24
    1526:	19 f0       	breq	.+6      	; 0x152e <takt_timer+0xe>
    1528:	81 50       	subi	r24, 0x01	; 1
    152a:	80 93 04 01 	sts	0x0104, r24
	n = TimerLed;
    152e:	80 91 0c 02 	lds	r24, 0x020C
	if (n) TimerLed = --n;		// Уменьшить счетчик
    1532:	88 23       	and	r24, r24
    1534:	19 f0       	breq	.+6      	; 0x153c <takt_timer+0x1c>
    1536:	81 50       	subi	r24, 0x01	; 1
    1538:	80 93 0c 02 	sts	0x020C, r24
    153c:	08 95       	ret

0000153e <__vector_13>:
}
// ============ Обработка прерывания таймера 1 (каждые 10 мсек) =====================
ISR(TIMER1_OVF_vect)
{
    153e:	1f 92       	push	r1
    1540:	0f 92       	push	r0
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	0f 92       	push	r0
    1546:	11 24       	eor	r1, r1
    1548:	2f 93       	push	r18
    154a:	3f 93       	push	r19
    154c:	4f 93       	push	r20
    154e:	5f 93       	push	r21
    1550:	6f 93       	push	r22
    1552:	7f 93       	push	r23
    1554:	8f 93       	push	r24
    1556:	9f 93       	push	r25
    1558:	af 93       	push	r26
    155a:	bf 93       	push	r27
    155c:	ef 93       	push	r30
    155e:	ff 93       	push	r31
	TCNT1H = 0xFF;
    1560:	8f ef       	ldi	r24, 0xFF	; 255
    1562:	80 93 85 00 	sts	0x0085, r24
	TCNT1L = 255 - 144;
    1566:	8f e6       	ldi	r24, 0x6F	; 111
    1568:	80 93 84 00 	sts	0x0084, r24
	takt_timer();
    156c:	0e 94 90 0a 	call	0x1520	; 0x1520 <takt_timer>
}
    1570:	ff 91       	pop	r31
    1572:	ef 91       	pop	r30
    1574:	bf 91       	pop	r27
    1576:	af 91       	pop	r26
    1578:	9f 91       	pop	r25
    157a:	8f 91       	pop	r24
    157c:	7f 91       	pop	r23
    157e:	6f 91       	pop	r22
    1580:	5f 91       	pop	r21
    1582:	4f 91       	pop	r20
    1584:	3f 91       	pop	r19
    1586:	2f 91       	pop	r18
    1588:	0f 90       	pop	r0
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	0f 90       	pop	r0
    158e:	1f 90       	pop	r1
    1590:	18 95       	reti

00001592 <Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1592:	2f ef       	ldi	r18, 0xFF	; 255
    1594:	3f e7       	ldi	r19, 0x7F	; 127
    1596:	86 e1       	ldi	r24, 0x16	; 22
    1598:	21 50       	subi	r18, 0x01	; 1
    159a:	30 40       	sbci	r19, 0x00	; 0
    159c:	80 40       	sbci	r24, 0x00	; 0
    159e:	e1 f7       	brne	.-8      	; 0x1598 <Init+0x6>
    15a0:	00 c0       	rjmp	.+0      	; 0x15a2 <Init+0x10>
    15a2:	00 00       	nop
void Init(void)
{
unsigned char i;

	_delay_ms(500);		// Задержка при старте
	InitLine();			// Настраиваю порты контроллера
    15a4:	0e 94 5e 00 	call	0xbc	; 0xbc <InitLine>
//	InitWdt();			// Настройка сторожевого таймера (пока в резерве)
	LD_on;				// Включить красный светодиод
    15a8:	28 9a       	sbi	0x05, 0	; 5
	WDR();				// Сброс собачьего таймера
    15aa:	a8 95       	wdr
    15ac:	9f ef       	ldi	r25, 0xFF	; 255
    15ae:	2f e7       	ldi	r18, 0x7F	; 127
    15b0:	36 e1       	ldi	r19, 0x16	; 22
    15b2:	91 50       	subi	r25, 0x01	; 1
    15b4:	20 40       	sbci	r18, 0x00	; 0
    15b6:	30 40       	sbci	r19, 0x00	; 0
    15b8:	e1 f7       	brne	.-8      	; 0x15b2 <Init+0x20>
    15ba:	00 c0       	rjmp	.+0      	; 0x15bc <Init+0x2a>
    15bc:	00 00       	nop
    15be:	e7 e8       	ldi	r30, 0x87	; 135
    15c0:	f1 e0       	ldi	r31, 0x01	; 1
    15c2:	87 e0       	ldi	r24, 0x07	; 7
    15c4:	92 e0       	ldi	r25, 0x02	; 2
	_delay_ms(500);		// Задержка при старте
	for(i=0; i<maxAddrRegINP; i++) { MB_Ireg[i] = 0; }	// Очистить INPUT регистры
    15c6:	11 92       	st	Z+, r1
    15c8:	11 92       	st	Z+, r1
    15ca:	e8 17       	cp	r30, r24
    15cc:	f9 07       	cpc	r31, r25
    15ce:	d9 f7       	brne	.-10     	; 0x15c6 <Init+0x34>
    15d0:	e3 e2       	ldi	r30, 0x23	; 35
    15d2:	f3 e0       	ldi	r31, 0x03	; 3
    15d4:	83 ea       	ldi	r24, 0xA3	; 163
    15d6:	93 e0       	ldi	r25, 0x03	; 3
	for(i=0; i<maxAddrRegHOLD; i++) { MB_Hreg[i] = 0; }	// Очистить HOLD регистры
    15d8:	11 92       	st	Z+, r1
    15da:	11 92       	st	Z+, r1
    15dc:	e8 17       	cp	r30, r24
    15de:	f9 07       	cpc	r31, r25
    15e0:	d9 f7       	brne	.-10     	; 0x15d8 <Init+0x46>
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	9f e7       	ldi	r25, 0x7F	; 127
    15e6:	24 e0       	ldi	r18, 0x04	; 4
    15e8:	81 50       	subi	r24, 0x01	; 1
    15ea:	90 40       	sbci	r25, 0x00	; 0
    15ec:	20 40       	sbci	r18, 0x00	; 0
    15ee:	e1 f7       	brne	.-8      	; 0x15e8 <Init+0x56>
    15f0:	00 c0       	rjmp	.+0      	; 0x15f2 <Init+0x60>
    15f2:	00 00       	nop
	_delay_ms(100);		// Задержка
	WDR();				// Сброс собачьего таймера
    15f4:	a8 95       	wdr
	if((PIND & 0x20) == 0) 
    15f6:	4d 99       	sbic	0x09, 5	; 9
    15f8:	19 c0       	rjmp	.+50     	; 0x162c <Init+0x9a>
		{ 
			set_default(); 
    15fa:	0e 94 b1 02 	call	0x562	; 0x562 <set_default>
    15fe:	85 e0       	ldi	r24, 0x05	; 5
			for(i=0; i<5; i++) // Моргнуть 5 раз!
			{
			LD_on; 
    1600:	28 9a       	sbi	0x05, 0	; 5
    1602:	3f ef       	ldi	r19, 0xFF	; 255
    1604:	9f e7       	ldi	r25, 0x7F	; 127
    1606:	24 e0       	ldi	r18, 0x04	; 4
    1608:	31 50       	subi	r19, 0x01	; 1
    160a:	90 40       	sbci	r25, 0x00	; 0
    160c:	20 40       	sbci	r18, 0x00	; 0
    160e:	e1 f7       	brne	.-8      	; 0x1608 <Init+0x76>
    1610:	00 c0       	rjmp	.+0      	; 0x1612 <Init+0x80>
    1612:	00 00       	nop
			_delay_ms(100); 
			LD_off; 
    1614:	28 98       	cbi	0x05, 0	; 5
    1616:	3f ef       	ldi	r19, 0xFF	; 255
    1618:	9f e7       	ldi	r25, 0x7F	; 127
    161a:	24 e0       	ldi	r18, 0x04	; 4
    161c:	31 50       	subi	r19, 0x01	; 1
    161e:	90 40       	sbci	r25, 0x00	; 0
    1620:	20 40       	sbci	r18, 0x00	; 0
    1622:	e1 f7       	brne	.-8      	; 0x161c <Init+0x8a>
    1624:	00 c0       	rjmp	.+0      	; 0x1626 <Init+0x94>
    1626:	00 00       	nop
    1628:	81 50       	subi	r24, 0x01	; 1
	_delay_ms(100);		// Задержка
	WDR();				// Сброс собачьего таймера
	if((PIND & 0x20) == 0) 
		{ 
			set_default(); 
			for(i=0; i<5; i++) // Моргнуть 5 раз!
    162a:	51 f7       	brne	.-44     	; 0x1600 <Init+0x6e>
			_delay_ms(100); 
			LD_off; 
			_delay_ms(100); 
			}
		}
	WDR();						// Сброс собачьего таймера
    162c:	a8 95       	wdr
	InitMem();					// Заполняю регистры Модбас данными из памяти
    162e:	0e 94 84 04 	call	0x908	; 0x908 <InitMem>
	CNT_clear();				// Очистить счетные регистры
    1632:	0e 94 1a 02 	call	0x434	; 0x434 <CNT_clear>
	WDR();						// Сброс собачьего таймера
    1636:	a8 95       	wdr
	InitDev();					// Инициализация внутренних систем контроллера
    1638:	0e 94 68 00 	call	0xd0	; 0xd0 <InitDev>
	LD_off;						// Выключить красный светодиод
    163c:	28 98       	cbi	0x05, 0	; 5
	WDR();						// Сброс собачьего таймера
    163e:	a8 95       	wdr
    1640:	3f ef       	ldi	r19, 0xFF	; 255
    1642:	8f ef       	ldi	r24, 0xFF	; 255
    1644:	9c e2       	ldi	r25, 0x2C	; 44
    1646:	31 50       	subi	r19, 0x01	; 1
    1648:	80 40       	sbci	r24, 0x00	; 0
    164a:	90 40       	sbci	r25, 0x00	; 0
    164c:	e1 f7       	brne	.-8      	; 0x1646 <Init+0xb4>
    164e:	00 c0       	rjmp	.+0      	; 0x1650 <Init+0xbe>
    1650:	00 00       	nop
	_delay_ms(1000);			// Задержка
	WDR();						// Сброс собачьего таймера
    1652:	a8 95       	wdr
	INP_Read();					// Считываю текущие состояния входов
    1654:	0e 94 c7 00 	call	0x18e	; 0x18e <INP_Read>
	COM_Init((char) MB_Hreg[30],(char) (MB_Hreg[30] >> 8)); // Настраиваю UART0 для работы RS-485
    1658:	ef e5       	ldi	r30, 0x5F	; 95
    165a:	f3 e0       	ldi	r31, 0x03	; 3
    165c:	61 81       	ldd	r22, Z+1	; 0x01
    165e:	80 81       	ld	r24, Z
    1660:	0e 94 4d 05 	call	0xa9a	; 0xa9a <COM_Init>
	Address_device = (char) MB_Hreg[29];					// Переписываю адрес контроллера в сети ModBus
    1664:	80 91 5d 03 	lds	r24, 0x035D
    1668:	80 93 0d 02 	sts	0x020D, r24
	// ----- Настраиваю работу таймера №1 ----
	TCCR1B = (1 << CS12)|(1<< CS10);	// Timer1 / 1024 - делим тактовую на 1024
    166c:	85 e0       	ldi	r24, 0x05	; 5
    166e:	80 93 81 00 	sts	0x0081, r24
	TCNT1H = 0xFF;
    1672:	8f ef       	ldi	r24, 0xFF	; 255
    1674:	80 93 85 00 	sts	0x0085, r24
	TCNT1L = 255 - (F_CPU / 1024 / 100);	// Прерывания каждые 10мсек!
    1678:	8f e6       	ldi	r24, 0x6F	; 111
    167a:	80 93 84 00 	sts	0x0084, r24
	TIMSK1 |= (1<<TOIE1);					// Включить прерывания Timer 1 при переполнении
    167e:	ef e6       	ldi	r30, 0x6F	; 111
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	81 60       	ori	r24, 0x01	; 1
    1686:	80 83       	st	Z, r24
    1688:	08 95       	ret

0000168a <command_reboot>:

// =========================== Команда перезагрузки контроллера ====================================================
void command_reboot(void)
{
//if((MB_Hreg[63] &0x01) != 0) {cli(); while(1);} // Перезагрузка по сбросу собачьего таймера (пока в резерве)
if((MB_Hreg[31] &0x01) != 0) { _delay_ms(20); asm("rjmp restart;");} // Если есть 1 то перейти на метку перезагрузки
    168a:	80 91 61 03 	lds	r24, 0x0361
    168e:	80 ff       	sbrs	r24, 0
    1690:	08 c0       	rjmp	.+16     	; 0x16a2 <command_reboot+0x18>
    1692:	26 e6       	ldi	r18, 0x66	; 102
    1694:	86 ee       	ldi	r24, 0xE6	; 230
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	21 50       	subi	r18, 0x01	; 1
    169a:	80 40       	sbci	r24, 0x00	; 0
    169c:	90 40       	sbci	r25, 0x00	; 0
    169e:	e1 f7       	brne	.-8      	; 0x1698 <command_reboot+0xe>
    16a0:	0b c0       	rjmp	.+22     	; 0x16b8 <restart>
    16a2:	08 95       	ret

000016a4 <main>:
}

int main(void)
{
	// --- Инициализация ---
	cli();
    16a4:	f8 94       	cli
    16a6:	2f ef       	ldi	r18, 0xFF	; 255
    16a8:	8f e7       	ldi	r24, 0x7F	; 127
    16aa:	96 e1       	ldi	r25, 0x16	; 22
    16ac:	21 50       	subi	r18, 0x01	; 1
    16ae:	80 40       	sbci	r24, 0x00	; 0
    16b0:	90 40       	sbci	r25, 0x00	; 0
    16b2:	e1 f7       	brne	.-8      	; 0x16ac <main+0x8>
    16b4:	00 c0       	rjmp	.+0      	; 0x16b6 <main+0x12>
	...

000016b8 <restart>:
	_delay_ms(500);	// Задержка при старте
asm("restart:");	// Метка для перехода по команде перезагрузки
	Init();			// Инициализация системы...
    16b8:	0e 94 c9 0a 	call	0x1592	; 0x1592 <Init>
	sei();			// Разрешить глобальные прерывания	
    16bc:	78 94       	sei
	TimerTakt = 10; // Задачу выполнять каждые 100мсек
    16be:	8a e0       	ldi	r24, 0x0A	; 10
    16c0:	80 93 04 01 	sts	0x0104, r24
	while(1)
	{
	WDR(); // Сброс собачьего таймера
		if(Read_Modbus() == 1)	{TimerLed = 10; MODBUS_RTU();}	// Если пакет принят, обработать принятый пакет ModBus
    16c4:	1a e0       	ldi	r17, 0x0A	; 10
			//**************************************************************************************
			OUT_Update();		// Обновить состояние дискретных выходов
			rd_cnt();			// Обновить показания счетчиков
			command_reboot();	// Проверить команду - не пора ли перезагрузиться???
			// === Формирую слово жизни контроллера ===
			if(MB_Ireg[0] <= 0xFFFA) MB_Ireg[0]++;
    16c6:	c7 e8       	ldi	r28, 0x87	; 135
    16c8:	d1 e0       	ldi	r29, 0x01	; 1
	Init();			// Инициализация системы...
	sei();			// Разрешить глобальные прерывания	
	TimerTakt = 10; // Задачу выполнять каждые 100мсек
	while(1)
	{
	WDR(); // Сброс собачьего таймера
    16ca:	a8 95       	wdr
		if(Read_Modbus() == 1)	{TimerLed = 10; MODBUS_RTU();}	// Если пакет принят, обработать принятый пакет ModBus
    16cc:	0e 94 cf 06 	call	0xd9e	; 0xd9e <Read_Modbus>
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	21 f4       	brne	.+8      	; 0x16dc <restart+0x24>
    16d4:	10 93 0c 02 	sts	0x020C, r17
    16d8:	0e 94 02 0a 	call	0x1404	; 0x1404 <MODBUS_RTU>
		if(TimerLed) LD_on; else LD_off; // включить светодиод на 100мсек - принят пакет с адресом модуля
    16dc:	80 91 0c 02 	lds	r24, 0x020C
    16e0:	88 23       	and	r24, r24
    16e2:	11 f0       	breq	.+4      	; 0x16e8 <restart+0x30>
    16e4:	28 9a       	sbi	0x05, 0	; 5
    16e6:	01 c0       	rjmp	.+2      	; 0x16ea <restart+0x32>
    16e8:	28 98       	cbi	0x05, 0	; 5
		if(TimerTakt == 0)
    16ea:	80 91 04 01 	lds	r24, 0x0104
    16ee:	81 11       	cpse	r24, r1
    16f0:	ec cf       	rjmp	.-40     	; 0x16ca <restart+0x12>
		{
			TimerTakt = 10; // Перезагрузка таймера - следующее выполнение программы через 10*10=100мсек
    16f2:	10 93 04 01 	sts	0x0104, r17
			// --- Состояния входов в рег Input меняются по прерываниям ---
			OUT_Read();			// Чтение состояния выходов
    16f6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <OUT_Read>
			//******************Здесь м.б. программа пользователя***********************************
			
			//**************************************************************************************
			OUT_Update();		// Обновить состояние дискретных выходов
    16fa:	0e 94 0b 02 	call	0x416	; 0x416 <OUT_Update>
			rd_cnt();			// Обновить показания счетчиков
    16fe:	0e 94 41 02 	call	0x482	; 0x482 <rd_cnt>
			command_reboot();	// Проверить команду - не пора ли перезагрузиться???
    1702:	0e 94 45 0b 	call	0x168a	; 0x168a <command_reboot>
			// === Формирую слово жизни контроллера ===
			if(MB_Ireg[0] <= 0xFFFA) MB_Ireg[0]++;
    1706:	88 81       	ld	r24, Y
    1708:	99 81       	ldd	r25, Y+1	; 0x01
    170a:	8b 3f       	cpi	r24, 0xFB	; 251
    170c:	2f ef       	ldi	r18, 0xFF	; 255
    170e:	92 07       	cpc	r25, r18
    1710:	20 f4       	brcc	.+8      	; 0x171a <restart+0x62>
    1712:	01 96       	adiw	r24, 0x01	; 1
    1714:	99 83       	std	Y+1, r25	; 0x01
    1716:	88 83       	st	Y, r24
    1718:	d8 cf       	rjmp	.-80     	; 0x16ca <restart+0x12>
			else MB_Ireg[0] = 0;
    171a:	19 82       	std	Y+1, r1	; 0x01
    171c:	18 82       	st	Y, r1
    171e:	d5 cf       	rjmp	.-86     	; 0x16ca <restart+0x12>

00001720 <__subsf3>:
    1720:	50 58       	subi	r21, 0x80	; 128

00001722 <__addsf3>:
    1722:	bb 27       	eor	r27, r27
    1724:	aa 27       	eor	r26, r26
    1726:	0e d0       	rcall	.+28     	; 0x1744 <__addsf3x>
    1728:	48 c1       	rjmp	.+656    	; 0x19ba <__fp_round>
    172a:	39 d1       	rcall	.+626    	; 0x199e <__fp_pscA>
    172c:	30 f0       	brcs	.+12     	; 0x173a <__addsf3+0x18>
    172e:	3e d1       	rcall	.+636    	; 0x19ac <__fp_pscB>
    1730:	20 f0       	brcs	.+8      	; 0x173a <__addsf3+0x18>
    1732:	31 f4       	brne	.+12     	; 0x1740 <__addsf3+0x1e>
    1734:	9f 3f       	cpi	r25, 0xFF	; 255
    1736:	11 f4       	brne	.+4      	; 0x173c <__addsf3+0x1a>
    1738:	1e f4       	brtc	.+6      	; 0x1740 <__addsf3+0x1e>
    173a:	2e c1       	rjmp	.+604    	; 0x1998 <__fp_nan>
    173c:	0e f4       	brtc	.+2      	; 0x1740 <__addsf3+0x1e>
    173e:	e0 95       	com	r30
    1740:	e7 fb       	bst	r30, 7
    1742:	24 c1       	rjmp	.+584    	; 0x198c <__fp_inf>

00001744 <__addsf3x>:
    1744:	e9 2f       	mov	r30, r25
    1746:	4a d1       	rcall	.+660    	; 0x19dc <__fp_split3>
    1748:	80 f3       	brcs	.-32     	; 0x172a <__addsf3+0x8>
    174a:	ba 17       	cp	r27, r26
    174c:	62 07       	cpc	r22, r18
    174e:	73 07       	cpc	r23, r19
    1750:	84 07       	cpc	r24, r20
    1752:	95 07       	cpc	r25, r21
    1754:	18 f0       	brcs	.+6      	; 0x175c <__addsf3x+0x18>
    1756:	71 f4       	brne	.+28     	; 0x1774 <__addsf3x+0x30>
    1758:	9e f5       	brtc	.+102    	; 0x17c0 <__addsf3x+0x7c>
    175a:	62 c1       	rjmp	.+708    	; 0x1a20 <__fp_zero>
    175c:	0e f4       	brtc	.+2      	; 0x1760 <__addsf3x+0x1c>
    175e:	e0 95       	com	r30
    1760:	0b 2e       	mov	r0, r27
    1762:	ba 2f       	mov	r27, r26
    1764:	a0 2d       	mov	r26, r0
    1766:	0b 01       	movw	r0, r22
    1768:	b9 01       	movw	r22, r18
    176a:	90 01       	movw	r18, r0
    176c:	0c 01       	movw	r0, r24
    176e:	ca 01       	movw	r24, r20
    1770:	a0 01       	movw	r20, r0
    1772:	11 24       	eor	r1, r1
    1774:	ff 27       	eor	r31, r31
    1776:	59 1b       	sub	r21, r25
    1778:	99 f0       	breq	.+38     	; 0x17a0 <__addsf3x+0x5c>
    177a:	59 3f       	cpi	r21, 0xF9	; 249
    177c:	50 f4       	brcc	.+20     	; 0x1792 <__addsf3x+0x4e>
    177e:	50 3e       	cpi	r21, 0xE0	; 224
    1780:	68 f1       	brcs	.+90     	; 0x17dc <__addsf3x+0x98>
    1782:	1a 16       	cp	r1, r26
    1784:	f0 40       	sbci	r31, 0x00	; 0
    1786:	a2 2f       	mov	r26, r18
    1788:	23 2f       	mov	r18, r19
    178a:	34 2f       	mov	r19, r20
    178c:	44 27       	eor	r20, r20
    178e:	58 5f       	subi	r21, 0xF8	; 248
    1790:	f3 cf       	rjmp	.-26     	; 0x1778 <__addsf3x+0x34>
    1792:	46 95       	lsr	r20
    1794:	37 95       	ror	r19
    1796:	27 95       	ror	r18
    1798:	a7 95       	ror	r26
    179a:	f0 40       	sbci	r31, 0x00	; 0
    179c:	53 95       	inc	r21
    179e:	c9 f7       	brne	.-14     	; 0x1792 <__addsf3x+0x4e>
    17a0:	7e f4       	brtc	.+30     	; 0x17c0 <__addsf3x+0x7c>
    17a2:	1f 16       	cp	r1, r31
    17a4:	ba 0b       	sbc	r27, r26
    17a6:	62 0b       	sbc	r22, r18
    17a8:	73 0b       	sbc	r23, r19
    17aa:	84 0b       	sbc	r24, r20
    17ac:	ba f0       	brmi	.+46     	; 0x17dc <__addsf3x+0x98>
    17ae:	91 50       	subi	r25, 0x01	; 1
    17b0:	a1 f0       	breq	.+40     	; 0x17da <__addsf3x+0x96>
    17b2:	ff 0f       	add	r31, r31
    17b4:	bb 1f       	adc	r27, r27
    17b6:	66 1f       	adc	r22, r22
    17b8:	77 1f       	adc	r23, r23
    17ba:	88 1f       	adc	r24, r24
    17bc:	c2 f7       	brpl	.-16     	; 0x17ae <__addsf3x+0x6a>
    17be:	0e c0       	rjmp	.+28     	; 0x17dc <__addsf3x+0x98>
    17c0:	ba 0f       	add	r27, r26
    17c2:	62 1f       	adc	r22, r18
    17c4:	73 1f       	adc	r23, r19
    17c6:	84 1f       	adc	r24, r20
    17c8:	48 f4       	brcc	.+18     	; 0x17dc <__addsf3x+0x98>
    17ca:	87 95       	ror	r24
    17cc:	77 95       	ror	r23
    17ce:	67 95       	ror	r22
    17d0:	b7 95       	ror	r27
    17d2:	f7 95       	ror	r31
    17d4:	9e 3f       	cpi	r25, 0xFE	; 254
    17d6:	08 f0       	brcs	.+2      	; 0x17da <__addsf3x+0x96>
    17d8:	b3 cf       	rjmp	.-154    	; 0x1740 <__addsf3+0x1e>
    17da:	93 95       	inc	r25
    17dc:	88 0f       	add	r24, r24
    17de:	08 f0       	brcs	.+2      	; 0x17e2 <__addsf3x+0x9e>
    17e0:	99 27       	eor	r25, r25
    17e2:	ee 0f       	add	r30, r30
    17e4:	97 95       	ror	r25
    17e6:	87 95       	ror	r24
    17e8:	08 95       	ret

000017ea <__divsf3>:
    17ea:	0c d0       	rcall	.+24     	; 0x1804 <__divsf3x>
    17ec:	e6 c0       	rjmp	.+460    	; 0x19ba <__fp_round>
    17ee:	de d0       	rcall	.+444    	; 0x19ac <__fp_pscB>
    17f0:	40 f0       	brcs	.+16     	; 0x1802 <__divsf3+0x18>
    17f2:	d5 d0       	rcall	.+426    	; 0x199e <__fp_pscA>
    17f4:	30 f0       	brcs	.+12     	; 0x1802 <__divsf3+0x18>
    17f6:	21 f4       	brne	.+8      	; 0x1800 <__divsf3+0x16>
    17f8:	5f 3f       	cpi	r21, 0xFF	; 255
    17fa:	19 f0       	breq	.+6      	; 0x1802 <__divsf3+0x18>
    17fc:	c7 c0       	rjmp	.+398    	; 0x198c <__fp_inf>
    17fe:	51 11       	cpse	r21, r1
    1800:	10 c1       	rjmp	.+544    	; 0x1a22 <__fp_szero>
    1802:	ca c0       	rjmp	.+404    	; 0x1998 <__fp_nan>

00001804 <__divsf3x>:
    1804:	eb d0       	rcall	.+470    	; 0x19dc <__fp_split3>
    1806:	98 f3       	brcs	.-26     	; 0x17ee <__divsf3+0x4>

00001808 <__divsf3_pse>:
    1808:	99 23       	and	r25, r25
    180a:	c9 f3       	breq	.-14     	; 0x17fe <__divsf3+0x14>
    180c:	55 23       	and	r21, r21
    180e:	b1 f3       	breq	.-20     	; 0x17fc <__divsf3+0x12>
    1810:	95 1b       	sub	r25, r21
    1812:	55 0b       	sbc	r21, r21
    1814:	bb 27       	eor	r27, r27
    1816:	aa 27       	eor	r26, r26
    1818:	62 17       	cp	r22, r18
    181a:	73 07       	cpc	r23, r19
    181c:	84 07       	cpc	r24, r20
    181e:	38 f0       	brcs	.+14     	; 0x182e <__divsf3_pse+0x26>
    1820:	9f 5f       	subi	r25, 0xFF	; 255
    1822:	5f 4f       	sbci	r21, 0xFF	; 255
    1824:	22 0f       	add	r18, r18
    1826:	33 1f       	adc	r19, r19
    1828:	44 1f       	adc	r20, r20
    182a:	aa 1f       	adc	r26, r26
    182c:	a9 f3       	breq	.-22     	; 0x1818 <__divsf3_pse+0x10>
    182e:	33 d0       	rcall	.+102    	; 0x1896 <__divsf3_pse+0x8e>
    1830:	0e 2e       	mov	r0, r30
    1832:	3a f0       	brmi	.+14     	; 0x1842 <__divsf3_pse+0x3a>
    1834:	e0 e8       	ldi	r30, 0x80	; 128
    1836:	30 d0       	rcall	.+96     	; 0x1898 <__divsf3_pse+0x90>
    1838:	91 50       	subi	r25, 0x01	; 1
    183a:	50 40       	sbci	r21, 0x00	; 0
    183c:	e6 95       	lsr	r30
    183e:	00 1c       	adc	r0, r0
    1840:	ca f7       	brpl	.-14     	; 0x1834 <__divsf3_pse+0x2c>
    1842:	29 d0       	rcall	.+82     	; 0x1896 <__divsf3_pse+0x8e>
    1844:	fe 2f       	mov	r31, r30
    1846:	27 d0       	rcall	.+78     	; 0x1896 <__divsf3_pse+0x8e>
    1848:	66 0f       	add	r22, r22
    184a:	77 1f       	adc	r23, r23
    184c:	88 1f       	adc	r24, r24
    184e:	bb 1f       	adc	r27, r27
    1850:	26 17       	cp	r18, r22
    1852:	37 07       	cpc	r19, r23
    1854:	48 07       	cpc	r20, r24
    1856:	ab 07       	cpc	r26, r27
    1858:	b0 e8       	ldi	r27, 0x80	; 128
    185a:	09 f0       	breq	.+2      	; 0x185e <__divsf3_pse+0x56>
    185c:	bb 0b       	sbc	r27, r27
    185e:	80 2d       	mov	r24, r0
    1860:	bf 01       	movw	r22, r30
    1862:	ff 27       	eor	r31, r31
    1864:	93 58       	subi	r25, 0x83	; 131
    1866:	5f 4f       	sbci	r21, 0xFF	; 255
    1868:	2a f0       	brmi	.+10     	; 0x1874 <__divsf3_pse+0x6c>
    186a:	9e 3f       	cpi	r25, 0xFE	; 254
    186c:	51 05       	cpc	r21, r1
    186e:	68 f0       	brcs	.+26     	; 0x188a <__divsf3_pse+0x82>
    1870:	8d c0       	rjmp	.+282    	; 0x198c <__fp_inf>
    1872:	d7 c0       	rjmp	.+430    	; 0x1a22 <__fp_szero>
    1874:	5f 3f       	cpi	r21, 0xFF	; 255
    1876:	ec f3       	brlt	.-6      	; 0x1872 <__divsf3_pse+0x6a>
    1878:	98 3e       	cpi	r25, 0xE8	; 232
    187a:	dc f3       	brlt	.-10     	; 0x1872 <__divsf3_pse+0x6a>
    187c:	86 95       	lsr	r24
    187e:	77 95       	ror	r23
    1880:	67 95       	ror	r22
    1882:	b7 95       	ror	r27
    1884:	f7 95       	ror	r31
    1886:	9f 5f       	subi	r25, 0xFF	; 255
    1888:	c9 f7       	brne	.-14     	; 0x187c <__divsf3_pse+0x74>
    188a:	88 0f       	add	r24, r24
    188c:	91 1d       	adc	r25, r1
    188e:	96 95       	lsr	r25
    1890:	87 95       	ror	r24
    1892:	97 f9       	bld	r25, 7
    1894:	08 95       	ret
    1896:	e1 e0       	ldi	r30, 0x01	; 1
    1898:	66 0f       	add	r22, r22
    189a:	77 1f       	adc	r23, r23
    189c:	88 1f       	adc	r24, r24
    189e:	bb 1f       	adc	r27, r27
    18a0:	62 17       	cp	r22, r18
    18a2:	73 07       	cpc	r23, r19
    18a4:	84 07       	cpc	r24, r20
    18a6:	ba 07       	cpc	r27, r26
    18a8:	20 f0       	brcs	.+8      	; 0x18b2 <__divsf3_pse+0xaa>
    18aa:	62 1b       	sub	r22, r18
    18ac:	73 0b       	sbc	r23, r19
    18ae:	84 0b       	sbc	r24, r20
    18b0:	ba 0b       	sbc	r27, r26
    18b2:	ee 1f       	adc	r30, r30
    18b4:	88 f7       	brcc	.-30     	; 0x1898 <__divsf3_pse+0x90>
    18b6:	e0 95       	com	r30
    18b8:	08 95       	ret

000018ba <__fixunssfsi>:
    18ba:	98 d0       	rcall	.+304    	; 0x19ec <__fp_splitA>
    18bc:	88 f0       	brcs	.+34     	; 0x18e0 <__fixunssfsi+0x26>
    18be:	9f 57       	subi	r25, 0x7F	; 127
    18c0:	90 f0       	brcs	.+36     	; 0x18e6 <__fixunssfsi+0x2c>
    18c2:	b9 2f       	mov	r27, r25
    18c4:	99 27       	eor	r25, r25
    18c6:	b7 51       	subi	r27, 0x17	; 23
    18c8:	a0 f0       	brcs	.+40     	; 0x18f2 <__fixunssfsi+0x38>
    18ca:	d1 f0       	breq	.+52     	; 0x1900 <__fixunssfsi+0x46>
    18cc:	66 0f       	add	r22, r22
    18ce:	77 1f       	adc	r23, r23
    18d0:	88 1f       	adc	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	1a f0       	brmi	.+6      	; 0x18dc <__fixunssfsi+0x22>
    18d6:	ba 95       	dec	r27
    18d8:	c9 f7       	brne	.-14     	; 0x18cc <__fixunssfsi+0x12>
    18da:	12 c0       	rjmp	.+36     	; 0x1900 <__fixunssfsi+0x46>
    18dc:	b1 30       	cpi	r27, 0x01	; 1
    18de:	81 f0       	breq	.+32     	; 0x1900 <__fixunssfsi+0x46>
    18e0:	9f d0       	rcall	.+318    	; 0x1a20 <__fp_zero>
    18e2:	b1 e0       	ldi	r27, 0x01	; 1
    18e4:	08 95       	ret
    18e6:	9c c0       	rjmp	.+312    	; 0x1a20 <__fp_zero>
    18e8:	67 2f       	mov	r22, r23
    18ea:	78 2f       	mov	r23, r24
    18ec:	88 27       	eor	r24, r24
    18ee:	b8 5f       	subi	r27, 0xF8	; 248
    18f0:	39 f0       	breq	.+14     	; 0x1900 <__fixunssfsi+0x46>
    18f2:	b9 3f       	cpi	r27, 0xF9	; 249
    18f4:	cc f3       	brlt	.-14     	; 0x18e8 <__fixunssfsi+0x2e>
    18f6:	86 95       	lsr	r24
    18f8:	77 95       	ror	r23
    18fa:	67 95       	ror	r22
    18fc:	b3 95       	inc	r27
    18fe:	d9 f7       	brne	.-10     	; 0x18f6 <__fixunssfsi+0x3c>
    1900:	3e f4       	brtc	.+14     	; 0x1910 <__fixunssfsi+0x56>
    1902:	90 95       	com	r25
    1904:	80 95       	com	r24
    1906:	70 95       	com	r23
    1908:	61 95       	neg	r22
    190a:	7f 4f       	sbci	r23, 0xFF	; 255
    190c:	8f 4f       	sbci	r24, 0xFF	; 255
    190e:	9f 4f       	sbci	r25, 0xFF	; 255
    1910:	08 95       	ret

00001912 <__floatunsisf>:
    1912:	e8 94       	clt
    1914:	09 c0       	rjmp	.+18     	; 0x1928 <__floatsisf+0x12>

00001916 <__floatsisf>:
    1916:	97 fb       	bst	r25, 7
    1918:	3e f4       	brtc	.+14     	; 0x1928 <__floatsisf+0x12>
    191a:	90 95       	com	r25
    191c:	80 95       	com	r24
    191e:	70 95       	com	r23
    1920:	61 95       	neg	r22
    1922:	7f 4f       	sbci	r23, 0xFF	; 255
    1924:	8f 4f       	sbci	r24, 0xFF	; 255
    1926:	9f 4f       	sbci	r25, 0xFF	; 255
    1928:	99 23       	and	r25, r25
    192a:	a9 f0       	breq	.+42     	; 0x1956 <__floatsisf+0x40>
    192c:	f9 2f       	mov	r31, r25
    192e:	96 e9       	ldi	r25, 0x96	; 150
    1930:	bb 27       	eor	r27, r27
    1932:	93 95       	inc	r25
    1934:	f6 95       	lsr	r31
    1936:	87 95       	ror	r24
    1938:	77 95       	ror	r23
    193a:	67 95       	ror	r22
    193c:	b7 95       	ror	r27
    193e:	f1 11       	cpse	r31, r1
    1940:	f8 cf       	rjmp	.-16     	; 0x1932 <__floatsisf+0x1c>
    1942:	fa f4       	brpl	.+62     	; 0x1982 <__floatsisf+0x6c>
    1944:	bb 0f       	add	r27, r27
    1946:	11 f4       	brne	.+4      	; 0x194c <__floatsisf+0x36>
    1948:	60 ff       	sbrs	r22, 0
    194a:	1b c0       	rjmp	.+54     	; 0x1982 <__floatsisf+0x6c>
    194c:	6f 5f       	subi	r22, 0xFF	; 255
    194e:	7f 4f       	sbci	r23, 0xFF	; 255
    1950:	8f 4f       	sbci	r24, 0xFF	; 255
    1952:	9f 4f       	sbci	r25, 0xFF	; 255
    1954:	16 c0       	rjmp	.+44     	; 0x1982 <__floatsisf+0x6c>
    1956:	88 23       	and	r24, r24
    1958:	11 f0       	breq	.+4      	; 0x195e <__floatsisf+0x48>
    195a:	96 e9       	ldi	r25, 0x96	; 150
    195c:	11 c0       	rjmp	.+34     	; 0x1980 <__floatsisf+0x6a>
    195e:	77 23       	and	r23, r23
    1960:	21 f0       	breq	.+8      	; 0x196a <__floatsisf+0x54>
    1962:	9e e8       	ldi	r25, 0x8E	; 142
    1964:	87 2f       	mov	r24, r23
    1966:	76 2f       	mov	r23, r22
    1968:	05 c0       	rjmp	.+10     	; 0x1974 <__floatsisf+0x5e>
    196a:	66 23       	and	r22, r22
    196c:	71 f0       	breq	.+28     	; 0x198a <__floatsisf+0x74>
    196e:	96 e8       	ldi	r25, 0x86	; 134
    1970:	86 2f       	mov	r24, r22
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	60 e0       	ldi	r22, 0x00	; 0
    1976:	2a f0       	brmi	.+10     	; 0x1982 <__floatsisf+0x6c>
    1978:	9a 95       	dec	r25
    197a:	66 0f       	add	r22, r22
    197c:	77 1f       	adc	r23, r23
    197e:	88 1f       	adc	r24, r24
    1980:	da f7       	brpl	.-10     	; 0x1978 <__floatsisf+0x62>
    1982:	88 0f       	add	r24, r24
    1984:	96 95       	lsr	r25
    1986:	87 95       	ror	r24
    1988:	97 f9       	bld	r25, 7
    198a:	08 95       	ret

0000198c <__fp_inf>:
    198c:	97 f9       	bld	r25, 7
    198e:	9f 67       	ori	r25, 0x7F	; 127
    1990:	80 e8       	ldi	r24, 0x80	; 128
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	08 95       	ret

00001998 <__fp_nan>:
    1998:	9f ef       	ldi	r25, 0xFF	; 255
    199a:	80 ec       	ldi	r24, 0xC0	; 192
    199c:	08 95       	ret

0000199e <__fp_pscA>:
    199e:	00 24       	eor	r0, r0
    19a0:	0a 94       	dec	r0
    19a2:	16 16       	cp	r1, r22
    19a4:	17 06       	cpc	r1, r23
    19a6:	18 06       	cpc	r1, r24
    19a8:	09 06       	cpc	r0, r25
    19aa:	08 95       	ret

000019ac <__fp_pscB>:
    19ac:	00 24       	eor	r0, r0
    19ae:	0a 94       	dec	r0
    19b0:	12 16       	cp	r1, r18
    19b2:	13 06       	cpc	r1, r19
    19b4:	14 06       	cpc	r1, r20
    19b6:	05 06       	cpc	r0, r21
    19b8:	08 95       	ret

000019ba <__fp_round>:
    19ba:	09 2e       	mov	r0, r25
    19bc:	03 94       	inc	r0
    19be:	00 0c       	add	r0, r0
    19c0:	11 f4       	brne	.+4      	; 0x19c6 <__fp_round+0xc>
    19c2:	88 23       	and	r24, r24
    19c4:	52 f0       	brmi	.+20     	; 0x19da <__fp_round+0x20>
    19c6:	bb 0f       	add	r27, r27
    19c8:	40 f4       	brcc	.+16     	; 0x19da <__fp_round+0x20>
    19ca:	bf 2b       	or	r27, r31
    19cc:	11 f4       	brne	.+4      	; 0x19d2 <__fp_round+0x18>
    19ce:	60 ff       	sbrs	r22, 0
    19d0:	04 c0       	rjmp	.+8      	; 0x19da <__fp_round+0x20>
    19d2:	6f 5f       	subi	r22, 0xFF	; 255
    19d4:	7f 4f       	sbci	r23, 0xFF	; 255
    19d6:	8f 4f       	sbci	r24, 0xFF	; 255
    19d8:	9f 4f       	sbci	r25, 0xFF	; 255
    19da:	08 95       	ret

000019dc <__fp_split3>:
    19dc:	57 fd       	sbrc	r21, 7
    19de:	90 58       	subi	r25, 0x80	; 128
    19e0:	44 0f       	add	r20, r20
    19e2:	55 1f       	adc	r21, r21
    19e4:	59 f0       	breq	.+22     	; 0x19fc <__fp_splitA+0x10>
    19e6:	5f 3f       	cpi	r21, 0xFF	; 255
    19e8:	71 f0       	breq	.+28     	; 0x1a06 <__fp_splitA+0x1a>
    19ea:	47 95       	ror	r20

000019ec <__fp_splitA>:
    19ec:	88 0f       	add	r24, r24
    19ee:	97 fb       	bst	r25, 7
    19f0:	99 1f       	adc	r25, r25
    19f2:	61 f0       	breq	.+24     	; 0x1a0c <__fp_splitA+0x20>
    19f4:	9f 3f       	cpi	r25, 0xFF	; 255
    19f6:	79 f0       	breq	.+30     	; 0x1a16 <__fp_splitA+0x2a>
    19f8:	87 95       	ror	r24
    19fa:	08 95       	ret
    19fc:	12 16       	cp	r1, r18
    19fe:	13 06       	cpc	r1, r19
    1a00:	14 06       	cpc	r1, r20
    1a02:	55 1f       	adc	r21, r21
    1a04:	f2 cf       	rjmp	.-28     	; 0x19ea <__fp_split3+0xe>
    1a06:	46 95       	lsr	r20
    1a08:	f1 df       	rcall	.-30     	; 0x19ec <__fp_splitA>
    1a0a:	08 c0       	rjmp	.+16     	; 0x1a1c <__fp_splitA+0x30>
    1a0c:	16 16       	cp	r1, r22
    1a0e:	17 06       	cpc	r1, r23
    1a10:	18 06       	cpc	r1, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	f1 cf       	rjmp	.-30     	; 0x19f8 <__fp_splitA+0xc>
    1a16:	86 95       	lsr	r24
    1a18:	71 05       	cpc	r23, r1
    1a1a:	61 05       	cpc	r22, r1
    1a1c:	08 94       	sec
    1a1e:	08 95       	ret

00001a20 <__fp_zero>:
    1a20:	e8 94       	clt

00001a22 <__fp_szero>:
    1a22:	bb 27       	eor	r27, r27
    1a24:	66 27       	eor	r22, r22
    1a26:	77 27       	eor	r23, r23
    1a28:	cb 01       	movw	r24, r22
    1a2a:	97 f9       	bld	r25, 7
    1a2c:	08 95       	ret

00001a2e <__gesf2>:
    1a2e:	66 d0       	rcall	.+204    	; 0x1afc <__fp_cmp>
    1a30:	08 f4       	brcc	.+2      	; 0x1a34 <__gesf2+0x6>
    1a32:	8f ef       	ldi	r24, 0xFF	; 255
    1a34:	08 95       	ret

00001a36 <__mulsf3>:
    1a36:	0b d0       	rcall	.+22     	; 0x1a4e <__mulsf3x>
    1a38:	c0 cf       	rjmp	.-128    	; 0x19ba <__fp_round>
    1a3a:	b1 df       	rcall	.-158    	; 0x199e <__fp_pscA>
    1a3c:	28 f0       	brcs	.+10     	; 0x1a48 <__mulsf3+0x12>
    1a3e:	b6 df       	rcall	.-148    	; 0x19ac <__fp_pscB>
    1a40:	18 f0       	brcs	.+6      	; 0x1a48 <__mulsf3+0x12>
    1a42:	95 23       	and	r25, r21
    1a44:	09 f0       	breq	.+2      	; 0x1a48 <__mulsf3+0x12>
    1a46:	a2 cf       	rjmp	.-188    	; 0x198c <__fp_inf>
    1a48:	a7 cf       	rjmp	.-178    	; 0x1998 <__fp_nan>
    1a4a:	11 24       	eor	r1, r1
    1a4c:	ea cf       	rjmp	.-44     	; 0x1a22 <__fp_szero>

00001a4e <__mulsf3x>:
    1a4e:	c6 df       	rcall	.-116    	; 0x19dc <__fp_split3>
    1a50:	a0 f3       	brcs	.-24     	; 0x1a3a <__mulsf3+0x4>

00001a52 <__mulsf3_pse>:
    1a52:	95 9f       	mul	r25, r21
    1a54:	d1 f3       	breq	.-12     	; 0x1a4a <__mulsf3+0x14>
    1a56:	95 0f       	add	r25, r21
    1a58:	50 e0       	ldi	r21, 0x00	; 0
    1a5a:	55 1f       	adc	r21, r21
    1a5c:	62 9f       	mul	r22, r18
    1a5e:	f0 01       	movw	r30, r0
    1a60:	72 9f       	mul	r23, r18
    1a62:	bb 27       	eor	r27, r27
    1a64:	f0 0d       	add	r31, r0
    1a66:	b1 1d       	adc	r27, r1
    1a68:	63 9f       	mul	r22, r19
    1a6a:	aa 27       	eor	r26, r26
    1a6c:	f0 0d       	add	r31, r0
    1a6e:	b1 1d       	adc	r27, r1
    1a70:	aa 1f       	adc	r26, r26
    1a72:	64 9f       	mul	r22, r20
    1a74:	66 27       	eor	r22, r22
    1a76:	b0 0d       	add	r27, r0
    1a78:	a1 1d       	adc	r26, r1
    1a7a:	66 1f       	adc	r22, r22
    1a7c:	82 9f       	mul	r24, r18
    1a7e:	22 27       	eor	r18, r18
    1a80:	b0 0d       	add	r27, r0
    1a82:	a1 1d       	adc	r26, r1
    1a84:	62 1f       	adc	r22, r18
    1a86:	73 9f       	mul	r23, r19
    1a88:	b0 0d       	add	r27, r0
    1a8a:	a1 1d       	adc	r26, r1
    1a8c:	62 1f       	adc	r22, r18
    1a8e:	83 9f       	mul	r24, r19
    1a90:	a0 0d       	add	r26, r0
    1a92:	61 1d       	adc	r22, r1
    1a94:	22 1f       	adc	r18, r18
    1a96:	74 9f       	mul	r23, r20
    1a98:	33 27       	eor	r19, r19
    1a9a:	a0 0d       	add	r26, r0
    1a9c:	61 1d       	adc	r22, r1
    1a9e:	23 1f       	adc	r18, r19
    1aa0:	84 9f       	mul	r24, r20
    1aa2:	60 0d       	add	r22, r0
    1aa4:	21 1d       	adc	r18, r1
    1aa6:	82 2f       	mov	r24, r18
    1aa8:	76 2f       	mov	r23, r22
    1aaa:	6a 2f       	mov	r22, r26
    1aac:	11 24       	eor	r1, r1
    1aae:	9f 57       	subi	r25, 0x7F	; 127
    1ab0:	50 40       	sbci	r21, 0x00	; 0
    1ab2:	8a f0       	brmi	.+34     	; 0x1ad6 <__mulsf3_pse+0x84>
    1ab4:	e1 f0       	breq	.+56     	; 0x1aee <__mulsf3_pse+0x9c>
    1ab6:	88 23       	and	r24, r24
    1ab8:	4a f0       	brmi	.+18     	; 0x1acc <__mulsf3_pse+0x7a>
    1aba:	ee 0f       	add	r30, r30
    1abc:	ff 1f       	adc	r31, r31
    1abe:	bb 1f       	adc	r27, r27
    1ac0:	66 1f       	adc	r22, r22
    1ac2:	77 1f       	adc	r23, r23
    1ac4:	88 1f       	adc	r24, r24
    1ac6:	91 50       	subi	r25, 0x01	; 1
    1ac8:	50 40       	sbci	r21, 0x00	; 0
    1aca:	a9 f7       	brne	.-22     	; 0x1ab6 <__mulsf3_pse+0x64>
    1acc:	9e 3f       	cpi	r25, 0xFE	; 254
    1ace:	51 05       	cpc	r21, r1
    1ad0:	70 f0       	brcs	.+28     	; 0x1aee <__mulsf3_pse+0x9c>
    1ad2:	5c cf       	rjmp	.-328    	; 0x198c <__fp_inf>
    1ad4:	a6 cf       	rjmp	.-180    	; 0x1a22 <__fp_szero>
    1ad6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ad8:	ec f3       	brlt	.-6      	; 0x1ad4 <__mulsf3_pse+0x82>
    1ada:	98 3e       	cpi	r25, 0xE8	; 232
    1adc:	dc f3       	brlt	.-10     	; 0x1ad4 <__mulsf3_pse+0x82>
    1ade:	86 95       	lsr	r24
    1ae0:	77 95       	ror	r23
    1ae2:	67 95       	ror	r22
    1ae4:	b7 95       	ror	r27
    1ae6:	f7 95       	ror	r31
    1ae8:	e7 95       	ror	r30
    1aea:	9f 5f       	subi	r25, 0xFF	; 255
    1aec:	c1 f7       	brne	.-16     	; 0x1ade <__mulsf3_pse+0x8c>
    1aee:	fe 2b       	or	r31, r30
    1af0:	88 0f       	add	r24, r24
    1af2:	91 1d       	adc	r25, r1
    1af4:	96 95       	lsr	r25
    1af6:	87 95       	ror	r24
    1af8:	97 f9       	bld	r25, 7
    1afa:	08 95       	ret

00001afc <__fp_cmp>:
    1afc:	99 0f       	add	r25, r25
    1afe:	00 08       	sbc	r0, r0
    1b00:	55 0f       	add	r21, r21
    1b02:	aa 0b       	sbc	r26, r26
    1b04:	e0 e8       	ldi	r30, 0x80	; 128
    1b06:	fe ef       	ldi	r31, 0xFE	; 254
    1b08:	16 16       	cp	r1, r22
    1b0a:	17 06       	cpc	r1, r23
    1b0c:	e8 07       	cpc	r30, r24
    1b0e:	f9 07       	cpc	r31, r25
    1b10:	c0 f0       	brcs	.+48     	; 0x1b42 <__fp_cmp+0x46>
    1b12:	12 16       	cp	r1, r18
    1b14:	13 06       	cpc	r1, r19
    1b16:	e4 07       	cpc	r30, r20
    1b18:	f5 07       	cpc	r31, r21
    1b1a:	98 f0       	brcs	.+38     	; 0x1b42 <__fp_cmp+0x46>
    1b1c:	62 1b       	sub	r22, r18
    1b1e:	73 0b       	sbc	r23, r19
    1b20:	84 0b       	sbc	r24, r20
    1b22:	95 0b       	sbc	r25, r21
    1b24:	39 f4       	brne	.+14     	; 0x1b34 <__fp_cmp+0x38>
    1b26:	0a 26       	eor	r0, r26
    1b28:	61 f0       	breq	.+24     	; 0x1b42 <__fp_cmp+0x46>
    1b2a:	23 2b       	or	r18, r19
    1b2c:	24 2b       	or	r18, r20
    1b2e:	25 2b       	or	r18, r21
    1b30:	21 f4       	brne	.+8      	; 0x1b3a <__fp_cmp+0x3e>
    1b32:	08 95       	ret
    1b34:	0a 26       	eor	r0, r26
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <__fp_cmp+0x3e>
    1b38:	a1 40       	sbci	r26, 0x01	; 1
    1b3a:	a6 95       	lsr	r26
    1b3c:	8f ef       	ldi	r24, 0xFF	; 255
    1b3e:	81 1d       	adc	r24, r1
    1b40:	81 1d       	adc	r24, r1
    1b42:	08 95       	ret

00001b44 <__tablejump2__>:
    1b44:	ee 0f       	add	r30, r30
    1b46:	ff 1f       	adc	r31, r31

00001b48 <__tablejump__>:
    1b48:	05 90       	lpm	r0, Z+
    1b4a:	f4 91       	lpm	r31, Z
    1b4c:	e0 2d       	mov	r30, r0
    1b4e:	09 94       	ijmp

00001b50 <__eerd_block_m168pa>:
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22

00001b54 <__eerd_blraw_m168pa>:
    1b54:	fc 01       	movw	r30, r24
    1b56:	f9 99       	sbic	0x1f, 1	; 31
    1b58:	fe cf       	rjmp	.-4      	; 0x1b56 <__eerd_blraw_m168pa+0x2>
    1b5a:	06 c0       	rjmp	.+12     	; 0x1b68 <__eerd_blraw_m168pa+0x14>
    1b5c:	f2 bd       	out	0x22, r31	; 34
    1b5e:	e1 bd       	out	0x21, r30	; 33
    1b60:	f8 9a       	sbi	0x1f, 0	; 31
    1b62:	31 96       	adiw	r30, 0x01	; 1
    1b64:	00 b4       	in	r0, 0x20	; 32
    1b66:	0d 92       	st	X+, r0
    1b68:	41 50       	subi	r20, 0x01	; 1
    1b6a:	50 40       	sbci	r21, 0x00	; 0
    1b6c:	b8 f7       	brcc	.-18     	; 0x1b5c <__eerd_blraw_m168pa+0x8>
    1b6e:	08 95       	ret

00001b70 <__eerd_byte_m168pa>:
    1b70:	f9 99       	sbic	0x1f, 1	; 31
    1b72:	fe cf       	rjmp	.-4      	; 0x1b70 <__eerd_byte_m168pa>
    1b74:	92 bd       	out	0x22, r25	; 34
    1b76:	81 bd       	out	0x21, r24	; 33
    1b78:	f8 9a       	sbi	0x1f, 0	; 31
    1b7a:	99 27       	eor	r25, r25
    1b7c:	80 b5       	in	r24, 0x20	; 32
    1b7e:	08 95       	ret

00001b80 <__eerd_word_m168pa>:
    1b80:	a8 e1       	ldi	r26, 0x18	; 24
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	42 e0       	ldi	r20, 0x02	; 2
    1b86:	50 e0       	ldi	r21, 0x00	; 0
    1b88:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <__eerd_blraw_m168pa>

00001b8c <__eewr_block_m168pa>:
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	03 c0       	rjmp	.+6      	; 0x1b98 <__eewr_block_m168pa+0xc>
    1b92:	2d 91       	ld	r18, X+
    1b94:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__eewr_r18_m168pa>
    1b98:	41 50       	subi	r20, 0x01	; 1
    1b9a:	50 40       	sbci	r21, 0x00	; 0
    1b9c:	d0 f7       	brcc	.-12     	; 0x1b92 <__eewr_block_m168pa+0x6>
    1b9e:	08 95       	ret

00001ba0 <__eewr_byte_m168pa>:
    1ba0:	26 2f       	mov	r18, r22

00001ba2 <__eewr_r18_m168pa>:
    1ba2:	f9 99       	sbic	0x1f, 1	; 31
    1ba4:	fe cf       	rjmp	.-4      	; 0x1ba2 <__eewr_r18_m168pa>
    1ba6:	1f ba       	out	0x1f, r1	; 31
    1ba8:	92 bd       	out	0x22, r25	; 34
    1baa:	81 bd       	out	0x21, r24	; 33
    1bac:	20 bd       	out	0x20, r18	; 32
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	fa 9a       	sbi	0x1f, 2	; 31
    1bb4:	f9 9a       	sbi	0x1f, 1	; 31
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	01 96       	adiw	r24, 0x01	; 1
    1bba:	08 95       	ret

00001bbc <__eewr_word_m168pa>:
    1bbc:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__eewr_byte_m168pa>
    1bc0:	27 2f       	mov	r18, r23
    1bc2:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__eewr_r18_m168pa>

00001bc6 <_exit>:
    1bc6:	f8 94       	cli

00001bc8 <__stop_program>:
    1bc8:	ff cf       	rjmp	.-2      	; 0x1bc8 <__stop_program>
